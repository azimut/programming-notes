- Cursos Uni https://www.youtube.com/channel/UCtUHm20l_zL4u8Q59i3dYow/playlists
  Cursos UNAM OS https://www.youtube.com/c/SistemasOperativosCienciasUNAM/playlists
- Courses https://ebookfoundation.github.io/free-programming-books/courses/free-courses-en.html
- Topics https://ebookfoundation.github.io/free-programming-books/books/free-programming-books-subjects.html
- Programming Languages https://ebookfoundation.github.io/free-programming-books/books/free-programming-books-langs.html
- Competitive https://cses.fi/problemset/
- Channel: Coding with Some Guy https://www.youtube.com/channel/UCBwH4Xj7s5C9tkeYxI3dIzA/about
- Channel: Creel https://www.youtube.com/c/WhatsACreel/videos
- Article: 2014 - Is TDD Dead https://news.ycombinator.com/item?id=24281195
- Article: Carmack https://web.archive.org/web/20120702231514/http://www.altdevblogaday.com/2012/04/26/functional-programming-in-c/
- Article: Carmack http://number-none.com/blow/john_carmack_on_inlined_code.html
- Article: Real Programmer Don't use Pascal https://www.pbm.com/~lindahl/real.programmers.html
- Course: Cryptography https://crypto.stanford.edu/~dabo/
- Course: Principles of Digital Communications https://www.youtube.com/playlist?list=PL2AD004D035C24F21
- Video: Microservices Patterns: https://www.youtube.com/playlist?list=PLzERW_Obpmv81N-F8yBowb_QHvf9ISG7y
- What every programmer should know about memory, Part 1
  https://lwn.net/Articles/250967/
- True Technologist / Interviews
  https://www.youtube.com/playlist?list=PLYaGSokOr0MO-ly3vKVpxU0Ftvkule8pg
- Make Better Software: The Training Series / Joel Spolsky
  https://www.youtube.com/playlist?list=PLXOSex6PRPFN48McdqRkGMLFd9-pov0Fe
- Blogs: https://github.com/kuchin/awesome-cto
- https://github.com/mtdvio/every-programmer-should-know
- Learn Type Theory https://github.com/jozefg/learn-tt
- Podcast - History of computing https://open.spotify.com/show/1wdCnbj68DbWinQjmEwUaC
- https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/
-  Continuous Delivery https://www.youtube.com/channel/UCCfqyGl3nq_V0bo64CjZh8g/videos
- https://ourmachinery.com/post/data-structures-part-1-bulk-data/
- Ask HN: What are some of the best technical talks you've heard?
  https://news.ycombinator.com/item?id=18217762
- Structure and Interpretation of a Computer Revolution https://www.youtube.com/playlist?list=PLoRl3Ht4JOcfcnpf79R9f80bqjMvsOpeg
- https://github.com/dwmkerr/hacker-laws
- https://github.com/hemanth/functional-programming-jargon
  https://github.com/jmesyou/functional-programming-jargon.py
- APL
  talks, pure functional https://github.com/Co-dfns/Co-dfns
  reference https://github.com/jpellegrini/gnu-apl-refcard
- ASM
  examples https://github.com/cirosantilli/x86-bare-metal-examples
* gamelisp.rs
  https://gamelisp.rs/reference/overview.html
* William Byrd on "The Most Beautiful Program Ever Written" [PWL NYC]
  https://www.youtube.com/watch?v=OyfBQmvr2Hc
  - "Programming Should Eat Itself" by Nada Amin
    https://www.youtube.com/watch?v=SrKj4hYic5A
* Lisp Cast
** A Theory of functional programming 0001
   - Started the podcast as a way to put the ideas of his book out of his head
** Is Haskell a Procedural Language
   - Anecdote of working on a system that didn't implement function programming.
     And was growing "too large".
     Most of the code was IO.
   - They weren't doing:
     1) high order abstractions
     2) Data abstractions, operating on that data
     3) Representing things as a pure domain model
   - They needed to abstract and work with that pure representation and then do a min of IO stuff.
   - FP is a mindset, distinguishing between
     - actions (side effects)
     - calculations
     - data
* Video Object-Oriented Programming is Bad
  https://www.youtube.com/watch?v=QM1iUe6IofM
* Book: Programming with Types
** 1
- The Curry-Howard Correspondence
  https://www.youtube.com/watch?v=GdcOy6zVFC4
  16:00
- Propositions as Types - Computerphile
  Prop = Type
  https://www.youtube.com/watch?v=SknxggwRPzU
- Curry-Howard correspondene, aka proofs-as-programs
  - Show where is a close relationship between *logic* and *type theory*
- A function can also be interpreted as "typeA *implies* typeB"
  Given *evicence* of the proposition typeA
  The function(implication) can produce evidence of the proposition typeB
- =State Space= of a running program is the combination of all possible
  values of all its live variables.
- Benefits of Typing are
  1) Correctness
  2) Inmmutability, const, values can be inlined by the compiler
  3) Encapsulation, private methods or fields, api
  4) Composability, generic functions
  5) Readability
- Being able to interpret code as data and data as code
  can lead to catastrophic results
- =Duck Typing= comes from the phrase
  "If it waddles like a duck and it quacks like a duck, it must be a duck"
- Type Systems differn in *when* types are checkd and *how strict* the checks are
  - WHEN Static vs Dynamic
  - HOW  Strong vs Weak
PAGE 15/35
