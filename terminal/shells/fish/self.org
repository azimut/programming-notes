#+TITLE: fish
#+DATE: <2025-01-15 miÃ©>

#+begin_src
                 ___
  ___======____=---=)
/T            \_--===)
[ \ (O)   \~    \_-==)
 \      / )J~~    \-=)
  \\___/  )JJ~~~   \)
   \_____/JJJ~~~~    \
   / \  , \J~~~~~     \
  (-\)\=|\\\~~~~       L__
  (\\)  (\\\)_           \==__
   \V    \\\) ===_____   \\\\\\
          \V)     \_) \\\\JJ\J\)
                      /J\JT\JJJJ)
                      (JJJ| \UUU)
                       (UU)
#+end_src

|--------+-------------------------------------------------|
| home   | https://fishshell.com/                          |
| source | https://github.com/fish-shell/fish-shell        |
| wiki   | https://en.wikipedia.org/wiki/Fish_(Unix_shell) |
|--------+-------------------------------------------------|

- 2005
- Author: Axel Liljencrantz
- "friendly interactive shell"
- does NOT adhere to POSIX
- C++ later rewritten in Rust
- .fish extension
- ~/.config/fish/config.fish
- features
  - ~funcsave~
  - never creates *subshells* for language features
  - parses man pages for autocompletion
  - context aware autocompletion (context = dir)
  - fuzzy autocompletion
  - syntax highlight
  - easy to use cli cmd editor

* language

- ME: a bit like TCL and ruby
- ME: fills that small gap, of:
  - Personal use
  - Well defined (small) scope
  - Do NOT rely on control flow
  - 99% external commands
  - BUT i would like
    - a couple of knobs
    - OR some floating point math

#+begin_src fish
  echo $foo         # variable
  function foo --argument-names foo bar baz
      echo $argv # still has foo
      echo $foo
  end
#+end_src

** control flow

- if, else if, else https://fishshell.com/docs/current/cmds/if.html
- switch https://fishshell.com/docs/current/cmds/switch.html

** loops

#+begin_src fish
  for i in *.jpg; convert $i (basename $i .jpg).png; end
  for i in *.jpg
      convert $i (basename $i .jpg).png
  end
  while read line
      set arr (echo $line|tr : \n)
      echo $arr[5]
  end
#+end_src

** types

- list start at zero
- supports float with *math* module
- no booleans, per se

** commands
- count $argv
- math
- argparse
  - -n --name
  - -N --min-args
  - -X --max-args
*** string

#+begin_src fish
  string replace -a "i" "I" "Wikipedia" # WIkIpedIa
#+end_src

*** set

#+begin_src fish
  set --function a $argv[1] # set in function scope
  set foo bar       # assignment, there is no =, works for array/scoping
  set wd  (pwd)     # command substitution, there is no ``
  set wd $(pwd)     # command substitution
  set A 3 4 29      # array, of 3 values
  set B $A[1 2]     # array slicing, first 2 elems
  set C $A[(seq 3)] # array slicing with command substitution
  set --erase A[$B] # array erasure of 3rd and 5th elems
#+end_src

* snippets

- [[https://github.com/EnclaveConsulting/Fish-Shell-argparse-Examples/][argparse examples]]

* tools

- tools https://github.com/pirate/fish-utils/blob/master/README.md
- bash to fish translation https://github.com/fish-shell/fish-shell/wiki/Shell-Translation-Dictionary
- plugin manager https://github.com/jorgebucaran/fisher
- +plugin manager https://github.com/oh-my-fish/oh-my-fish+ abandoned
- fish-lsp
  - error codes https://github.com/ndonfris/fish-lsp/wiki/Diagnostic-Error-Codes
