- GNU sed - the stream editor https://www.youtube.com/watch?v=Dd-x7kHCc44
* 13 | Understanding how sed works

- 1 https://www.youtube.com/watch?v=l0mKlIswojA
  - cmd | sed '' # acts like "cat"
  - address ranges with braces

- 2 https://www.youtube.com/watch?v=4vr8Aao0Mfo
  - <filename sed '' # alternative to piping
  - <filename >outfilename sed ''
  - "=" prints the current line numbers
  - "=;n" and "=;n;p"
  - pP, nN, dD

- 3 https://www.youtube.com/watch?v=P4ZcBrJ38I8
  - y///
  - I,r,w

- 4 https://www.youtube.com/watch?v=W95wrzAgdWk
  - l to list the current line unambigously for debugging
  - a,i,c
  - 5:00

* TODO Video: AoC 2021 Day 18 using Sed [Binary tree math]
https://www.youtube.com/watch?v=cbpNdzKLg4c

- Sed provides *conditional branches* in a single string register called the "holdspace"
  which is more than enough to make the sed language turing complete.
- Is a little bit nicer than programming in a turing machine, only a little.
  At least the way we are going to program it.
- They way you are supposed to solve this AOC problem is to read the list as a binary tree and write different tree walking routines.
- $ watch time sed -E -f x.sed sample1.txt
- TODO: 00:03:00
* DONE Course: Linux Administration with SED and AWK | Andrew Mallett
source https://github.com/theurbanpenguin/sed-and-awk
** 2 Introduction to Regular Expressions and Filtering Text

- $ grep -E '/(udp|tcp)' /etc/services
- Types of Regular expressions
  1) BRE - Basic Regular Expresions
  2) ERE - Enhanced Regular Expressions
- 05:00

** 3 SED - The (S)tream (Ed)itor

$ vim +/Server/ file.conf
$ vim +10 file.conf
$ alias cleanfile="sed -E '/^\s*(#|$)/d'"

"ESC+." add last command argument

** 4 Advanced Editing using sed

$ sed -f simple.sed

#+begin_src sed
  #!/bin/sed -Ef
  /ClientAliveInterval/ { # run blocks of code against this line
      s/^(ClientAliveInterval).*$/\1 60/ # if starts with key, ensure set to 60
      t count # if substitution worked goto label "count"
      s/.*/ClientAliveInterval 60/ # if it didn't start with key, then replace line with setting
      t count
  }

  :count
  /ClientAliveCountmax/ {
      s/^(ClientAliveCountMax).*$/\1 3/
      t del
      s/.*/ClientAliveCountMax 3/
      t del
  }

  :del
  /^($|#)/d
#+end_src
