#+TITLE: dc
#+DATE: <2025-01-11 sáb>

|--------+------------------------------------------------------------------|
|  <c>   |                                                                  |
| manual | https://wolfram.schneider.org/bsd/7thEdManVol2/dc/dc.html        |
| manual | https://www.gnu.org/software/bc/manual/dc-1.05/html_mono/dc.html |
| source | [[https://github.com/dspinellis/unix-history-repo/blob/Research-V7-Snapshot-Development/usr/src/cmd/dc/dc.c][/usr/src/cmd/dc/dc.c]]                                             |
|  wiki  | https://en.wikipedia.org/wiki/Dc_(computer_program)              |
|  wiki  | https://es.wikipedia.org/wiki/DC_(Unix)                          |
|--------+------------------------------------------------------------------|

- 1971
- Authors:
  - Robert H. Morris Sr.
  - Lorinda Cherry
- "Desk Calculator"
- a reverse-polish (RPN) calculator, with a stack based language
- up to 1M digits of decimal precision

* cli

#+begin_src sh
  dc [OPTIONS] [FILES]
#+end_src

|---------------------+----------------------------------|
|         <c>         |                                  |
|       -f FILE       | executes script file             |
|     --file=FILE     | "                                |
|      -e SCRIPT      | runs commands in script on input |
| --expression=SCRIPT | "                                |
|---------------------+----------------------------------|

#+begin_src sh
  DC_LINE_LENGTH=0   # disable line break
  DC_LINE_LENGTH=999 # < 2^16 -1
#+end_src

* language

#+begin_src sh
  $ dc script.dc
  $ dc -e '[Enter time: ]P?st' -e '[Distance: ]Plt2^0.5*9.8*p'
  $ echo '2 3 +' | dc
  $ echo '2 3'   | dc -f - -e 'f'
  $ echo '2 3'   | dc -e '? ? +'
#+end_src

- types
  - numbers
    - hex numbers must be upcased (A-F)
    - use _ for negative numbers
  - strings
    - can only be printed or execute them as macros
    - delimited by []
  - arrays

- registers (256)
  - valid names: a A 0 . " ...
    - one char length
    - you CAN use a register name that overlaps with a command
    - and it will stil work
  - each register has his own stack

** commands

#+CAPTION: T=take P=put
|---+-----+---+----------------------------------------------|
|   | <r> |   |                                              |
| T |     | P |                                              |
|---+-----+---+----------------------------------------------|
|   |   f |   | print full stack                             |
|   |   p |   | print top of stack, new line                 |
| 1 |   n |   | print top of stack, no \n                    |
| 1 |   P | 1 | print top of stack, no \n, as char if number |
|---+-----+---+----------------------------------------------|
| 2 |   + | 1 |                                              |
| 2 |   - | 1 | fst - snd                                    |
| 2 |   * | 1 |                                              |
| 2 |   / | 1 | fst / snd                                    |
| 2 |   % | 1 | remainder of /                               |
| 2 |   ~ | 2 | quotient and remainder of /                  |
| 2 |   ^ | 1 | fst ^ snd                                    |
| 3 |   ¦ | 1 | mod(fst, snd ^ trd)                          |
| 1 |   v | 1 | square root                                  |
|---+-----+---+----------------------------------------------|
| * |   c |   | clear stack                                  |
| 1 |   d |   | dup top of stack                             |
|   |   r |   | swap top 2 values                            |
|   |   R |   | rotates the top Nth items                    |
|---+-----+---+----------------------------------------------|
| 1 |  sR |   | stores in register R                         |
| 1 |  SR |   | stores in register R, nuke prev content on R |
|   |  lR | 1 | load from register R, 0 if empty             |
|   |  LR | 1 | " and pops it from register R                |
|---+-----+---+----------------------------------------------|
| 1 |   i |   | set input radix                              |
| 1 |   o |   | set output radix                             |
| 1 |   k |   | set decimal precision                        |
|   |   I | 1 | push input radix                             |
|   |   O | 1 | push output radix                            |
|   |   K | 1 | push decimal precision                       |
|---+-----+---+----------------------------------------------|
| 1 |   x |   | executes as a macro                          |
| 1 |   a | 1 | pop top, and push back 1st char/byte         |
| 2 |  >R |   | x R if >                                     |
| 2 | !>R |   | x R if <=                                    |
| 2 |  <R |   | x R if <                                     |
| 2 | !<R |   | x R if >=                                    |
| 2 |  =R |   | x R if =                                     |
| 2 | !=R |   | x R if !=                                    |
|   |   ? | 1 | ask user input, and execute it as a macro    |
|   |   q |   | exits 2 level macro                          |
| 1 |   Q |   | exits Nth level macro                        |
|---+-----+---+----------------------------------------------|
| 1 |   Z |   | number of decimal digits                     |
| 1 |   X |   | number of fraction digits                    |
|   |   z | 1 | number of element in stack                   |
|---+-----+---+----------------------------------------------|
|   |   ! |   | system command                               |
|   |   # |   | comment                                      |
| 2 |  :R |   | store *fst* in R =array=, at idx *snd*       |
| 1 |  ;r |   | get given =array= element in register        |
|---+-----+---+----------------------------------------------|
* snippets

- [[https://github.com/Alhadis/language-etc/blob/1455feb6de582239b67e8bbde8086569db377e3d/samples/dirsize.dc][Alhadis/language-etc/dirsize.dc]]
- [[https://github.com/brunk23/code-challenges/blob/7b7afc5088142102ce9610cbda7bac5cd9583829/trend.error][brunk23/code-challenges/trend.error]]
- [[https://github.com/brunk23/dc-programs][brunk23/dc-programs]]
- sum of first 36 integers
  #+begin_src
  36[d1-d1<F+]dsFxp
  #+end_src
- factorial
  #+begin_src
  [d1<g]Sf[d1-lfx*]Sg 13lfx
  #+end_src
- [[https://github.com/grondilu/bitcoin-bash-tools/][bitcoin-bash-tools]] ⭐
  - [[https://github.com/grondilu/bitcoin-bash-tools/blob/master/bitcoin.sh][bitcoin.sh]]
  - [[https://github.com/grondilu/bitcoin-bash-tools/blob/master/t/basics.t][basics.t]]

** sergiosgc/AdventOfCode2021

- day1 [[https://github.com/sergiosgc/AdventOfCode2021/blob/main/src/day01/one.dc][part 1]]
  #+begin_src
  [1Lc+sc]sC
  [rdSar>CLaz1<L]sL
  0sc0d=LLcp
  #+end_src
- day1 [[https://github.com/sergiosgc/AdventOfCode2021/blob/main/src/day01/two.dc][part 2]]
  #+begin_src
  [lCsDlBsClAsBsA]sr
  [1lR+sR]si
  [lBlClD++lAlBlC++<i0d=rz0!=l]sl
  0sA0sB0sC0sD0sR
  0d=r0d=r0d=r0d=r
  0d=l0dd=llRp
  #+end_src

** tckmn/polyaoc-2019

- [[https://github.com/tckmn/polyaoc-2019/blob/master/01/dc/01_1.dc][01_1.dc]]
  #+begin_src
    0[3/2-+?z2=a]sa6laxp
  #+end_src
- [[https://github.com/tckmn/polyaoc-2019/blob/master/01/dc/01_2.dc][01_2.dc]]
  #+begin_src
    0
    [lbxszlsx?z1<a]sa
        [3/2-dd8<b]sb
            [+z1<s]ss
    ?laxp
  #+end_src
- [[https://github.com/tckmn/polyaoc-2019/blob/master/02/dc/02_1.dc][02_1.dc]]
- [[https://github.com/tckmn/polyaoc-2019/blob/master/05/dc/05.dc][05.dc]]

* articles

- 24 [[https://bash-hackers.gabe565.com/howto/calculate-dc/][Calculating with dc - The Bash Hackers Wiki]]
- 21 [[https://psychocod3r.wordpress.com/2021/05/08/obfuscated-unix-scripting-with-dc/][Obfuscated Unix Scripting with dc]]
- 20 [[http://web.archive.org/web/20200607102626/https://ben165.github.io/unix_dc/index.html][A deeper introduction in Unix dc]]
- 18 [[https://eklitzke.org/summing-integer-ranges-with-dc][Summing Integer Ranges With dc]]
- ?? [[https://cs.unh.edu/~charpov/dc.html][Fun with dc]]

* videos

- 21 [[https://www.youtube.com/watch?v=WxCP8oHq_Ss][The Genius of the "dc" Desktop Calculator]]
- 23 [[https://www.youtube.com/watch?v=MDENRcTWDSY][Découvrons & Programmons "dc" (desk calculator) - 1971]]

* implementations

- Rust https://github.com/wfraser/dc4
- C https://git.gavinhoward.com/gavin/bc
- C (expanded) https://github.com/akjmicro/dclang
