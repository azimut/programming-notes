#+TITLE: dc
#+DATE: <2025-01-11 sáb>

- manual https://wolfram.schneider.org/bsd/7thEdManVol2/dc/dc.html
- manual https://www.gnu.org/software/bc/manual/dc-1.05/html_mono/dc.html
- wiki https://en.wikipedia.org/wiki/Dc_(computer_program)
- wiki https://es.wikipedia.org/wiki/DC_(Unix)
- alt Rust https://github.com/wfraser/dc4
- alt C https://git.gavinhoward.com/gavin/bc
- alt C derived https://github.com/akjmicro/dclang

- 1970
- Robert H. Morris Sr., Lorinda Cherry
- "desk calculator"
- a reverse-polish (RPN) calculator, with a stack based language
- up to 1M digits of decimal precision
- use _ for negative numbers

* cli

#+begin_src sh
  dc [OPTIONS] [FILES]
#+end_src

|---------------------+----------------------------------|
|         <c>         |                                  |
|       -f FILE       | executes script file             |
|     --file=FILE     | "                                |
|      -e SCRIPT      | runs commands in script on input |
| --expression=SCRIPT | "                                |
|---------------------+----------------------------------|

#+begin_src sh
  DC_LINE_LENGTH=0   # disable line break
  DC_LINE_LENGTH=999 # < 2^16 -1
#+end_src

* language

#+begin_src sh
  $ dc script.dc
  $ dc -e '[Enter time: ]P?st[Distance: ]Plt2^0.5*9.8*p'
  $ '2 3 +' | dc
#+end_src

- types:
  - numbers
  - strings
  - arrays

** commands
*** printing
|----+---+---------------------------------|
|  0 | f | print full stack                |
|  0 | p | print top of stack, new line    |
| -1 | n | print top of stack, no new line |
| -1 | P |                                 |
|----+---+---------------------------------|
*** arithmetic
|----+---+---+-----------------------------|
| -2 | + | 1 |                             |
| -2 | - | 1 | fst - snd                   |
| -2 | * | 1 |                             |
| -2 | / | 1 | fst / snd                   |
| -2 | % | 1 | remainder of /              |
| -2 | ~ | 2 | quotient and remainder of / |
| -2 | ^ | 1 | fst ^ snd                   |
| -3 | ¦ | 1 | mod(fst, snd ^ trd)         |
| -1 | v | 1 | square root                 |
|----+---+---+-----------------------------|
*** stack control
|---+---------------------------|
| c | clear stack               |
| d | dup top of stack          |
| r | swap top 2 values         |
| R | rotates the top Nth items |
|---+---------------------------|
*** registers
- valid names: a A 0 . " ...
- each register has his own stack
|----+----+----------------------------------------------|
| -1 | sR | stores in register R                         |
| -1 | SR | stores in register R, nuke prev content on R |
|  1 | lR | load from register R, 0 if empty             |
|  1 | LR | " and pops it from register R                |
|----+----+----------------------------------------------|
*** parameters
- hex numbers must be upcased (A-F)
|----+---+------------------------|
| -1 | i | set input radix        |
| -1 | o | set output radix       |
| -1 | k | set decimal precision  |
|  1 | I | push input radix       |
|  1 | O | push output radix      |
|  1 | K | push decimal precision |
|----+---+------------------------|
*** strings
- can only be printed or execute them as macros
- delimited by []
|----+-----+-------------------------------------------|
|    | <r> |                                           |
| -1 |   x | executes as a macro                       |
|  0 |   a | pop top, and push back 1st char/byte      |
| -2 |  >R | x R if >                                  |
| -2 | !>R | x R if <=                                 |
| -2 |  <R | x R if <                                  |
| -2 | !<R | x R if >=                                 |
| -2 |  =R | x R if =                                  |
| -2 | !=R | x R if !=                                 |
|  1 |   ? | ask user input, and execute it as a macro |
|  0 |   q | exits 2 level macro                       |
| -1 |   Q | exits Nth level macro                     |
|----+-----+-------------------------------------------|
*** status inquiry
|----+---+----------------------------|
| -1 | Z | number of decimal digits   |
| -1 | X | number of fraction digits  |
|  1 | z | number of element in stack |
|----+---+----------------------------|
*** misc
|----+----+-----------------------------------------|
|  0 | !  | system command                          |
|  0 | #  | comment                                 |
| -2 | :R | stores *fst* in R =array=, at idx *snd* |
| -1 | ;r | gets given =array= element in register  |
|----+----+-----------------------------------------|
* snippets
- branch to macro example https://github.com/Alhadis/language-etc/blob/1455feb6de582239b67e8bbde8086569db377e3d/samples/dirsize.dc#L4
- https://github.com/brunk23/code-challenges/blob/7b7afc5088142102ce9610cbda7bac5cd9583829/trend.error
- https://github.com/brunk23/dc-programs
** aoc 2019
- https://github.com/tckmn/polyaoc-2019/blob/master/01/dc/01_1.dc
  #+begin_src
    0[3/2-+?z2=a]sa6laxp
  #+end_src
- https://github.com/tckmn/polyaoc-2019/blob/master/01/dc/01_2.dc
  #+begin_src
    0
    [lbxszlsx?z1<a]sa
        [3/2-dd8<b]sb
            [+z1<s]ss
    ?
    laxp
  #+end_src
- https://github.com/tckmn/polyaoc-2019/blob/master/02/dc/02_1.dc
- https://github.com/tckmn/polyaoc-2019/blob/master/05/dc/05.dc
** example: factorial - using conditions and recursion
#+begin_src
[d1<g]Sf
[d1-lfx*]Sg

1 lf x p
1

3 lf x p
6
#+end_src

* articles
- 24 https://bash-hackers.gabe565.com/howto/calculate-dc/
- 20 http://web.archive.org/web/20200607102626/https://ben165.github.io/unix_dc/index.html
- 13 https://www.dayid.org/comp/dc.html
- 21 https://psychocod3r.wordpress.com/2021/05/08/obfuscated-unix-scripting-with-dc/
- 18 https://eklitzke.org/summing-integer-ranges-with-dc
- https://cs.unh.edu/~charpov/dc.html
- https://literateprograms.org/desk_calculator__python_.html
* videos
- 21 https://www.youtube.com/watch?v=WxCP8oHq_Ss
- 23 https://www.youtube.com/watch?v=MDENRcTWDSY
