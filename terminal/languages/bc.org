#+TITLE: bc
#+DATE: <2024-04-12 vie>

|------------+--------------------------------------------------------------------|
|    <c>     |                                                                    |
|  man gnu   | https://www.gnu.org/software/bc/manual/html_mono/bc.html           |
| man posix  | https://pubs.opengroup.org/onlinepubs/9699919799/utilities/bc.html |
| source (C) | https://github.com/fivepiece/gnu-bc/                               |
|    faq     | http://phodd.net/gnu-bc/bcfaq.html                                 |
|  tutorial  | https://org.coloradomesa.edu/~mapierce2/bc/                        |
|    wiki    | https://en.wikipedia.org/wiki/Bc_%28programming_language%29        |
|   online   | https://bc.js.org/                                                                   |
|------------+--------------------------------------------------------------------|

- 1975
- "Basic/Bench Calculator"
- started as a frontend for [[https://en.wikipedia.org/wiki/Dc_(computer_program)][dc]]
- Authors:
  - Robert H. Morris Sr.
  - Lorinda Cherry
    - bio https://ncwit.org/profile/lorinda-cherry/
    - story https://news.ycombinator.com/item?id=30354391
    - https://archive.md/20220216000803/https://minnie.tuhs.org/pipermail/tuhs/2022-February/025390.html

* cli

#+begin_src sh
  bc [OPTIONS] [FILES]
#+end_src

|----+-----------+------------------------------------------------|
| -q | --quiet   | suppreses welcome message                      |
| -l | --mathlib | enables trigonometric functions, sets scale=20 |
|----+-----------+------------------------------------------------|

* language

- Runs interactively (REPL) if you just run it bare "bc"
- default ~scale=0~, aka integer division
- in POSIX mode, functions and variables can only be 1 character long
- undefined variables return 0
- if/while/for
- "#" single line comment, "/**/" multi line comment
- "auto" for declare local variables

#+begin_src bash
  define foo(x) {
    auto pi=3.14
    print "this is 2 to the power of "; x*1; 2^x; pi*2;
    print "\n"
  }
#+end_src

** functions
|--------+-----+---------------------------------------------|
|  <c>   | <c> |                                             |
| length |  n  | length in digits of n, including decimals   |
|   s    |  n  | sine                                        |
|   c    |  n  | cosine                                      |
|   a    |  n  | arctangent                                  |
|   l    |  n  | natural logarithm                           |
|   e    |  n  | exponential of ~e~ to ~n~                   |
|   j    | n,m | Bessel function of integer order ~n~ of ~x~ |
| random |  -  | returns a random positive? integer          |
|  read  |  -  | reads value from stdin, returns value read  |
| print  |  s  | ala Python 2                                |
|--------+-----+---------------------------------------------|
** variables
|-------+--------------------------------|
|  <c>  |                                |
| last  | last numer output              |
| scale | number of decimals (default 0) |
| obase | "output base" (default 10)     |
| ibase | "input base"                   |
|-------+--------------------------------|
* articles

- 23 https://org.coloradomesa.edu/~mapierce2/bc/
- https://web.archive.org/web/20140112080500/http://mylinuxbook.com/linux-command-line-calculator-bc-examples/
- https://unixetc.co.uk/2014/01/19/bc-rounding-errors/
- https://www.johndcook.com/blog/2010/07/14/bc-math-library/
- https://www.johndcook.com/blog/2019/10/29/computing-pi-with-bc/
- http://www.physics.smu.edu/coan/linux/bc.html

* videos

- bc - geeksforgeeks https://www.youtube.com/watch?v=_UwhS0IvwQk
- Command Line Calculator - gotbletu https://www.youtube.com/watch?v=JkyodHenTuc
- Bc: Deep Dive Into The POSIX Calculator Language | Broodie Robertson https://www.youtube.com/watch?v=JascI_29sks
- Linux in the Shell Ep 25 - bc https://vimeo.com/101977655
- 23 video Is Python a souped up Basic Calculator?  https://www.youtube.com/watch?v=HcRMo0wGq44

* codebases

- math and bitcoin
  - https://github.com/fivepiece/btc-bash-ng/
  - https://github.com/fivepiece/btc-bash
- gcd, fibo https://literateprograms.org/category_programming_language_bc.html
- official examples https://github.com/fivepiece/gnu-bc/tree/master/Examples
- resources http://www.phodd.net/gnu-bc/
- functions https://github.com/mikepierce/GNU-bc-Functions
- functions https://web.archive.org/web/20160304092132/http://x-bc.sourceforge.net/extensions_bc.html
- functions https://github.com/idealvin/bc
- constants https://web.archive.org/web/20160304081309/http://x-bc.sourceforge.net/scientific_constants_bc.html

* snippets
** pi
#+begin_src sh
  scale=10
  4*a(1)
#+end_src
** solve

#+begin_src sh
$ solve "4*49+732"
$ cat /usr/local/bin/solve
  #!/bin/sh
  bc << EOF
  scale=4
  $@
  quit
  EOF
#+end_src

** sergiosgc/AdventOfCode2021
- day6 [[https://github.com/sergiosgc/AdventOfCode2021/blob/main/src/day06/one.bc][part 1]]
  #+begin_src bash
  for (; i>0; i-=1) {
      n = timer[0]
      for (t=0; t<8; t+=1) timer[t] = timer[t+1]
      timer[8] = n
      timer[6] += n
  }
  for (i=0; i<9; i+=1) result += timer[i]
  print result
  print "\n"
  #+end_src

* implementations
- alternative qalc
- https://github.com/gavinhoward/bc
