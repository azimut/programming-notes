#+TITLE: bc
#+DATE: <2024-04-12 vie>

|---------+------------------------------------|
|   <c>   |                <c>                 |
|  wiki   |     [[https://en.wikipedia.org/wiki/Bc_%28programming_language%29][english]] [[https://es.wikipedia.org/wiki/Bc_(lenguaje_de_programaci%C3%B3n)][spanish]] [[https://en.wikibooks.org/wiki/Guide_to_Unix/Explanations/bc][wikibooks]]      |
|   faq   | http://phodd.net/gnu-bc/bcfaq.html |
|   gnu   |           [[https://github.com/fivepiece/gnu-bc/][source]] [[https://www.gnu.org/software/bc/manual/html_mono/bc.html][manual]]            |
| howard  |               [[https://github.com/gavinhoward/bc][source]]               |
|  posix  |                [[https://pubs.opengroup.org/onlinepubs/9699919799/utilities/bc.html][man]]                 |
|   bsd   |             [[https://man.freebsd.org/cgi/man.cgi?query=bc&sektion=1][man]] [[https://cgit.freebsd.org/src/tree/contrib/bc][source]]             |
| busybox |               [[https://git.busybox.net/busybox/tree/miscutils/bc.c][source]]               |
| toybox  |               [[https://github.com/landley/toybox/blob/master/toys/pending/bc.c][source]]               |
| online  |         https://bc.js.org/         |
|---------+------------------------------------|

- 1975
- "Basic/Bench Calculator"
- started as a frontend for [[https://en.wikipedia.org/wiki/Dc_(computer_program)][dc]]
- Authors:
  - Robert H. Morris Sr. (43)
  - Lorinda Cherry (31)

* cli

#+begin_src sh
  bc [OPTIONS] [FILES]
#+end_src

- use ~BC_ENV_VARS~ env var to set cli arguments
- use ~BC_LINE_LENGTH~ env var set to 0(zero) to disable wrapping
- runs an interactively REPL if you just run it bare "bc"

|----+------------+------------------------------------------------|
| -q | --quiet    | suppreses welcome message                      |
| -l | --mathlib  | enables trigonometric functions, sets scale=20 |
| -s | --standard | forces use of POSIX bc language                |
| -w | --warn     | warn when using non-POSIX extensions           |
|----+------------+------------------------------------------------|

* language

#+begin_src sh
  #!/usr/bin/bc -lq
  #!/usr/bin/env -S bc -lq
  #!/usr/bin/env -S BC_LINE_LENGTH=0 bc -lq
  print "Hello\n" # might want that \n
  quit            # needs an explicit
#+end_src

- default ~scale=0~, aka integer division
- changing the value of ~scale~ low will accumulate rounding errors
- in POSIX mode, functions and variables can only be 1 character long
- "/**/" multi line comments
- accepts bases from 2 to 36
- 1 is true, 0 is false

** arrays

- index non-negative
- index start at 0(zero)
- no syntax sugar for creating
- no automatic length book-keeping (eg: stats is impossible)
- _cannot be return from a function_
- max length given at compile time by ~BC_DIM_MAX~ (eg: 2^24)
- no support for matrices
- on a different "namespace" than variables
  - pass by reference
    #+begin_src bash
      define fibonacci_next (*array[], n) {
          array[n] = array[n-1] + array[n-2]
          return array[n]
      }
    #+end_src
  - call by reference
    #+begin_src bash
      fibonacci_next(vec[])
    #+end_src

** functions

- can receive simple variables or arrays
- arguments passed by value by default

*** new

#+begin_src sh
  define foo (x) {
    auto pi=3.14 # "auto" declares pi a local variable
    print "this is 2 to the power of "; x*1; 2^x; pi*2;
    print "\n"   # ";" and/or \n to separate commands
  }
#+end_src

*** stdlib

|--------+-------+------------------------------------------------|
|  <c>   |  <c>  |                                                |
|   fn   |  arg  | description                                    |
|--------+-------+------------------------------------------------|
| length |   n   | significant digits, including decimals         |
| scale  |   n   | significant digits, only decimals              |
| random |   -   | returns a random positive? integer             |
|  read  |   -   | reads value from stdin, returns value read     |
| print  | s,... | needs "\n", no (), takes a variadic nr of args |
|  quit  |   -   |                                                |
|--------+-------+------------------------------------------------|
|  sqrt  |   n   | square root                                    |
|   s    |   n   | sine of angle n given in _radians_             |
|   c    |   n   | cosine of angle n given in _radians_           |
|   a    |   n   | arctangent of angle n given in _radians_       |
|   l    |   n   | natural logarithm                              |
|   e    |   n   | exponential of ~e~ to ~n~                      |
|   j    |  n,m  | Bessel function of integer order ~n~ of ~x~    |
|--------+-------+------------------------------------------------|

** variables

- type is infered, not declared
- undefined variables return 0
- lowercase (uppercase used for bases >10)

|-------+--------------------------------|
|  <c>  |                                |
| last  | last command output            |
|   .   | shorthand for "last"           |
| scale | number of decimals (default 0) |
| obase | "output base" (default 10)     |
| ibase | "input base"                   |
|-------+--------------------------------|

** control flow

- continue (works only with "for")
- break/halt/return
#+begin_src sh
  if (20 > 0) { print "bigger" }
  if (20 > 0) { print "bigger" } else { print "smaller" }
  for (i=1; i<42; ++i) {
      print i, " | ", fibonacci(i), "\n"
  }
  while (1) {
  }
#+end_src

* articles

- 23 [[https://org.coloradomesa.edu/~mapierce2/bc/][The GNU Basic Calculator (bc): a Quick-Start Guide for Mathematicians]]
- 21 [[https://www.computerhope.com/unix/ubc.htm][Linux bc command]]
- 21 [[https://leancrew.com/all-this/2021/02/some-bc-stuff/][Some bc stuff]]
- 19 [[https://www.johndcook.com/blog/2019/10/29/computing-pi-with-bc/][Computing pi with bc]]
- 14 [[https://unixetc.co.uk/2014/01/19/bc-rounding-errors/][bc Rounding Errors]]
- 14 [[https://www.johndcook.com/blog/2010/07/14/bc-math-library/][Three surprises with bc]]
- 10 [[https://www.pixelbeat.org/programming/oss_bug_flow.html][Open source bug work flow]]
- ?? [[http://www.physics.smu.edu/coan/linux/bc.html][6. (Very) Brief intro to bc]]
- ?? https://learnxinyminutes.com/bc/

* videos

- [[https://www.youtube.com/watch?v=_UwhS0IvwQk][bc - geeksforgeeks]]
- [[https://www.youtube.com/watch?v=JkyodHenTuc][Command Line Calculator - gotbletu]]
- [[https://www.youtube.com/watch?v=JascI_29sks][Bc: Deep Dive Into The POSIX Calculator Language | Broodie Robertson]]
- [[https://vimeo.com/101977655][Linux in the Shell Ep 25 - bc]]
- 23 [[https://www.youtube.com/watch?v=HcRMo0wGq44][video Is Python a souped up Basic Calculator?]]

* snippets

#+ATTR_ORG: :width 200
#+CAPTION: Robert H. Morris in 1988
[[./morris88.jpg]]

- needed to handle fractional exponents, uses e() and l()
  #+begin_src bash
    define pow (b,x) { return e(x*l(b)) }
  #+end_src

- getting the integer part of a number
  #+begin_src bash
    define int (x) {
        auto s;
        s=scale;
        scale=0; # temporarilly chaing the scale
        x/=1;
        scale=s; # restoring scale
        return x;
    }
  #+end_src

- radians <=> degrees conversions
  #+begin_src sh
    define radtodeg (x) { return x*(45/a(1)) }
    define degtorad (x) { return x*(a(1)/45) }
  #+end_src

- functions https://github.com/mikepierce/GNU-bc-Functions
- functions https://github.com/susca/bc-extensions
- functions https://github.com/idealvin/bc
- functions http://www.numbertheory.org/gnubc/bc_programs.html
- functions https://web.archive.org/web/20160304092132/http://x-bc.sourceforge.net/extensions_bc.html
- constants https://web.archive.org/web/20160304081309/http://x-bc.sourceforge.net/scientific_constants_bc.html

** pi

#+begin_src sh
  scale=10
  4*a(1)
#+end_src

** solve.sh

#+begin_src sh
$ solve.sh "4*49+732"
$ cat /usr/local/bin/solve
  #!/bin/sh
  bc << EOF
  scale=4
  $@
  quit
  EOF
#+end_src

* codebases

#+CAPTION: Lorinda Cherry in 1982
[[./bc_bell.png]]

- bitcoin https://github.com/fivepiece/btc-bash-ng/
- bitcoin https://github.com/fivepiece/btc-bash
- https://literateprograms.org/category_programming_language_bc.html
- https://github.com/fivepiece/gnu-bc/tree/master/Examples
- http://www.phodd.net/gnu-bc/
- https://rosettacode.org/wiki/Category:Bc

** sergiosgc/AdventOfCode2021
- day6 [[https://github.com/sergiosgc/AdventOfCode2021/blob/main/src/day06/one.bc][part 1]]
  #+begin_src bash
  for (; i>0; i-=1) {
      n = timer[0]
      for (t=0; t<8; t+=1) timer[t] = timer[t+1]
      timer[8] = n
      timer[6] += n
  }
  for (i=0; i<9; i+=1) result += timer[i]
  print result
  print "\n"
  #+end_src

