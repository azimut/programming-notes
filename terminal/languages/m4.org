#+TITLE: m4
#+DATE: <2025-01-04 sáb>
#+KEYWORDS: m4, programming, cheatsheet, quick reference

- home https://www.gnu.org/software/autoconf/
- docs https://www.gnu.org/software/m4/manual/m4.html
- manual 77 https://wolfram.schneider.org/bsd/7thEdManVol2/m4/m4.pdf
- manual 21 https://www.gnu.org/software/m4/manual/m4.pdf
- history https://www.gnu.org/software/m4/manual/html_node/History.html

- .m4 (where macros are defined)
- .mc (where macro expansion happens)
- wiki https://en.wikipedia.org/wiki/M4_(computer_language)
  - Authors: Brian Kernighan, Dennis Ritchie
  - 1977
  - based on M3(1972), and GPM (1965)
  - general purpose macro pre-processor
  - part of POSIX standard
  - used by sendmail (.mc -> .cf)
  - see man&info page
  - today mostly used by *autoconf* (part of autotools)
    - in configure.ac
    - Author: David Makenzie
    - 1991
  - based context-free grammar, automata, stacks, and output queues
    - aka the rules for rewritting
    - have terminal symbols & non-terminal symbols (m4 macros)

* cli

#+begin_src
  m4 [OPTION] [FILE]
#+end_src

- *rlwrap* compatible
- -dV - set debug mode to V for full debugging

* language

- turing complete
- no loops, only recursion
- `' makes non-terminal symbols terminal ones
  - removed on each macro pass
- macro names
  - recognized if appear surrounded by non-alphanumeric
  - are alphanumeric, including "_"
- we use different quoting for each side to _allow nesting_
  - without needing extra escaping

** variables

|-----------+------------------------------------|
|    <c>    |                                    |
|    $0     | macro name                         |
|    $1     | first argument                     |
|    $#     | number of arguments                |
|    $@     | all the arguments                  |
|    $*     | all the arguments, expands space   |
| shift($@) | all the argument, except the first |
|-----------+------------------------------------|

** build-in macros (24)

- leading blanks that occur during argument collection are discarded
- argument references ($1) expand immediately regarless of quoting
  - can be preventing by breaking it ($`'1)
- for each macro definition, m4 creates a stack of definitions

#+begin_src m4
  pushdef(`NAME', 20)
  popdef(`NAME')
  define(`NAME', 0) # = popdef + pushdef
  undefine(`NAME')
  dnl - disables rest of the line
  include(`foo.m4')
  changequote([,])dnl changes `' to []
  changequote dnl restores `'
#+end_src

*** Output Queues

#+begin_src m4
  divert(N)    #  switches the Output Queue, N ∈ [0,...]
  divert(-1)   # -1 (invalid queue), used to throw away output
  define(g,19) # discarded
  divert`'     # same as divert(0)
  undivert(1)  # pushes output queue 1 to output
#+end_src

*** Conditional

#+begin_src m4
  ifdef(`foo', b)      # b if foo is defined
  ifdef(`foo', b, c)   # b if foo is defined, c if not

  ifelse(a,b,c,d)      # compares a,b ... returns c if match, else d if not
  ifelse(a,b,c,d,e,f,g)# compares a,b ... returns c if match, else compares d,e
  ifelse(a,b,c,        # same as above
        ifelse(d,e,f,g))
#+end_src

*** String Manipulation

#+begin_src m4
  len(abdcde)              # returns 6
  substr(abcdef,2)         # returns "bcdef"
  substr(abcdef,3,3)       # returns "def"
  index(abcdef,c)          # returns 2
  index(abcdef,z)          # returns -1
  translit(leet,aeio,4310) # returns "l33t"
  translit(leet,aeio)      # returns "lt"
  regexp(abc88def,`[0-9]') # returns 3
  regexp(ab77,`[0-9]',`?')
  patsubst()               # find and replace
#+end_src

*** Integer Arithmetic

+ - ** / * %
<< >> ~ & ^ | (bitwise operators)
== != && ||

#+begin_src m4
  eval(1 + 1) #  2
  eval(-8>>1) # -4
  eval(~0)    # -1
  eval(6&5)   #  4
  eval(3^2)   #  1
  eval(1|2)   #  3
#+end_src

*** OS interaction

#+begin_src m4
  syscmd(find . -type f)         # runs without capturing/interpriting
  esyscmd(hostname | tr -d '\n') # captures/interprets output
  sysval                         # last command exit status
  maketemp
  makestemp
#+end_src

*** Debugging

#+begin_src m4
  dumpdef(`NAME')          # shows the definition of given macro
  dumpdef(`NAME',`upcase')
  debugmode(`V')           # V = full debug
  defn(`NAME')             # shows macro definition
  errprint(`msg')          # to stderr
#+end_src

* articles

- "I view it in the same light as Microsoft Excel: good at what it does, but too powerful for its own good. If your not careful, it will grow until you wish you had been using a proper programming language from the begging."

- TODO
  - https://news.ycombinator.com/item?id=17781062
  - https://news.ycombinator.com/item?id=22757645
  - https://news.ycombinator.com/item?id=27994092
  - https://news.ycombinator.com/item?id=34159699

- 21 https://www.root.cz/texty/generating-code-in-m4-introduction/
- ?? [[https://www2.gvsu.edu/miljours/m4critique.html][Critique of the M4 Macro Language]]
- 24 https://mastodon.social/@seindal/112205415790637632
- 22 https://emiruz.com/post/2022-12-28-composable-sql/
- 22 https://dev.to/taw/100-languages-speedrun-episode-45-m4-pgg
- 20 https://chrisman.github.io/9.html
- 19 http://web.archive.org/web/20190910195316/https://www.linuxtoday.com/blog/macro-magic-m4-complete-guide.html
- 19 https://www.linuxtoday.com/blog/macro-m4-guide/
- 15 [[https://modelingwithdata.org/arch/00000188.htm][m4 without the misery]]
- 12 [[https://queue.acm.org/detail.cfm?id=2349257][A Generation Lost in the Bazaar]]
- 09 https://gopherproxy.meulie.net/box.matto.nl/0/m4.txt
- 08 [[https://mbreen.com/m4.html][Notes on the M4 Macro Language]]
- 05 Macro Magic: m4 [[http://www.jpeek.com/articles/linuxmag/2005-02/][Part 1]] [[http://www.jpeek.com/articles/linuxmag/2005-03/][Part 2]]
- 99 http://www.linuxfocus.org/English/September1999/article111.html
- 94 [[https://www.cs.stir.ac.uk/~kjt/research/pdf/expl-m4.pdf][Exploiting the m4 language]]
- 94 https://www.nesssoftware.com/home/mwc/doc/coherent/manual/pdf/m4.pdf
  - from "COHERENT manual"
- 89 https://web.mit.edu/gnu/doc/html/m4_1.html

* videos

- 13 [[https://www.youtube.com/watch?v=ULZxHSPWn98][Bart Massey: The M4 Macro Processor]]
- 19 [[https://www.youtube.com/watch?v=-1w-vx6y4GU][Using Makefile and m4 macro preprocessor to bundle Javascript]]
  - pdf https://conference.libreoffice.org/assets/Conference/Almeria/HenryUsing-makefile-m4-to-bundle-javascript.pdf

** TODO 20 [[https://www.youtube.com/watch?v=yrurIUEGo1c][m4 - add macro power to boost any programming language]]

- Originally used a lot in ASM
- When to use?
  - Language that don't have macros
  - When functions are slow (eg: unrolling loops)
  - Repetitive code (eg: languages that don't have functions)
  - Painful language (eg: make a DSL)
- Usage at ATO (Australian Taxation Office)
  - ALIFE (1991)
  - Dynamic SQL
  - Testing code
- Pay attention to:
  - recursive expansion
  - quotes
  - no debugging (except for "dumpdef")

** 22 [[https://www.youtube.com/watch?v=euh0gaT3tA0][Using macros with the Suite8080 assembler]]

- source https://github.com/pamoroso/suite8080/tree/master/asm

#+begin_src sh
  $ cat ldabc.m4 | m4 | asm80 - -o ldabc.com
#+end_src

#+CAPTION: ldabcmac.m4
#+begin_src m4
  define(`ldabc',`
              lhld $1
              mpv  a, m
              lhld $2
              mov  b, m
              lhld $3
              mpv  c, m
  ')
#+end_src

#+CAPTION: ldabc.m4
#+begin_src asm
          include(`ldabcmac.m4')
          ldabc(data1, data2, data3)
  data1: db1
  data2: db 2
  data3: db 3
#+end_src

** 22 [[https://www.youtube.com/watch?v=Jhte76l2mP4][Can GNU m4 replace my need for react based framework]]

- macros to create html components
- inlines m4 macros inside regular html document

** TODO 23 [[https://www.youtube.com/watch?v=h164R46NWBMH][Hacking GNU Utilities - m4]] by tsoding

- TODO: 01:45:00
- m4 source code is 9k lines of C
- _Objective_: use raylib from m4
  - by hacking source m4 code
  - adding new commands

- 0:44:09 finished mvp hello world example
- 1:18:07 finished raylib hello world example
  - using ./configure
  - CFLAGS
  - LDFLAGS
  - LIBS

* codebases

- css preprocessor https://github.com/djanowski/hasp
- BASIC to C http://www.basic-converter.org/m4basic/
- z80 forth https://github.com/DW0RKiN/M4_FORTH
- https://github.com/nevali/m4

* snippets

#+begin_src m4
  dnl shift(@) removes an argument and splice it back
  dnl defines different behaviour depending on how many arguments is called
  define(`reverse', `ifelse(`$#',`0', ,`$#',`1',``$1'', `reverse(shift($@)), `$1'')')
  define(`upcase', `translit(`$*', `a-z', `A-Z')')
  define(`_capitalize`,
         `regexp(`$1', `^\(\w\)\(\w*\)',
                 `upcase(`\1')`'downcase(`\2')')',
                 `toSpace')
  define(`PlaylistItem',` upcase($1) ')
  PlaylistItem(`foo.hml')
#+end_src

- for loop (from mbreen.com)
  #+begin_src m4
    define(`for',
        `ifelse($#,0,
            ``$0'',
            `ifelse(eval($2<=$3),1,
                `pushdef(`$1',$2)$4`'popdef(`$1')$0(`$1',incr($2),$3,`$4')')')')
    for(`x',1,5,`x,') # 1,2,3,4,5...
  #+end_src

- for each loop (from mbreen.com)
  #+begin_src m4
    define(`foreach',
        `ifelse(eval($#>2),1,
               `pushdef(`$1',`$3')$2`'popdef(`$1')dnl
               `'ifelse(eval($#>3),1,`$0(`$1,`$2',shift(shift(shift($@))))')')')
    foreach(`X',`Open the X.',`door',`window') # Open the door. Open the window.
  #+end_src

- while loop (from mbreen.com)
  #+begin_src m4
    define(`while',
           `ifelse($#,0,``$0'',
                  eval($1+0), 1, `$2`'$0($@)')')
  #+end_src

* trivia
** the "xz backdoor"

- https://git.savannah.gnu.org/gitweb/?p=gnulib.git;a=blob;f=m4/build-to-host.m4
- https://felipec.wordpress.com/2024/04/04/xz-backdoor-and-autotools-insanity/
  #+begin_src m4
  AC_CONFIG_COMMANDS([build-to-host],
                     [eval $gl_config_gt | $SHELL 2>/dev/null],
                     [gl_config_gt="eval \$gl_[$1]_config"])
  #+end_src

- https://lwn.net/Articles/967205/
  - The exploit is in two parts.
    1) Two "test files" which contain the payload;
    2) and a modified =m4= script (m4/build-to-host.m4)
       which initiates the process of loading the payload.
