|------------+-----------------------------------|
| AWK Home   | https://www.awk.dev/              |
| AWK Source | https://github.com/onetrueawk/awk |
| wiki       | https://en.wikipedia.org/wiki/AWK |
| wiki       | https://en.wikibooks.org/wiki/AWK |
| web repl   | https://awk.js.org/               |
|------------+-----------------------------------|

- coverage
  https://benhoyt.com/writings/goawk-coverage/

- editor
   https://github.com/Beaglefoot/awk-language-server
  https://emacs-lsp.github.io/lsp-mode/page/lsp-awk/

- style https://github.com/soimort/translate-shell/wiki/AWK-Style-Guide
  - CamelCase, variables
  - lowercase, functions
  - 4 spaces or 4 #### for local variables in a function
  - case have a *default* branch
  - use "IF" and not "ELSE IF" if the previous branch uses a "RETURN"
  - use () before pipes |
- Manual https://www.gnu.org/software/gawk/manual/html_node/index.html
- Manual network features https://www.gnu.org/software/gawk/manual/gawkinet/html_node/index.html
- https://ketancmaheshwari.github.io/posts/2020/05/24/SMC18-Data-Challenge-4.html

- 2023
  - --csv, supports fields surrounded by double quotes

* language

- sometimes not enforcing variables to be local can cause weird issues.
  early return, should happen as soon as possible
  otherwise this function will keep looping...
  If I move the if/return0 to the top it works just fine
  OR
  if I make "middle" a local variable
  #+begin_src awk
    function binarySearch(target,    left, right) {
        middle = int((left+right)/2)
        print "l:", left, "r:", right, "m:", middle, "n[m]="numbers[middle]
        if (left >= right) {
            return 0
        }
        if (numbers[middle] > target) binarySearch(target, left, middle-1)
        if (numbers[middle] < target) binarySearch(target, middle+1, right)
        return numbers[middle] == target
    }
  #+end_src
- RS="^$" reads the whole file as a single record
- length($0) == 0 { print "this is an empty record==" }
  END { if (NR == 0) print "means that we didn't process any record" }
- || and && return booleans. AKA 0 or 1. They do NOT return the truthy value.
- Can redefine NF=0 at END and then add new $(++NF)=??? to later just *print*
- falsey: "", 0, undefined variables
#+begin_src awk
  { print "expression" > "filename" }
  { print "expression" | "command" }
  function add_tree (number) { # local variables can be declared here too, like &aux
      return number + 3
  }
  { print add_tree(36) }
#+end_src
- Unique at the time due
  - being a scripting language
  - having associative arrays
** Types (will be automaticaly coerced when needed)

1) Strings
2) Numbers
3) Arrays
   - 1D
   - for strings or numbers
   - no need to be declared
   - ALWAYS asssociative (aka hashtables)
   - for (variable in array)
   - delete array[subscript]

- Set the order an already created array would be presented on a forIn
  PROCINFO["sorted_in"] = "afunctionname" like compare(index1, value1, index2, value2) returns a boolean
  PROCINFO["sorted_in"] = "@val_num_asc"
  PROCINFO["sorted_in"] = "@val_num_desc"
  PROCINFO["sorted_in"] = "@val_str_asc"
  PROCINFO["sorted_in"] = "@val_str_desc"
  PROCINFO["sorted_in"] = "@ind_num_asc"
  PROCINFO["sorted_in"] = "@ind_num_desc"
  PROCINFO["sorted_in"] = "@ind_str_asc"
  PROCINFO["sorted_in"] = "@ind_str_desc"

** built-in variables

- FPAT https://www.gnu.org/software/gawk/manual/html_node/Splitting-By-Content.html
  For csv, FPAT = "([^,]+)|(\"[^\"]+\")"
  Instead of using FS to specify what the fields are *not*
  We use this to specify what are the fields, in the form of a regular expression.

|----------+----------------------------------------------+-----------|
|          | =meaning=                                    | =default= |
|----------+----------------------------------------------+-----------|
| FPAT     | regex of what each field contains            | -         |
|----------+----------------------------------------------+-----------|
| NF       | numer of fields in line                      | -         |
| NR       | number of records (aka lines) read so far    | -         |
| FNR      | number of records read so far, in curr file  | -         |
|----------+----------------------------------------------+-----------|
| FS       | *controls* the input field separator         | " "       |
| RS       | *controls* the input record separator        | "\n"      |
|----------+----------------------------------------------+-----------|
| OFS      | output field separator                       | " "       |
| ORS      | output record separator                      | "\n"      |
| OFMT     | output format for numbers                    | "%.6g"    |
|----------+----------------------------------------------+-----------|
| ARGC     | number of cli arguments                      | -         |
| ARGV     | array of cli arguents                        | -         |
|----------+----------------------------------------------+-----------|
| RLENGTH  | length of string matched by *match* function | -         |
| RSTART   | start of string matched by *match* function  | -         |
|----------+----------------------------------------------+-----------|
| FILENAME | name of current input file                   | -         |
| SUBSEP   | subscript separator                          | "\034"    |
|----------+----------------------------------------------+-----------|
** built-in functions
https://www.gnu.org/software/gawk/manual/html_node/Built_002din.html#Built_002din
*** BITWISE

https://www.gnu.org/software/gawk/manual/html_node/Bitwise-Functions.html

|--------------------+-------------------------------------|
| and(v1,v2,...)     |                                     |
| xor(v1,v2,...)     |                                     |
| or(v1,v2,...)      |                                     |
|--------------------+-------------------------------------|
| compl(val)         | complement                          |
|--------------------+-------------------------------------|
| lshift(val, count) | *val* left shifted by *count* bits  |
| rshift(val, count) | *val* right shifter by *count* bits |
|--------------------+-------------------------------------|

*** ARRAY

|-----------------+---------------------------+--------------------------------------------------|
|             <r> | returns                   | does                                             |
|-----------------+---------------------------+--------------------------------------------------|
|  asort(SRC,DST) | number of elements in SRC | sort by value, DST has idx=numeric val=old_value |
| asorti(SRC,DST) | number of elements in SRC | sort by index, DST has idx=numeric val=old_index |
|-----------------+---------------------------+--------------------------------------------------|

*** MATH
|------------+------------------------------------|
| atan2(y,x) | arctangent of y/x in -x to x range |
| cos(x)     | cosine of x, with x in radians     |
| sin(x)     | sine of x, with x in radians       |
| exp(x)     |                                    |
| log(x)     | ntural base e logarithm of x       |
| sqrt(x)    |                                    |
|------------+------------------------------------|
| int(x)     | integer part of x, truncated       |
|------------+------------------------------------|
| rand()     | random nuber r, 0 <= r < 1         |
| srand(x)   | x is new seed for rand()           |
|------------+------------------------------------|
*** STRING
|---------------------+---------------------------+------------------------------|
|                     | returns                   | does                         |
|---------------------+---------------------------+------------------------------|
| sub(r,s)            | number of subst made      | substitute one r for s in $0 |
| sub(r,s,t)          | number of subst made      | substitute one r for s in t  |
| gsub(r,s)           | number of subst made      | substitute all r for s in $0 |
| gsub(r,s,t)         | number of subst made      | substitute all r for s in t  |
|---------------------+---------------------------+------------------------------|
| substr(s,start)     | substring of s            |                              |
| substr(s,start,len) | substring of s            |                              |
|---------------------+---------------------------+------------------------------|
| split(s,a)          | number of fields          | stores the pieces in array a |
| split(s,a,fs)       | number of fields          | stores the pieces in array a |
|---------------------+---------------------------+------------------------------|
| length()            | number of chars in $0     |                              |
| length(s)           | number of chars in s      |                              |
|---------------------+---------------------------+------------------------------|
| index(s,t)          | 0 or n position of t in s |                              |
| match(s,r)          | index or 0                | test if s contains r         |
| sprintf(fmt, ...)   | formated string           |                              |
|---------------------+---------------------------+------------------------------|
*** operators
|---------------------+------------------|
| = += -= *= /= %= ^= | Assigments       |
| ?:                  | Ternary operator |
| in                  | Array membership |
| ~ !~                | Matching         |
|---------------------+------------------|
*** control flow

- exit
  - on a normal rule, still runs END, but not ENDFILE
  - on BEGIN        , still runs END
  - on END          , stops

|-----------------+------------------------------------|
| exit            | goes immediately to the END action |
| exit expression |                                    |
| next            | skips to the next line of input    |
|-----------------+------------------------------------|

*** output statement
|-----------------+---------------------------------------------|
| close(filename) | break connection between print and filename |
| close(command)  | break connection between print and command  |
| system(command) | execute command                             |
|-----------------+---------------------------------------------|
*** getline
|----------------------+-------------------------------------+---------------------|
| getline              | reads next input record             | NF, NR, FNR, RT, $0 |
| getline var          | reads n.i.r. into var               | NR, FNR, RT         |
| getline < file       | reads n.i.r. from file              | NF, RT, $0          |
| getline var < file   | reads n.i.r. from file into var     | -                   |
| "cmd" ¦  getline     | reads a single line of cmd into awk | NF, RT, $0          |
| "cmd" ¦  getline var | reads a single line of cmd into var | RT                  |
| "cmd" ¦& getline     | reads from a two-way pipe           | NF, RT, $0          |
| "cmd" ¦& getline var | reads from a two-way pipe into var  | RT                  |
|----------------------+-------------------------------------+---------------------|
** format strings
https://www.gnu.org/software/gawk/manual/html_node/Control-Letters.html
https://www.gnu.org/software/gawk/manual/html_node/Format-Modifiers.html

- %+-width.prec(?)

|--------+------------------------------|
| %a, %A | hexa float                   |
| %c     | numbers as character         |
| %d, %i | decimal integer              |
| %e, %E | scientific notation          |
| %f, %F | float                        |
| %g, %G | float or scientific notation |
| %o     | unsigned octal               |
| %s     | string                       |
| %u     | unsigned decimal integer     |
| %x, %X | unsigned hexadecimal integer |
| %%     | literal "%"                  |
|--------+------------------------------|

** extensions

- @include "join"

- @include "assert"
  assert(BOOLEAN, "Reason of failure HERE")

- @include "ord" OR @load "ordchr" https://www.gnu.org/software/gawk/manual/html_node/Extension-Sample-Ord.html
  ord(STRING) -> NUMBER
  chr(NUMBER) -> STRING


* codebases
|---------------------+----------------------------------------------|
| graphics demo       | https://github.com/patsie75/awk-demo         |
| system logs parsing | https://github.com/kaworu/hawk               |
| CHIP-8              | https://github.com/patsie75/awk-chip8        |
| game tetris         | https://github.com/mikkun/AWKTC              |
|---------------------+----------------------------------------------|
| exercises           | https://github.com/exercism/awk              |
| exercises           | https://github.com/kaworu/adventofcode-2015/ |
| exercises           | https://github.com/ferd/advent-of-code-2021/ |
| exercises           | https://github.com/phillbush/aoc             |
|---------------------+----------------------------------------------|


* snippets
- wEiRd - removes leading space
  #+begin_src awk
  $ awk '{ $1=$1 }1' file.txt
  $ awk '{ $1=$1 }; { print }' file.txt
  $ awk '/.*/ { $1=$1 }; /.*/ { print $0 }' file.txt
  #+end_src
