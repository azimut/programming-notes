- book https://learnbyexample.github.io/learn_gnused/
- book https://www.grymoire.com/Unix/Sed.html
- https://hackaday.com/2020/01/12/maze-solving-via-text-editing/
  https://gist.github.com/xsot/99a8a4304660916455ba2c2c774e623a
- https://www.pement.org/sed/sed1line.txt
- https://web.archive.org/web/20180602001217/http://www.folkstalk.com/2012/01/sed-command-in-unix-examples.html
- https://web.archive.org/web/20230322091010/https://www.grymoire.com/Unix/Sed.html
- https://tldp.porg/LDP/abs/html/x23170.html
- https://catonmat.net/proof-that-sed-is-turing-complete
- 21 article | https://jol.dev/blog/2021-11-16-n2-sed-challenge-join-cal-y-months-into-a-single-column.html
- article https://fideo.info/wiki.lua/blog/sed-circuit-simulator
  - https://news.ycombinator.com/item?id=30660203
- article https://github.com/adrianlarion/useful-sed
  - https://news.ycombinator.com/item?id=29196221
- code: bach prelude https://github.com/laserbat/bach.sed https://clyp.it/dqgahq1x
- code: tetris https://github.com/uuner/sedtris
- code: https://github.com/linguisticmind/search-in-subs
* TODO Video: AoC 2021 Day 18 using Sed [Binary tree math]
  https://www.youtube.com/watch?v=cbpNdzKLg4c
  - Sed provides *conditional branches* in a single string register called the "holdspace"
    which is more than enough to make the sed language turing complete.
  - Is a little bit nicer than programming in a turing machine, only a little.
    At least the way we are going to program it.
  - They way you are supposed to solve this AOC problem is to read the list as a binary tree and write different tree walking routines.
  - $ watch time sed -E -f x.sed sample1.txt
  - TODO: 00:03:00
* Course: Linux Administration with SED and AWK | Andrew Mallett
** 1
#+begin_src sh
#!/bin/sed -Ef
/ClientAliveInterval/ {
  s/^(ClientAliveInterval).*$/\1 60/
  t count
  s/.*/ClientAliveInterval 60/
  t count
}

:count
/clientAliveCountmax/ {
    s/^(ClientAliveInterval).*$/\1 60/
    t count
    s/.*/ClientAiveInterval 60/
    t count
}
#+end_src
** 2
- $ grep -E '/(udp|tcp)' /etc/services
- Types of Regular expressions
| BRE | Basic Regular Expresions     |
| ERE | Enhanced Regular Expressions |
* Book: sed & awk
** 4
- How sed works
  1) All editing commands in a script, are applied in order to each line of input.
  2) Commands are applied to all lines (globally),
     unless ~line addressing~ restricts the lines affected by editing commands
  3) The original input file is unchanged;
     the editing commands modify a copy of original input line and the copy is sent to STDOUT
* Snippets
** remove before (#)
  sed -i -n '/#/,$p' file.txt
** remove the last 10 lines of a file
  https://stackoverflow.com/questions/13380607/how-to-use-sed-to-remove-the-last-n-lines-of-a-file/13380679
  sed -i -n -e :a -e '1,10!{P;N;D;};N;ba' file.txt
** remove the first 10 lines of a file
  sed -e '1,10d' file.txt
