- source (C) https://git.savannah.gnu.org/gitweb/?p=sed.git
- home https://www.gnu.org/software/sed/
- manual https://www.gnu.org/software/sed/manual/sed.html
- wiki https://en.wikipedia.org/wiki/Sed
  - "Stream EDitor"
  - Author: Lee E. McMahon
  - 1974-
  - _line-oriented_ text processing utility
  - #!/bin/sed -f

- https://en.wikibooks.org/wiki/Sed

* language

- reads text, line by line, into a temporary *buffer* called ~pattern space~
- each line read starts a =cycle=
- there is a special buffer called ~hold space~ used by some commands
  to hold and accumulate text between /cycles/
- https://en.wikipedia.org/wiki/Leaning_toothpick_syndrome
  aka when a quoted expresion becomes unreadable
  because it contains a large number of escape characters

** Script
- a series of operations/actions
- the "body of a loop" that iterates through lines
- each line of a script is a pattern-action pair
  aka a conditional statement
** Operations
- of a command
- applied over the /pattern space/
- by default, after run, sed output the /pattern space/
- and begins the /cycle/ again with the next line
** Commands
- [address]command
  address { cmd1; cmd2; } # cannot have a space before ";"
- Might take an additional (1 or 2) =address=
- 25 commands
|     <r> |                                                                                      |
|---------+--------------------------------------------------------------------------------------|
|       q | quit                                                                                 |
|       d | delete the /pattern space/                                                           |
|       D | delete the first line from the /pattern space/, and run again                        |
|       n | next, explicitly goes to the next line (the default behaviour)                       |
|       N | pulls the next line into the /pattern space/, without deleting what is already there |
|       p | print the /pattern space/                                                            |
|       P | print the first line on the /pattern space/                                          |
|       = | prints the current line number plus a new line                                       |
|       y | /src/dst/ (tr)ansliterates src by dst                                                |
|       r | reads from provided filename                                                         |
|       w | writes to provided filename                                                          |
|       l | list the /pattern space/ unambigously, nice for debugging                            |
|---------+--------------------------------------------------------------------------------------|
| [line]a | appends, after current /pattern space/                                               |
| [line]i | inserts, before current /pattern space/                                              |
| [addr]c | change, replaces current /pattern space/ with given argument                         |
|---------+--------------------------------------------------------------------------------------|
|       s | /pattern/replacement/flags                                                           |
|         | uses address for pattern if missing                                                  |
|         | replacement can be (& pattern matched, \n n-match)                                   |
|         | [w FILE,g,p,I,NUMBER]                                                                |
|         | hk                                                                                   |
|---------+--------------------------------------------------------------------------------------|
** Addresses

- If
  - 0 address, command is applied to each line
  - 1 address, to the line matching
  - address is followed by a (!), inverse the address match

- Can be
  - 1,1 a comma separated tuple, command is applied from and upto including the matched line
    "You can think of the 1st address as enabling the action and the second address as disabling it."
  - /aregex/
  - NUMBER of line (not reset by different files)
  - $ represents the last line
  - {} to group different commands to the same OR different address
  - line addressing symbol

eg: "2d" aka apply delete to line 2
eg: "/Sebastopol/s/CA/California/g" performs the substituion ONLY on lines cointaining "Sebastopol"


** Flags
|----------------+---------------------------------|
| -e script      | inline script                   |
| -f script-file | path to script-file             |
| -n             | only output via the *p* command |
|----------------+---------------------------------|


* snippets
https://sed.sourceforge.io/#scripts
|--------------------+-------------------------------------------------------------------------------|
| $=                 | prints the number of lines (slow?)                                            |
| =;n                | interleaves printing the number of line every 2 numbers (1,3..) and each line |
| 2d                 | delete line 2                                                                 |
| /^ /d              | filters out lines starting with space                                         |
| /^ *$/d            | filters out lines containing only spaces                                      |
| s/.*/Hello/;q      | reads 1st line of input and prints "Hello"                                    |
| /needle/d          | deletes lines containing "needle"                                             |
| s/needle//g        | deletes "needle" from lines                                                   |
| 50,$d              | deletes from line 50 to the end                                               |
| 1,/^$/d            | deletes from 1st line to the first blank line                                 |
| /---/!s/--/\\(em/g | on all lines that do not have 3(-), replace 2(-)                              |
| s/.$//             | dos2unix, aka CRLF to LF                                                      |
|--------------------+-------------------------------------------------------------------------------|
#+TBLFM: $1=;n
** remove before (#)
  sed -i -n '/#/,$p' file.txt
** remove the last 10 lines of a file
  https://stackoverflow.com/questions/13380607/how-to-use-sed-to-remove-the-last-n-lines-of-a-file/13380679
  sed -i -n -e :a -e '1,10!{P;N;D;};N;ba' file.txt
** remove the first 10 lines of a file
  sed -e '1,10d' file.txt
* codebases
- bach prelude https://github.com/laserbat/bach.sed https://clyp.it/dqgahq1x
- tetris https://github.com/uuner/sedtris
- https://github.com/linguisticmind/search-in-subs
