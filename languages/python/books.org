* Book: 21 | Python Distilled
** TODO 7 Classes and Object-Oriented Programming
#+begin_src python
  class Account:
      '''
      OPTIONAL documentation string
      '''
      owner: string   # OPTIONAL: type hint
      balance: string # OPTIONAL: type hint
      def __init__(self, owner, balance):
          self.owner = owner
          self.balance = balance

      def __repr__(self):
          return f'Account({self.owner!r}, {self.balance!r)'

      def deposit(self, amount):
          self.balance += amount

      def withdraw(self, amount):
          self.balance -= amount

      def inquiry(self):
          return self.balance
#+end_src
- an essential feature of each object it is that usually has some kind of *state*
  as well as *methods* that operate on that state
- __init__ and __repr__ are known as special or =magic methods=
- have an associated *type*
  #+begin_src python
    type(a) # <class 'Account'>
    a = Account('Guido', 1000.0) # calls... Account.__init__(a, 'Guido', 1000.0)
    a.deposit(100.0)             # calls... Account.deposit(a, 100.0)
    a.deposit # <bound method Account.deposit of Account('Guido', 1100.0)>
    type(a).deposit  # <function Account.deposit 0x10a31f..>
  #+end_src
- if you are writing a lot of single-method classes, consider using functions instead
  (premature abstraction is often not a good thing)
  eg : by passing the make_record function
  #+begin_src python
    def parse_data(lines, make_record):
        records = []
        for line in lines:
            row = line.split(',')
            record = make_record(row)
            records.append(record)
        return records

    def make_dict(row):
        return {
            'name': row[0],
            'shares': int(row[1]),
            'price': float(row[2])
        }

    data = parse_data(open('portfolio.csv'), make_dict)
  #+end_src
- =dynamic binding= is the /runtime/ mechanism that Python uses to find the attributes of objects.
  - when you make a look up like ~obj.name~ it will work if it has the /name/ attribute
    this is referred as =duck typing=
  - this allows to use objects that /act like another/ without being related/inherit from them
- Inheriting from *build-in types* invites danger, as they aren't implemented in C. Instead use:
  - collections.UserDict
  - collections.UserList
  - collections.UserString
- if you prefix methods with 2(two) underscores (_)
  __name is automatically renamed into __Classname__name
  to ensure that private names used in superclass won't be overwritten by identical names in a child class
  not necessarily for hiding
- view ~multiple inheritance~ as a highly specialized tool for:
  - organization & code reuse
  - as opposed to a general purpose programming technique
  - eg: try NOT to take a collection of arbitrary unrelated classes and combine it together
*** Attributes
- You can view =instance variables= with ~vars()~
  #+begin_src python
    vars(a) # {'owner': 'Guido', 'balance': 1000.0}
  #+end_src
- You can del(ete) an attribute with "del a.balance"
  You can add a new attribute "a.nickname = 'leo'"
- getattr(OBJ,ANAME)
  setattr(OBJ,ANAME,10)
  delattr(OBJ,ANAME)
  hasattr(OBJ,ANAME)
  getattr(OBJ,FNAME)(100) # method call
  getattr(OBJ,ANAME,DEFAULT)
- There is no class-level =scope=, which differs from C++ or Java
- special methods
*** Inheritance
- a class will inherit from =object.object= if none is provided
- a subclass method can call the =super().originalmethod()= original method overwritten
- a subclass can add a attribute (less common)
  #+begin_src python
    class EvilAccount(Account):
        def __init__(self, owner, balance, factor):
            super().__init__(owner, balance)
            self.factor = factor
        def inquiry(self):
        if random.randint(0,4) == 1:
            return self.factor * super().inquiry()
        else:
            return super().inquiry()
  #+end_src
- replace __repr__ to use type specific string in case of inherit
  #+begin_src python
    def __repr__(self):
        return f'{type(self).__name__}({self.owner!r}, {self.balance!r})'
  #+end_src
- any child class will type-check as the parent class (with isinstance()
*** Composition
- a problem with inheritance is know as ~implementation inheritance~
  aka when you get extra functionality (methods) that are not needed for your class when inheriting
  eg: inheriting from "list" to implement a stack
- Example: stack with inheritance
  #+begin_src python
    class Stack(list):
        def push(self, item):
            self.appen(item)
  #+end_src
- Example: stack with an independent class
  #+begin_src python
    class Stack:
        def __init__(self):
            self._items = list()
        def push(self, item):
            self._items.append(item)
        def pop(self):
            return self._items.pop()
        def __len__(self):
            return len(self._items)
  #+end_src
- Example: you could accept the internal "list" class as an optional argument (aka ~dependency injection~)
  #+begin_src python
    def __init__(self, *, container=None):
        if container is None:
            container = list()
        self._items = container
  #+end_src
*** Python supports =class variables=. Not associated with the instance. Can be override at inherit.
  class.Account/num_account = 0
  class.Account/__init__/Account.num_account += 1
*** @classmethod  - Python supports =class methods= aka methods applied to the class itself not instances.
  The 1st argument is always the class itself.
  On the same ~namespace~ as instance methods. They can still be invoked on the instance.
  eg: alternate instance constructors, often prefix with "from_"
  #+begin_src python
    class Account:
        def __init__(self, owner, balance):
            self.owner = owner
            self.balance = balance
        @classmethod
        def from_xml(cls, data):
            from.xmletree.ElementTree import XML
            doc = XML(data)
            return cls(doc.findtext('owner'), float(dock.findtext('amount')))

     a = Account.from_xml(data)
  #+end_src
*** @staticmethod
**** Example 1: Using the class for the namespace
- You do NOT normally create instances of such a class.
- Instead, call the functions directly through the class.
- They do NOT take extra /self/ or /cls/ argument.
  An ordinary function defined inside the class namespace.
  #+begin_src python
    class Ops:
        @staticmethod
        def add(x, y):
            return x + y
        @staticmethod
        def sub(x, y):
            return x - y
  #+end_src
**** Example 2: implement /swappable/ or /configurable/ behavior
- To organize a bundle of methods, NOT to store additional instance data that's related to Account.
- Something tha loosely mimics the behavior of an import module.
- Instead of inherit and overwrite methods in Account/EvilAccount we can provide a Policy class
  #+begin_src python
    class StandardPolicy:
        @staticmethod
        def deposit(account, amount):
            account.balance += amount
        @staticmethod
        def withdraw(account, amount):
            account.balance -= amount
        @staticmethod
        def inquiry(account):
            return account.balance

    class EvilPolicy(StandardPolicy):
        @staticmethod
        def deposit(account, amount):
            account.balance += 0.95*amount
        @staticmethod
        def inquiry(account):
            if random.randint(0,4) == 1:
                return 1.10 * account.balance
            else:
                return account.balance

    class Account:
        def __init__(self, owner, balance, *, policy=StandardPolicy):
            self.owner = owner
            self.balance = balance
            self.policy = policy
        def deposit(self, amount):
            self.policy.deposit(self, amount)
        def withdraw(self, amount):
            self.policy.withdraw(self, amount)
        def inquiry(self):
            return self.policy.inquiry(self)
    #+end_src
- Usage
  #+begin_src
    >>> a = Account('Guido', 1000.0)

    >>> a.policy
    <class 'StandardPolicy>

    >>> a.deposit(500)
    >>> a.inquiry()
    1500.0

    >>> a.policy = EvilPolicy
    >>> a.deposit(500)
    >>> a.inquiry()
    1975.0
  #+end_src
**** Example 3: we can drop the @staticmethod for inheritance of policy
- a = Account('Guido', 1000.0, policy=EvilPolicy(0.95, 1.10))
#+begin_src python
  class EvilPolicy(StandardPolicy):
      def __init__(self, deposit_fact, inquiry_factor):
          self.deposit_factor = deposit_factor
          self.inquiry_factor = inquiry_factor
      def deposit(self, account, amount):
          account.balance += self.deposit_factor * amount
      def inquiry(self, account):
          if random.randint(0,4) == 1:
              return self.inquiry_factor * account.balance
          else:
              return account.balance
#+end_src
*** @property and =@???.setter= and =@???.deleter=
- a special kind of attribute that:
  1) intercepts attribute access
  2) handles access it via user-defined methods
- it's common to use properties for implementing read-only computed data attributes
  which is a /more uniform "inteface"/ than using a method (which would have empty parenthesis)
#+begin_src python
  import string
  class Account:
      def __init__(self, owner, balance):
          self.owner = owner  # using the .owner version !!!!!
          self._balance = balance
      @property
      def owner(self):
          return self._owner # using the ._owner version
      @owner.setter
      def owner(self, value):
          if not isinstance(value, str):
              raise TypeError('Expected str')
          if not all(a in string.ascii_uppercase for c in value):
              raise ValueError('Must be uppercase ASCII')
          if len(value) > 10:
              raise ValueError('Must be 10 characters or less')
          self._owner = value





#+end_src
*** programming ~interfaces~ in python (isinstance/NotImplementedError/TypeError)
- isinstance(obj, cls)
  issubclass(cls1, cls2)
- have other classes inherit from Stream, and implement the methods themselves
- without an specific constructor, just using class typing relations
  #+begin_src python
    class Stream:
        def receive(self):
            raise NotImplementedError()
        def send(self, msg):
            raise NotImplementedError()
        def close(self):
            raise NotImplementedError()

    def send_request(stream, request):
        if not isinstance(stream, Stream):
            raise TypeError('Expected a Stream')
        stream.send(request)
        return stream.receive
  #+end_src
*** programming ~interfaces~ in python ABC/@abstractmethod
- if you try to create an instance, you'll get an error
- will error if a subclass has missing methods, at instancing
- it can still define methods and properties for use in subclasses
  eg: super().receive() from a subclass
#+begin_src python
  from abc import ABC, abstractmethod
  class Stream(ABC):
    @abstractmethod
    def receive(self):
      pass
    @abstractmethod
    def send(self, msg):
      pass
    @abstractmethod
    def close(self):
      pass
#+end_src
* Book: 22 | The Python Workshop | Corey Wade
source https://github.com/PacktPublishing/The-Python-Workshop-Second-Edition/
** TODO 07 Becoming Pythonic
- PEP 0020 "The Zen of Python"
  https://peps.python.org/pep-0020/
- "There should be one - and preferably only one - obvious way to do it"
*** {} Set
  - Is an unordered collection
  - you can see what elements are in a set
  - you cannot index into a set
  - you cannot set or insert an object at a particular location
  - { x for x in .. }
*** {} Dictionary
  - a collection of pairs of objects, a key and the value
  - comprehension is often used to build an index
  - { key:value for key in ... }
*** defaultdict
  #+begin_src python
    from collections import defaultdict
    john = {'first_name': 'John', 'surname': 'Cleese'}
     # 1st: type constructor, aka any callable, eg: a lambda
     #      aka default_factory
     #      "str" would mean an empty string
     # 2nd: optional, or a dictionary
    safe_john = defaultdict(str, john)
  #+end_src
*** custom iterators
- supporting iterators in your classes opens them up for the use in
  - comprehensions
  - for...in loops
- ~class~ must implement a method called *__iter__()* which returns the =iterator=
- the =iterator= must provide a single method *__next__()*
  - returns the next value in the collection
  - when reaches the end, should raise ~StopIteration~
    python is not dogmatic about exceptions
**** Example: a class that controls access to its collection, using that collection iterator
  this effectively provides an """interface""" which you can change the implementation details (eg: sql backed)
  #+begin_src python
    class Interrogator:
        def __init__(self, questions):
            self.questions = questions
        def __iter__(self):
            return self.questions.__iter__()

    questions = ["foo?", "bar?"]
    awkward_person = Interrogator(questions)

    for question in awkward_persion:
        print(question)
  #+end_src
**** Example: a custom iterator - sieve of eratostenes
- by implementing an iterative algorithm as a python =iterator=,
  you can treat it like a ~collection~.
#+begin_src python
  class PrimesBelow:
    def __init__(self, bound):
        self.candidate_numbers = list(range(2,bound))
    def __iter__(self):
        return self
    def __next__(self):
      if len(self.candidate_numbers) == 0:
        raise StopIteration
      next_prime = self.candidate_numbers[0]
      self.candidate_numbers = [ x for x in self.candate_numbers if x % next_prime != 0]
      return next_prime

    primes_to_a_hundred = [ prime for prime in PrimesBelow(1000)]
    print(primes_to_a_hundred)
#+end_src

** 13 The Evolution of Python
- ME: See Language on python.org file
*** match/case
- specification https://peps.python.org/pep-0634/
- motivation https://peps.python.org/pep-0635/
- tutorial https://peps.python.org/pep-0636/
#+begin_src python
  match x:
      case {"warning": value}:
          print("warning passed with value:", value)
      case ["error", value] | ["err", value]:
          print("Error array passed with value", value)
      case _:
          print("something else....")
#+end_src
