- source (Zig) https://github.com/ziglang/zig
- home https://ziglang.org/
- wiki https://en.wikipedia.org/wiki/Zig_(programming_language)
  - 2016
  - Andrew Kelley
  - built-in testing framework
  - not included GC (has an option type)

- https://codeberg.org/ziglings/exercises
- https://github.com/rofrol/zig-companies
- action https://github.com/goto-bus-stop/setup-zig
- book https://cookbook.ziglang.cc/
- tutorial https://www.openmymind.net/learning_zig/
- tutorial https://gist.github.com/ityonemo/769532c2017ed9143f3571e5ac104e50

* language

- zig cc it’s a C compiler that has easy,
  out-of-the-box support for cross-compilation

- variable_names
  functionNames

- declarations with either =const= or =var=
- typed with a type signature or with =@as(TYPE,VAL)=
- variables do NOT get initialized by default
  - undefined is a valid zig value, you need to provide
- if - only evaluate boolean values
- $ zig test some.zig
- safety can be turn on/off (panic or undefined behaviour)
  @setRUntimeSafety(false);

- in =defer=, gets executed at the end of the scope,
  if there are multiple they run in a queue order (LIFO)

- =unreachable= is value that returns something of type "no return"

- pub fn(x: u32) u32 { return x + 5; }

- structs fields order is NOT guaranteed

- comptime
  - can used with
    * function calls
    * labeled blocks

- labeled blocks:
  const count = blk: {
      var sum: u32 = 0;
      break :blk sum;
  };

** imports

const std      = @import("std");
const parseInt = std.fmt.parseInt;
const expect   = @import("std").testing.expect;
const focus    = @import("../lib/focus.zig");

** pointers

- *Type
- &foo to reference a var/const to pointer
- foo.* to dereference pointer foo
- CANNOT assign 0(zero) or null to a pointer
- pointers to *const* are type checked to not be modified
- @sizeOf() ??????

** slices

- ~= pointer to date + element count
- []const u8
- array[0..]
- array[0..10] is not inclusive on the right

** enums

- enum{a,b}
- enum(u2){a,b}
- @enumToInt(E.a)
- enum static variables
- enum methods
  - const E = enum{a,b,pub fn f(self: E) bool { } }
  - it can be use as both as
    - instance method
    - static method

** structs

- can have instance method
- fields can have default values

** unions

- fiels with no type, imply *void*
- type defined like structs
- BUT can only hold 1 active field at the time
- can create a *tagged union* (aka union with a value) by using an union of an enum,
  keeping the same field names

** optionals (?)

- *?* means that it can be null or the given type
- *orelse* from optional to value
- *a orelse unreachable* can be shorten to *a.?*
- if(b)|v|{} can be used to check if *b* is null

** errors
|--------------------+---------------------------------------------------------|
| error{A}           | defines a new error class?, with possibility A          |
| ErrA ¦¦ ErrB       | defines a new error class?, union of other classes?     |
| errdefer           | runs side-effects, only on scope error                  |
| ErrA!u16           | (!) annotate the possibility of an specific error class |
| !u16               | (!) annotate the possibility of ANY error class         |
| f() catch ¦err¦ {} | catch if returned error                          |
| try                | shorthand for running and throw on error                |
|--------------------+---------------------------------------------------------|
** control flow

- if/switch can be used as an expression

- if () {}
- if () {} else {}
- switch (var) { // =exaustive, non-fallthrough=
    -1...1 => {}
    10, 20 => {}
    else   => {}
  }

** loops

- support continue/break
  - break can take an argument
  - else+break allows it to be used as ~expression~

- while(i < 10) {}
- while(i < 10) {} else
- while(i < 10) : (i += 1){} // =aka c-style for=
- for(aString) |aChar| {}
- for(aString, 0..) |aChar,index| {} # parallel loop

- labelled loops
  #+begin_src zig
    var count: usize = 0;
    outer: for ([_]{1,2,3,4,5,6,7,8}) |_| {
        for ([_]{1,2,3,4,5}) |_| {
            count += 1;
            continue :outer; // !! skips loop, like inner loop didn't existed
        }
    }
  #+end_src

** stdlib

#+begin_src zig
cons std = @import("std");
pub fn main() void {
  std.debug.print("Hello, {s}!\n", .{"World"});
}
#+end_src

#+begin_src zig
const expect = @import("std").testing.expect;

test "if statement" {
  const isTrue = true;
  var x: u16 = 0;
  if(isTrue) {
    x =+ 1;
  } else {
    x =+ 5;
  }
  try expect(x == 1);
}
#+end_src

** types
*** simple

- automatic integer *widening*
- float casting
  @as(DSTTYPE, VAR)
- int explicit *downcasting* with, will error if overflow:
  @intCast(DSTTYPE, SRCVAR);
- @intToFLoat(FLOATYPE, VAR)
  @floatToInt(INTYPE, VAR) // can throw?

|---------+---------------------------------------|
| i<SIZE> | 23 1_000                              |
| u<SIZE> | 23 1_000 0xff 0xFF 0o755 0b11010      |
| f<SIZE> | 123.0 123.0e+77 123.0E+77 0x103.70p-5 |
|---------+---------------------------------------|

- a +%= 1 - allows wrapping in case of overflow
    *%=
    -%=

*** complex
|--------+---------------+----------+------+------|
| array  | [2]u8{1,2}    | [2]u8    | .len | a[0] |
|        | [_]u8{1,2}    |          |      |      |
|--------+---------------+----------+------+------|
| slice  | arr[0..3]     | [2]u8    |      | a[0] |
|--------+---------------+----------+------+------|
| struct | Foo{.x = 10}  | struct{} |      | a.x  |
|--------+---------------+----------+------+------|
| union  | Foo{.int = 1} | union{}  |      |      |
|--------+---------------+----------+------+------|

* codebases
|-------------------+---------------------------------------------|
| wm / status bar   | https://github.com/nmeum/creek              |
| status bar        | https://github.com/arguablykomodo/zitrus    |
| status bar        | https://sr.ht/~andreafeletto/levee/         |
| appindicator+gtk  | https://github.com/CarpeNecopinum/TrayMagic |
| pulseaudio volume | https://github.com/arguablykomodo/minimixer |
| game engine       | https://github.com/hexops/mach              |
| editor            | https://github.com/drcode/zek               |
|-------------------+---------------------------------------------|
* libraries
- libs https://github.com/zigcc/awesome-zig
- libs https://github.com/zig-gamedev/zig-gamedev
- libs https://github.com/darkr4y/OffensiveZig
