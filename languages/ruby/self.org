- docs https://docs.ruby-lang.org/en/
- home https://www.ruby-lang.org/en/
- https://en.wikibooks.org/wiki/Ruby_Programming
- https://en.wikipedia.org/wiki/Ruby_on_Rails
- https://en.wikipedia.org/wiki/Ruby_(programming_language)
  - Author: Yukihiro Matsumoto (matz)
  - 1995-
  - Written in C
  - Author wanted an OO language.
    Didn't like Python, because it wasn't true OO.

- #!/usr/bin/env ruby

- implementations
  - mobile http://www.rubymotion.com/
  - java https://www.jruby.org
  - speed? https://github.com/oracle/truffleruby

* Language

- Typing: duck, dynamic, strong
- Everything is an object (including primitive data types)
  - not variables, they hold references to an object
    - use #dup when need a copy
    - use #freeze to not admit modifications (numbers and symbols are by default)
  - ergo, everything is a reference
- Optional () on function calls
- indentation isn't significant
- most lines that look like *statements* in Ruby are actually *expression* that return a value
- #tap
  - useful for debugging chain of method calls
  - takes a block, pass the receiver, and then return the orignal receiver of the method
  - a "no-op", execept that invokes a block

** testing

#+begin_src ruby
  require_relative "words_from_string"
  require "minitest/autorun"
  class TestWordsFromString < Minitest::Test
    def test_empty_string # methods starting with "test" automatically run
      assert_equal([], words_from_string(""))
      assert_equal([], words_from_string("   "))
    end
  end
#+end_src

** operators

- + works for sum /numbers/ and concatenate /strings/
- =~ to match a string against a regex, returns that starting position or nil
- %w[] to create array of strings
- %i[] to create array of strings
- <<
  - array << el
  - append to an array

** require

require "csv"
require_relative "book_in_stock" # for "./book_in_stock.rb"

private/public/protected def

** i/o

- p
  - calls #inspect
- pp
- puts
  - calls #to_s, to get its string representation
  - short for "outPUT String"
  - available to all objects
  - often written without parentheses

- $stderr
- ARGV array with command line arguments
  ARGF??? the content of all the files whose names are passed to the command line or stdin

** style

- guide https://github.com/airbnb/ruby
- guide https://github.com/rubocop/ruby-style-guide
- tool: linter/formatter https://github.com/standardrb/standard
- tool: linter/formatter https://github.com/rubocop/rubocop/

- 2 spaces for indentation
- book_in_stock.rb (file) / BookInStock (class)

- variable/parameters/methods
- @instance_var @X @_
- @@class_var @@N @@x_pos @@SINGLE
- $global $CUSTOMER $_ $plan9 $Global
- ClassName
- ModuleName
- CONSTANT_NAME

** changelog

https://rubyreferences.github.io/rubychanges/evolution.html

*** 1.0 - 1996

- 1.6   2000
- 1.8   2003-2013
- 1.9.3 2011
  - block local variables
  - additional lambda syntax (->(){})
  - additional hash literal syntax (colons after the symbol)
  - per string encoding
  - new socket api
  - require_relative

*** 2.0 - 2013

- 2.0
  - compatible with 1.9.3
  - method keyword arguments
  - new method "Module#prepend" to extend a class
  - new literal to create array of symbols
  - new api for lazy eval of Enumerables
  - new convention of using "#to_h" for object to hash conversion

*** 3.0 - 2020

- 3.0
  - "3x faster than 2"
  - introduces MJIT/YJIT
  - new concurrency utils: Fibre, Scheduler, Ractor
  - introduces RBS, for typed ruby
- 3.1   2021
- 3.2   2022
  - WASM compatible via WASI
- 3.3   2023
  - new parser: Prism
  - introduces RJIT

** control flow

- if/elsif/else/end
- unless/
- while/end
- =statement modifiers=
  #+begin_src ruby
    return nil if user.nil? # guards clause, usually at the beginning of a method

    puts "Danger" if radiation > 3000

    square = 4
    square = square * square while square < 1000
  #+end_src

** a =block= {} do/end
  - usage: to package code to implement a later callback
  - parameters to a block are ALWAYS local to that block
  - has access to variables outside his scope
  - =Iterator= or =Enumerator= a method that can invoke a block of code repeatedly
  - invoked in a method using ~yield~
    - parameters put after a ; are considered locals to that block (awk-ish) (RARE!)
      #+begin_src ruby
        square = "some shape"
        sum = 0
        [1,2,3,4].each do |value;square|
          square = value * value
          sum += square
        end
        puts sum
        puts square
      #+end_src
    - no argument
      #+begin_src ruby
        def call_block
          puts "Start of method"
          yield
          yield
          puts "End of method"
        end
        call_block { puts "In the block" }
      #+end_src
    - with arguments
      #+begin_src ruby
        def who_says_what
          yield("Dave", "hello")
          yield("Andy", "goodbye")
        end
        who_says_what { |person, phrase| puts "#{person} says #{phrase}" }
      #+end_src
  - is a chunk of code you can pass to a method, as it were another parameter
  - you can only pass one block per method call
    greet("dave", "loyal customer") { puts "hi" }

** types

- Ruby 2: diagram of classes
  http://jeromedalbert.com/a-diagram-of-the-ruby-core-object-model/
  https://farm6.staticflickr.com/5443/10075536704_84aa13676a_o.jpg

- Classes
  - attributes are just methods without arguments
  - the "only easy" way to change an object's state is by calling onf its methods
  - Methods
    - special
      - to_s
      - inspect
      - each
    - arguments, keyword args, *,**splats, &arguments
    - Types
      - public: by default (except initialize which is private) (RARE explicit)
      - protected: can be invoked by class or subclasses (RARE!) can be used on attr_reader/w/a
      - private: cannot be invoked without an explicit receiver
  #+NAME: from "Programming Ruby 3.3"
  #+begin_src ruby
    class BookInStock
      attr_accessor :price      # would create a attr_reader/attr_writer
      attr_reader :isbn #, :price   # creates the reader accessor methods #isbn and #price, for @isbn and @price
      def initialize(isbn, price) # called by BookInStock.new
        @isbn = isbn
        @price = Float(price)
      end
      # def price=(new_price) # setter
      #   @price = new_price
      # end
      def price_in_cents
        (price * 100).round # !!!! is valid to refer to it either as "price" or "@price"
      end
      def price_in_cents=(cents) # setter for a "virtual isntance variable", giving a "uniform access principle"
        @price = cents / 100.0
      end
    end
    book = BookInStock.new("isbn1", 33.80)
    book.price = book.price * 0.75 # using the setter and getter
  #+end_src

- Regexp // https://ruby-doc.org/3.2.2/Regexp.html
  - the =match operator= =~ can be used to match a string against it
    returns that starting position or nil
    - also through String#match? or Regex#match?
  - Regexp#sub
  - Regexp#gsub

- nil
  - is an object, just like any other
  - represents the concept of nothing

- Variables
  - nouns of Ruby

- Strings
  - "",'' are string literals, from more to less work done
    - "" checks for escape sequences (\) and expression interpolation (#{})
  - Both single and double quotes are used to create strings

- Symbols :foo
  - like lightweight strings
  - immutable
  - used
    - as keys and identifiers
    - when you need a string but you won't be printing it
    - when you need to use the same string over and over

- Constants
  - capitalized
  - proper nouns of Ruby

- Methods (.)
  - the verbs of ruby
  - attached at the end of variables with by a dot
  - some methods (such as =print=) are kernel methods, won't use the dot

- Class Methods (::)
  - attached after variables and constants by a double colon
  - created with NAME.new
  - has/can have
    - each instance has an ~object_id~ /property/
    - instance variables
    - instance methods
      - called by RECEIVER.METHODNAME
      - a *message* is being send to the object,
        which contains the method name along with arguments

- Enumerable (module) https://ruby-doc.org/3.2.2/Enumerable.html
  - aka a collection of object references
  - #dig: helps to dig through nested data structures
    - Returns if not found nil, doesn't raise an exception
    - From: data[:mcu][0][:actors][1]
      To:   data.dig(:mcu, 0, :actors, 1)
  - =Array= [] [0,2,nil][1] Array.new
    - #pop/#push      elements from the end
    - #shift/#unshift elements from the beginning
    - %w[] to create array of strings
    - %i[] to create array of strings
    - [FROM,LENGTH]
    - [FROM..END] [FROM...ENDNOTINC]
    - can growth by displacing elements with [?,?]= or [?..?]
    - [] is a method .[](0) is valid
    - #each #reverse_each (#with_index)
    - Linear list, accessed by index
    - mixed type of objects
    - #tally - counts frequency of elements into a hash
  - =Hash= {} {"foo" => "bar"}["foo"] { foo: "bar"}[:foo]
    - remembers order of insertion
    - supports "punning" for creation, if both are variable names in scope
      {firstname:, lastname:}
    - "=>" aka "hashrocket"
    - key/value
    - An association by an arbitrary key type
    - Hash.new(0) # where 0 is the default value
    - #sort_by - returns an array of arrays of 2 elements

- Numeric https://ruby-doc.org/3.0.7/Numeric.html
  - #positive?, #negative?, #nonzero?, #zero?
  - =Float= https://ruby-doc.org/3.0.7/Float.html
  - =Integer= https://ruby-doc.org/3.0.7/Integer.html
    - #times, #upto(N)

** stdlib

- new format https://ruby-doc.org/3.0.4/standard_library_rdoc.html#label-Default+gems
- old format https://ruby-doc.org/stdlib-3.0.4/


* codebases

- http://ratfactor.com/repos/
  - static site generator http://ratfactor.com/repos/reporat/
  - crawler http://ratfactor.com/repos/chklnks.rb/
  - http://ratfactor.com/repos/rubylit/
  - vim+bookmarks
    - http://ratfactor.com/repos/rat-tools/html/new-book.html
    - http://ratfactor.com/cards/interactive-vim

* snippets

#+begin_src ruby
  width, height = `xrandr`.scan(/current (\d+) x (\d+)/)
                    .flatten
                    .map(&:to_i)
#+end_src

#+NAME: split into words
#+begin_src ruby
  "FOO Bar Foo".downcase.scan(/[\w']+/)
#+end_src

* tools

- tool: ri (Ruby API reference frontend)
- tool: version managers
  - https://github.com/rbenv/rbenv
    - /.ruby-version
    - ~/.rbenv/versions/
    - commands
      - rbenv init
      - eval "$(rbenv init - zsh)"
      - rbenv install -l
      - rbenv install 3.3.0
      - rbenv versions
      - rbenv rehash
  - https://rvm.io/
  - https://github.com/postmodern/chruby

- tool https://github.com/JoshCheek/seeing_is_believing
  emacs https://github.com/jcinnamond/seeing-is-believing

