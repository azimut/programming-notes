#+TITLE: Ruby's reference
#+DATE: <2024-06-11 mar>

|------+-----------------------------------------------------------|
| docs | https://docs.ruby-lang.org/en/                            |
| home | https://www.ruby-lang.org/en/                             |
| wiki | https://en.wikipedia.org/wiki/Ruby_on_Rails               |
| wiki | https://en.wikipedia.org/wiki/Ruby_(programming_language) |
| wiki | https://en.wikibooks.org/wiki/Ruby_Programming            |
| impl | https://github.com/oracle/truffleruby                     |
| impl | https://www.jruby.org                                     |
| impl | http://www.rubymotion.com/                                |
|------+-----------------------------------------------------------|

- Author: Yukihiro Matsumoto (matz)
- 1995-
- Written in C
- Author wanted an OO language.
  Didn't like Python, because it wasn't true OO.

- #!/usr/bin/env ruby

- challenges
  - https://www.rubykoans.com/

* Language

- Typing: duck, dynamic, strong
- Everything is an object (including primitive data types)
  - not variables, they hold references to an object
    - use #dup when need a copy
    - use #freeze to not admit modifications (numbers and symbols are by default)
  - ergo, everything is a reference
- Optional () on function calls
- indentation isn't significant
- most lines that look like *statements* in Ruby are actually *expression* that return a value
- #tap
  - useful for debugging chain of method calls
  - takes a block, pass the receiver, and then return the orignal receiver of the method
  - a "no-op", execept that invokes a block
- restricted to pure 7-bit ascii for operators,
  for compatibility across all different source file encodings
- when we call a method without putting a receiver object before it
  it refers to the object named "self"
  aka "puts == self.puts"
- $? has the exit code of the last run command (like sh)

** testing

#+begin_src ruby
  require_relative "words_from_string"
  require "minitest/autorun"
  class TestWordsFromString < Minitest::Test
    def test_empty_string # methods starting with "test" automatically run
      assert_equal([], words_from_string(""))
      assert_equal([], words_from_string("   "))
    end
  end
#+end_src

** operators

- + works for sum /numbers/ and concatenate /strings/
- =~ to match a string against a regex, returns that starting position or nil
- %w[] to create array of strings
- %i[] to create array of strings
- <<
  - array << el
  - #append el to array

** require

#+begin_src ruby
  require "csv"
  require_relative "book_in_stock" # for "./book_in_stock.rb"
#+end_src

** i/o

- https://docs.ruby-lang.org/en/2.4.0/Open3.html
  - child process stdin/stdout/stderr and a thread for it
- https://ruby-doc.org/stdlib-2.6.3/libdoc/pathname/rdoc/Pathname.html
  - wrapper around File class, crossplatform
- popen - for r/w from/to a process
- system - if you don't care about the output just stdout
- p
  - calls #inspect
- pp
- puts
  - calls #to_s, to get its string representation
  - short for "outPUT String"
  - available to all objects
  - often written without parentheses
- $stderr
- ARGV array with command line arguments
  ARGF??? the content of all the files whose names are passed to the command line or stdin

** style

- guide https://github.com/airbnb/ruby
- guide https://github.com/rubocop/ruby-style-guide
- tool: linter/formatter https://github.com/standardrb/standard
- tool: linter/formatter https://github.com/rubocop/rubocop/

- 2 spaces for indentation
- book_in_stock.rb (file) / BookInStock (class)

- variable/parameters/methods
- @instance_var @X @_
- @@class_var @@N @@x_pos @@SINGLE
- $global $CUSTOMER $_ $plan9 $Global
- ClassName
- ModuleName
- CONSTANT_NAME

** changelog

https://rubyreferences.github.io/rubychanges/evolution.html

*** 1.0 - 1996

- 1.6   2000
- 1.8   2003-2013
- 1.9.3 2011
  - block local variables
  - additional lambda syntax (->(){})
  - additional hash literal syntax (colons after the symbol)
  - per string encoding
  - new socket api
  - require_relative

*** 2.0 - 2013

- 2.0
  - compatible with 1.9.3
  - method keyword arguments
  - new method "Module#prepend" to extend a class
  - new literal to create array of symbols
  - new api for lazy eval of Enumerables
  - new convention of using "#to_h" for object to hash conversion

*** 3.0 - 2020

- 3.0
  - "3x faster than 2"
  - introduces MJIT/YJIT
  - new concurrency utils: Fibre, Scheduler, Ractor
  - introduces RBS, for typed ruby
- 3.1   2021
- 3.2   2022
  - WASM compatible via WASI
- 3.3   2023
  - new parser: Prism
  - introduces RJIT

** control flow

- if/elsif/else/end
- unless/
- while/end
- =statement modifiers=
  #+begin_src ruby
    return nil if user.nil? # guards clause, usually at the beginning of a method

    puts "Danger" if radiation > 3000

    square = 4
    square = square * square while square < 1000
  #+end_src
- loop/end
  - infinite loop
  - break out of them
  - it will also auto-break if the *Enumerator* inside runs out of values
    #+begin_src ruby
      short_enum = [1,2,3].to_enum
      long_enum = ('a'..'z').to_enum
      loop do # loops 3 times
        puts "#{short_enum.next} - #{long_enum.next}"
      end
    #+end_src

** a =block= {} do/end

- blocks are closures
- is a chunk of code you can pass to a method, as it were another parameter

- assign a block to a variable, all of these return a =Proc= from the block
  #+begin_src ruby
    bo = ->(param) { puts "You called me with #{param}" } # stabby lambda, optional parens
    bo = lambda { |param| puts "You called me with #{param}" } # Kernel method "lambda", error on wrong nargs
    bo = proc { |param| puts "You called me with #{param}" } # Kernel method "proc", bubble ups "return"
    bo = Proc.new { |param| puts "You called me with #{param}" } # same but OLD style
    bo.call(99)
  #+end_src

- can be passed to a *method* either
  1) extra IMPLICIT last argument that's passed to a method
  2) (&) EXPLICIT last argument, to call store it and call it later (callbacks)
     #+begin_src ruby
       class ProcExample
         def pass_in_block(&action)
           @stored_proc = action
         end
         def use_proc(parameter)
           @stored_proc.call(parameter) # .call stored block
         end
       end
       eg = ProcExample.new
       eg.pass_in_block { |param| puts "The parameter is #{param}" }
       eg.use_proc(99)
     #+end_src

- parameters to a block are ALWAYS local to that block
- has access to variables outside his scope
- =Iterator= or =Enumerator= a method that can invoke a block of code repeatedly
- you can only pass one block per method call
  greet("dave", "loyal customer") { puts "hi" }
- invoked in a method using ~yield~
  - block parameters put after a ; are considered locals to that block (awk-ish) (RARE!)
    #+begin_src ruby
      square = "some shape"
      sum = 0
      [1,2,3,4].each do |value;square|
        square = value * value
        sum += square
      end
      puts sum
      puts square
    #+end_src
  - no argument
    #+begin_src ruby
      def call_block
        puts "Start of method"
        yield
        yield
        puts "End of method"
      end
      call_block { puts "In the block" }
    #+end_src
  - with arguments
    #+begin_src ruby
      def who_says_what
        yield("Dave", "hello")
        yield("Andy", "goodbye")
      end
      who_says_what { |person, phrase| puts "#{person} says #{phrase}" }
    #+end_src
  - for =transactions= (ME: using blocks for meta-programming stuff)
    #+begin_src ruby
      class File
        def self.open_and_process(*args) # class method
          f = File.open(*args)
          yield f
          f.close()
        end
      end

      File.open_and_process("testfile", "r") do |file|
        while line = file.gets
          puts line
        end
      end
    #+end_src

** Classes

#+NAME: from "Programming Ruby 3.3"
#+begin_src ruby
  class BookInStock
    attr_accessor :price      # would create a attr_reader/attr_writer
    attr_reader :isbn #, :price   # creates the reader accessor methods #isbn and #price, for @isbn and @price
    def initialize(isbn, price) # called by BookInStock.new
      @isbn = isbn
      @price = Float(price)
    end
    # def price=(new_price) # setter
    #   @price = new_price
    # end
    def price_in_cents
      (price * 100).round # !!!! is valid to refer to it either as "price" or "@price"
    end
    def price_in_cents=(cents) # setter for a "virtual isntance variable", giving a "uniform access principle"
      @price = cents / 100.0
    end
  end
  book = BookInStock.new("isbn1", 33.80)
  book.price = book.price * 0.75 # using the setter and getter
#+end_src

#+NAME: optionally take a block
#+begin_src ruby
  class File
    def self.my_open(*args) # CLASS METHOD, parameter list into array "args"
      file = File.new(*args) # spread array "args", into individual arguments
      return file unless block_given? # guard return if no block_given?
      result = yield file
      file.close
      result
    end
  end
#+end_src

- Classes
  - created with NAME.new
  - has/can have
    - each instance has an ~object_id~ /property/
    - instance variables
  - attributes are just methods without arguments
  - the "only easy" way to change an object's state is by calling onf its methods

** Methods (.)

- private/public/protected def
- can be redefining (just warns about it)
- the verbs of ruby
- attached at the end of variables with by a dot
- some methods (such as =print=) are kernel methods, won't use the dot
- parameters
  - =positional= foo
  - =keyword= rank: 10
    needs the keyword to be passed
  - =default= rank = 10
    with a possible computed default
    (ME: aka &optional)
- kinds
  - Class Methods (::)
    - attached after variables and constants by a double colon
  - instance methods (.)
    - called by RECEIVER.METHODNAME
    - a *message* is being send to the object,
      which contains the method name along with arguments
- special
  - to_s
  - inspect
  - each
- arguments, keyword args, *,**splats, &arguments
- Types
  - public: by default (except initialize which is private) (RARE explicit)
  - protected: can be invoked by class or subclasses (RARE!) can be used on attr_reader/w/a
  - private: cannot be invoked without an explicit receiver

** types

- Ruby 2: diagram of classes
  http://jeromedalbert.com/a-diagram-of-the-ruby-core-object-model/
  https://farm6.staticflickr.com/5443/10075536704_84aa13676a_o.jpg

- Variables
  - nouns of Ruby

- Constants
  - capitalized
  - proper nouns of Ruby

- nil
  - is an object, just like any other
  - represents the concept of nothing

- Numeric https://ruby-doc.org/3.0.7/Numeric.html
  - #positive?, #negative?, #nonzero?, #zero?
  - =Float= https://ruby-doc.org/3.0.7/Float.html
  - =Integer= https://ruby-doc.org/3.0.7/Integer.html
    - #times, #upto(N)

- Strings
  - "",%{},'',%q{} are string literals, from more to less work done
  - "",%{} checks for escape sequences (\) and expression interpolation (#{})
  - Both single and double quotes are used to create strings
  - #each_char returns an *Enumerator* if not given a block,
    you can call .each_with_index on it
  - alternatively #each_char.with_index

- Regexp // https://ruby-doc.org/3.2.2/Regexp.html
  - the =match operator= =~ can be used to match a string against it
    returns that starting position or nil
    - also through String#match? or Regex#match?
  - Regexp#sub
  - Regexp#gsub

- Symbols :foo
  - like lightweight strings
  - immutable
  - same named symbols have the same ~object_id~
  - used
    - as keys and identifiers
    - when you need a string but you won't be printing it
    - when you need to use the same string over and over

- Enumerator (class)
  - as objects they are =Enumerable=
  - implements *external iterators*, where you control the iteration behavior
  - Creating
    - what an iterator method returns if you don't pass it a block
    - #to_enum -> #next
    - #enum_for(:each_slice, 3) - in the case the method used for the enumerator takes params
    - Enumerator.produce - takes an initial value and a block
      #+begin_src ruby
        triangular_numbers = Enumerator.produce([1,2]) do |number,count|
          [number + count, count + 1]
        end
        5.times { print triangular_numbers.next.first, " " } # => 1 3 6 10 15
        p triangular_numbers.first(5).map { _.first } # => [1,3,6,10,15]
      #+end_src
    - Enumerator.new {|x| ...}
      #+begin_src ruby
        triangular_numbers = Enumerator.new do |yielder| # called when #next
          number = 0
          count = 1
          loop do
            number += count
            count += 1
            yielder.yield(number) # pausing point
          end
        end
        5.times { print triangular_numbers.next, " " } # 1 3 6 10 15
      #+end_src

- Enumerable (module/mixin) https://ruby-doc.org/3.2.2/Enumerable.html
  - #lazy => Enumerator::Lazy
    reimplements select/map/... to work with infinite sequences
    #+begin_src ruby
      class InfiniteStream
        def all
          Enumerator.produce(0) do |number|
            number += 1
          end.lazy
        end
      end
      p InfiniteStream.new.all.first(10)
      p InfiniteStream.new.select { (_1 % 3).zero? }.first(10)
      # Example:
      def palindrome(n)
        n = n.to_s
        n == n.reverse
      end
      p InfiniteStream.new
        .select { (_1 % 3).zero? }
        .select { palindrome?(_1) }
        .first(10)
      # Example: alternative syntax
      multiple_of_three = InfiniteStream.new.all.select { (_1 % 3).zero? }
      p multiple_of_three.first(10)
      m3_palindrome = multiple_of_three.select { palindrome?(_1) }
      p m3_palindrome.first(10)
      # Example: alternative syntax
      multiple_of_three = -> n { (n % 3).zero? }
      palindrome = -> n { n = n.to_s; n == n.reverse }
      p InfiniteStream.new.all
        .select(&multiple_of_three)
        .select(&palindrome)
        .first(10)
    #+end_src
  - aka a collection of object references
  - #reduce(0) { |sum,ele| sum + ele }
    #reduce { |sum,ele| sum + ele }
    #reduce(:+)
  - #dig: helps to dig through nested data structures
    - Returns if not found nil, doesn't raise an exception
    - From: data[:mcu][0][:actors][1]
      To:   data.dig(:mcu, 0, :actors, 1)
  - =Array= [] [0,2,nil][1] Array.new
    - #pop/#push      elements from the end
    - #shift/#unshift elements from the beginning
    - #compact        remove nil
    - #sample         get random element
    - %w[] to create array of strings
    - %i[] to create array of strings
    - [FROM,LENGTH]
    - [FROM..END] [FROM...ENDNOTINC]
    - can growth by displacing elements with [?,?]= or [?..?]
    - [] is a method .[](0) is valid
    - #each #reverse_each (#with_index)
    - Linear list, accessed by index
    - mixed type of objects
    - #tally - counts frequency of elements into a hash
  - =Hash= {} {"foo" => "bar"}["foo"] { foo: "bar"}[:foo]
    - remembers order of insertion
    - supports "punning" for creation, if both are variable names in scope
      {firstname:, lastname:}
    - "=>" aka "hashrocket"
    - key/value
    - An association by an arbitrary key type
    - Hash.new(0) # where 0 is the default value
    - #sort_by - returns an array of arrays of 2 elements

** stdlib

- new format https://ruby-doc.org/3.0.4/standard_library_rdoc.html#label-Default+gems
- old format https://ruby-doc.org/stdlib-3.0.4/
- rand(1..6)

** concurrency - threads

#+begin_src ruby
  (1..10).map do |i|
    Thread.new do
      `wget http://example.com/file_00#{i}`
    end
  end.each { |thread| thread.join }
#+end_src


* codebases

- http://ratfactor.com/repos/
  - static site generator http://ratfactor.com/repos/reporat/
  - crawler http://ratfactor.com/repos/chklnks.rb/
  - http://ratfactor.com/repos/rubylit/
  - vim+bookmarks
    - http://ratfactor.com/repos/rat-tools/html/new-book.html
    - http://ratfactor.com/cards/interactive-vim
- rails
  - +puma https://github.com/mastodon/mastodon
  - https://github.com/lobsters/lobsters
  - https://github.com/discourse/discourse

* snippets

#+begin_src ruby :exports both
  `xrandr`.scan(/current (\d+) x (\d+)/)
    .flatten
    .map(&:to_i)
#+end_src

#+RESULTS:
| 1600 | 900 |

#+NAME: split into words
#+begin_src ruby :exports both
  "FOO Bar Foo".downcase.scan(/[\w']+/)
#+end_src

#+RESULTS: split into words
| foo | bar | foo |

* tools

- tool: ri (Ruby API reference frontend)
- tool: version managers
  - https://github.com/rbenv/rbenv
    - /.ruby-version
    - ~/.rbenv/versions/
    - commands
      - rbenv init
      - eval "$(rbenv init - zsh)"
      - rbenv install -l
      - rbenv install 3.3.0
      - rbenv versions
      - rbenv rehash
  - https://rvm.io/
  - https://github.com/postmodern/chruby

- tool https://github.com/JoshCheek/seeing_is_believing
  emacs https://github.com/jcinnamond/seeing-is-believing
