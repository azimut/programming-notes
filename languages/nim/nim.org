- pre builds https://github.com/nim-lang/nightlies/
- https://nim-lang.org/docs/manual.html#types-tuples-and-object-types
- exercises https://github.com/sergiotapia/nimlings
* Language
** Types
|------------+-------------------+------------------------------------|
| array      | array[N,T]        | ["foo","bar"]                      |
| bitset     | bitset[T]         | {'a'..'b'}                         |
| channel    | Channel[T]        |                                    |
| enums      |                   |                                    |
| hashset    | HashSet[T]        | toSet([])                          |
| orderedset | OrderedSet[]      |                                    |
| object     |                   | Name(a: "foo")                     |
| ref object |                   | Name(a: "foo")                     |
| seq(uence) | seq[T]            | @[], newSeq[char](10)              |
| set        | set[T]            | {1,2,3}                            |
| tables     |                   | initTable[T,T]() toTable[T,T]({})  |
|            |                   | initCountTable[T] toCountTable({}) |
|            |                   | toOrderedTable({})                 |
| thread     | Thread[T]         | createThread(thread, fn, arg)      |
| tuple      | tuple[a: T, b: T] | (a: 1, b: 2)                       |
|------------+-------------------+------------------------------------|
** std(lib) modules
|----------------+-------------------------------------------------------|
| algorithms     | sort(SEQ_OR_ARR) sorted(SEQ_OR_ARR) reverse(?) fill() |
| asyncdispatch  | waitFor(), runForever(), await, {.async.}             |
| asyncfile      |                                                       |
| asynchtpserver |                                                       |
| asyncnet       |                                                       |
| hashes         | hash(?)                                               |
| json           |                                                       |
| macros         |                                                       |
| math           |                                                       |
| os             | sleep(N)                                              |
| parseutils     |                                                       |
| randomiz       | rand(N), randomize()                                  |
| re             |                                                       |
| sequtils       | filter(S)                                             |
| sets           |                                                       |
| strformat      |                                                       |
| strscans       | scanTuple(S)                                          |
| strutils       | parseInt(N), stdin.readLine, split({}), contains(S)   |
| sugar          | ->, =>                                                |
| system         | cmp[T]                                                |
| tables         |                                                       |
| threadpool     | joinThreads(), spawn(fn(arg)), sync()                 |
| unicode        |                                                       |
|----------------+-------------------------------------------------------|
** Operators
|---------+-------------------------------------------------------|
| $a      | returns string version of a                           |
| &       | string concatenation                                  |
| ..      | iterator?                                             |
| `/`     | returns a floating-point result                       |
| div     | returns a integer division result                     |
| %*      | json: used to create JSON objects                     |
| "" % [] | strutils: format string                               |
| fmt""   | strformat: interpolate raw string with {variable}     |
| &""     | strformat: interpolate non-raw string with {variable} |
| !$      | hashes: finalizes a hash, ensuring is not repeated    |
|---------+-------------------------------------------------------|
** pragmas
|--------------------+--------+--------------------------------------------------|
| {. noSideEffect .} | proc   | ensures that there are no side effects           |
| {. async .}        | proc   | makes the proc async                             |
| {. borrow .}       | proc   | bring proc from original type                    |
| {. thread .}       | proc   | marks it to be used for threads                  |
| {. base .}         | method |                                                  |
| {. pure .}         | enum   | requires all ambiguos references to be qualified |
|--------------------+--------+--------------------------------------------------|
* Codebases
- https://github.com/treeform/shady
- some random paint https://github.com/mrgaturus/npainter
- zoom for linux by tsoding https://github.com/tsoding/boomer
