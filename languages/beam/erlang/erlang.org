- https://github.com/Telichkin/otp_cheatsheet
- mailing list https://erlang.org/mailman/listinfo
- doc https://erlang.org/doc/reference_manual/users_guide.html
- doc https://www.erlang.org/doc/readme.html
- wiki https://en.wikipedia.org/wiki/Erlang_(programming_language)

- 1986- (opensourced in 1998)
  - @Ericsson
- Authors:
  - Joe Armstrong
  - Robert Virding
  - Mike Williams
- OTP (Open Telecom Platform)

* Language
https://www.erlang.org/doc/apps/parsetools/parsetools.pdf
** Types
- https://www.erlang.org/doc/reference_manual/typespec.html
- https://www.erlang.org/doc/reference_manual/data_types.html
- https://www.erlang.org/doc/reference_manual/records.html
- https://www.erlang.org/doc/reference_manual/expressions.html
- Supports type union with (|)
  atom() | integer()

- Type signtures
  #+begin_src erlang
    %% simple type signature
    -spec kind(card()) -> 'face' | 'number'.
    kind({_,A}) when A >= 1, A =< 10 -> number;
    kind({_,_})                      -> face.

    %% multiple type signatures for a same function
    -spec convert(tuple()) -> list();
                 (list())  -> tuple().
    convert(Tup) when is_tuple(Tup) -> tuple_to_list(Tup);
    convert(L = [_|_])              -> list_to_tuple(L).

    %% using a type defined elsewhere
    -spec match(ets:tab(), Key::any()) -> Entry::any().
  #+end_src

- Declaring new
  #+begin_src erlang
    -export_type([tree/0]). % !!!!

    %% opaque, only the module that defined the type can look inside it, other modules can't pattern match on its values
    -opaque tree() :: {'node', 'nil'}
                    | {'node', tree(), tree(), any(), any()}.

    -type tree() :: {'node', 'nil'}
                  | {'node', Left::tree(), Right::tree(), Key::any(), Value::any()}.
  #+end_src

- Destructuring can happen on the function parameter
  #+begin_src erlang
    f({athing,{A,B},N}=C) -> C
  #+end_src

*** Singleton Types

Their ~spec~ is equal to their ~creation~

|--------------|
|     <c>      |
| spec/create  |
|--------------|
|      42      |
| [], {}, <<>> |
| 'some atom'  |
|   'foobar'   |
|--------------|

*** Built-in Types
|--------------------------------+----------------------+------------------------------------------------------------------|
|                            <r> |         <c>          |                                                                  |
|                           spec |       examples       |                                                                  |
|--------------------------------+----------------------+------------------------------------------------------------------|
|                          any() |                      |                                                                  |
|                         none() |                      |                                                                  |
|                          pid() |   self()  spawn()    |                                                                  |
|                         port() |     open_port()      |                                                                  |
|                    reference() |      make_ref()      |                                                                  |
|--------------------------------+----------------------+------------------------------------------------------------------|
|                       binary() |      <<10,20>>       |                                                                  |
|                  <<_:Integer>> |                      | a binary of known length                                         |
|                <<_:_*Integer>> |                      | a binary with *unit size* but unspecified length                 |
| <<_:Integer,_:_*OtherInteger>> |                      | a binary that can have a minimum length                          |
|--------------------------------+----------------------+------------------------------------------------------------------|
|                      integer() | 23 1_337 2#101 16#1f |                                                                  |
|                          1..12 |          3           |                                                                  |
|              non_neg_integer() |          0           | integers >= 0                                                    |
|                  pos_integer() |          2           | integers >  0                                                    |
|                  neg_integer() |          -2          | integers <  0                                                    |
|                        float() |         3.14         |                                                                  |
|--------------------------------+----------------------+------------------------------------------------------------------|
|                          fun() |                      | any kind of function                                             |
|                fun(() -> Type) |                      | an anonymous function that takes no arguments, that returns Type |
|             fun((...) -> Type) |                      | an anonymous function of any arity, that returns Type            |
|     fun((TypeA,TypeB) -> Type) |                      | an anonymous function                                            |
|--------------------------------+----------------------+------------------------------------------------------------------|
|                         term() |                      | equivalent to any()                                              |
|                      boolean() |       'false'        | 'true' ¦ 'false'                                                 |
|                         byte() |          42          | 0..255                                                           |
|                         char() |       $A  $\n        | 0..16#10ffff                                                     |
|                       number() |       23  3.14       | integer() ¦ float()                                              |
|                       string() |        "foo"         | [char()]                                                         |
|             non_empty_string() |                      | [char(),...]                                                     |
|                    bitstring() |      <<"ABC">>       |                                                                  |
|                         atom() |      foo 'foo'       |                                                                  |
|                      nil or [] |          []          |                                                                  |
|                      timeout() |                      | non_neg_integer() ¦ 'infinity'                                   |
|                         node() |                      | erlang node name                                                 |
|                    no_return() |                      | equivalent to none(), things that loop forever                   |
|--------------------------------+----------------------+------------------------------------------------------------------|
*** Compound types
|--------------------------+-------------+----------------+-------------------------+--------------------------+---------|
|           <c>            |     <c>     |      <c>       |                         |                          |         |
|           type           |  creating   |   p.matching   | accessing               | updating                 | spec    |
|--------------------------+-------------+----------------+-------------------------+--------------------------+---------|
|       map #{TList}       |  #{a => 1}  | #{a := Value}  | maps:get(K,M)           | maps:update(K,V,M)       | map()   |
|                          |             |                |                         | M#{key => 1}             |         |
|                          |             |                |                         | M#{key := 1}             |         |
|--------------------------+-------------+----------------+-------------------------+--------------------------+---------|
|        list(Type)        |   [] [23]   |    [A,B¦C]     | lists:nth(N,L)          |                          | list()  |
|          [Type]          |             |                |                         |                          |         |
|        [Type,...]        |    [23]     |                |                         |                          |         |
|  improper_list(T,TEnd)   |             |                |                         |                          |         |
|  maybe_improper_list()   |             |                |                         |                          |         |
|  maybe_improper_list(T)  |             |                |                         |                          |         |
| maybe_improper_list(T,T) |             |                |                         |                          |         |
|--------------------------+-------------+----------------+-------------------------+--------------------------+---------|
|      tuple(TList?)       |    {a,1}    |     {A,B}      | erlang:element(K,T)     | erlang:setelement(K,V,T) | {T1,T2} |
|         tuple()          |             |                |                         |                          |         |
|--------------------------+-------------+----------------+-------------------------+--------------------------+---------|
|          record          | #name{a=23} | #name{a=Value} | Rec#r1.field            | Rec#name{field = 23}     | #name{} |
|                          |             |                | Rec#r1.field1#r2.field2 |                          |         |
|--------------------------+-------------+----------------+-------------------------+--------------------------+---------|
- List ops
  | [1,2] ++ [1] | append lists | [1,2,1] |
  | [1,2] -- [1] | remove       | [2]     |
** Standard Library (by Elixir)
- https://elixir-lang.org/getting-started/erlang-libraries.html
  - binary
  - io/io_lib
  - crypto
  - digraph
  - ets/dets
  - math
  - queue
  - rand
  - zip/zlib
** Standard Library (Data Structures)
https://www.erlang.org/faq/libraries.html
- Linked lists are a fundamental part of Erlang, as are tuples. The other standard data structures are:
|----------+------------------------------------------------------------------|
| =module= | =description=                                                    |
|----------+------------------------------------------------------------------|
| ets      | hash tables and ordered sets (trees), stored outside the process |
| dets     | on-disk hash tables                                              |
| dict     | maps, also called associative arrays                             |
| gb_sets  | sets, but based on a general balanced data structure             |
| gb_tree  | a general balanced tree                                          |
| queue    | double-ended queues                                              |
| sets     | sets, i.e. a collection of unique elements.                      |
|----------+------------------------------------------------------------------|
** Standard Library (things on the lib/ directory)

https://erlang.org/doc/apps/stdlib/index.html

asn1
compiler
crypto
diameter
erl_docgen
erl_interface
erts
jinterface
kernel
mnesia
os_mon
public_key
reltool
runtime_tools
sasl
stdlib
syntax_tools
tools
wx
*** Developer Tool
|-------------+------------------|
| [[https://www.erlang.org/doc/common_test.html][common_test]] | coverage testing |
| [[https://www.erlang.org/doc/eunit.html][eunit]]       | unit testing     |
| [[https://www.erlang.org/doc/debugger.html][debugger]]    |                  |
| [[https://www.erlang.org/doc/dialyzer.html][dialyzer]]    |                  |
| [[https://www.erlang.org/doc/edoc.html][edoc]]        |                  |
| [[https://www.erlang.org/doc/et.html][et]]          | event trace      |
| [[https://www.erlang.org/doc/observer.html][observer]]    |                  |
|-------------+------------------|
*** File Formats
|------------+-----------|
| [[https://www.erlang.org/doc/parsetools.html][parsetools]] | leex+yecc |
| [[https://www.erlang.org/doc/xmerl.html][xmerl]]      |           |
|------------+-----------|
*** Protocols
|--------+---------------------------------------------|
| [[https://www.erlang.org/doc/eldap.html][eldap]]  |                                             |
| [[https://www.erlang.org/doc/ftp.html][ftp]]    |                                             |
| [[https://www.erlang.org/doc/inets.html][inets]]  |                                             |
| [[https://www.erlang.org/doc/megaco.html][megaco]] | h.248 / multimedia gateway controller (MGC) |
| [[https://www.erlang.org/doc/snmp.html][snmp]]   |                                             |
| [[https://www.erlang.org/doc/ssh.html][ssh]]    |                                             |
| [[https://www.erlang.org/doc/ssl.html][ssl]]    |                                             |
| [[https://www.erlang.org/doc/tftp.html][tftp]]   | trivial ftp protocol                        |
|--------+---------------------------------------------|
** io:format
|----+-----------------------------------------------|
| ~~ | literal ~                                     |
| ~c | ASCII character code                          |
| ~f | scientific notation                           |
| ~g | float for small numbers, scientific for large |
| ~s | string                                        |
| ~w | standard Erlang syntax                        |
| ~p | pretty-printed Erlang syntax                  |
| ~W | same as ~w, but takes maximum depth argument  |
| ~P | same as ~p, but takes maximum depth argument  |
| ~B | formats integer to given base                 |
| ~X | like ~B, but takes a prefix argument          |
| ~# | like ~B, but uses #-separated Erlang prefix   |
| ~b | like ~B, but prints lowercase                 |
| ~x | like ~X, but prints lowercase                 |
| ~+ | like ~#, but prints lowercase                 |
| ~n | newline                                       |
| ~i | ignores next term                             |
|----+-----------------------------------------------|
* CodeBases
- examples https://rosettacode.org/wiki/Category:Erlang
- Chat Bot by Tsoding https://github.com/tsoding/tsoder
- Fly.io App
  - https://github.com/baden/flyio-erlang
  - https://github.com/srijan/phfly
- Gradual type checker https://github.com/josefs/Gradualizer
- Example: https://github.com/adoptingerlang/service_discovery
- DNS authoritative server https://github.com/dnsimple/erldns
