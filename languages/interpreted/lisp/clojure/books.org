* 16 | Etudes for Clojurescript
*** 1
- (in 'formulas.core)
- (require 'formulas.core :reload)
- (.pow js/Math NUMBER POWER)
  (js/Math.pow NUMBER POWER)
* 16 | Clojure In Action
- Type of Polymorphism
  - https://en.wikipedia.org/wiki/Parametric_polymorphism
  - https://en.wikipedia.org/wiki/Ad_hoc_polymorphism
  - https://en.wikipedia.org/wiki/Subtyping
  - https://en.wikipedia.org/wiki/Structural_type_system
** 4 Multimethod Polymorphism
*** Polymorphism and his types
- "In a certain sense polymorphism provides the ability to create your own abstractions."
- Common Types of Polymorphism
  1) Parametric: clojure's collections or map, reduce, get, conj...
     1(one) behaviour
     with type variables instantiated to particular types when needed
     sometimes calles *generic functions* and *generic datatypes*
  2) Ad Hoc
     many behaviours, one for each type

          aka *function overloading* or *operator overloading*
     NOT a fundamental feature of type systems
  3) Subtype
- In Clojure, if you want to create your own PP function, you need to look for other kinds of polymorphism.
  Polymorphism is often a matter of perspective.
- Example: Ad-hoc Polymorphic function, _closed dispatch_
  #+begin_src clojure
    (defn ad-hoc-type-name [thing]
      (condp = (type thing);; throws exception on unmatched
        java.lang.String             "string"
        clojure.langPersistentVector "vector"))
  #+end_src
- Example: Ad-hoc Polymorphic function, _open dispatch_
  #+begin_src clojure
    (def type-namer-implementation
      {java.lang.String              (fn [thing] "string")
       clojure.lang.PersistentVector (fn [thing] "vector")})
    (defn open-ad-hoc-type-namer [thing]
      (let [dispatch-value (type thing)]
        (if-let [implementation
                 (get type-namer-implementations dispatch-value)]
          (implementation thing)
          (throw (IllegalArgumentException
                  (str "No implementation found for " dispatch-value))))))
  #+end_src
- Subtype Polymorphism
  - When the types (not functions) are polymorphic
  - Expressed in OO, as class or interface hierarchies
  - A form of SP is called _structural subtyping_
    (me) https://youtu.be/MbZoQlmQaWQ?t=452
    Exists in TS, Go, OCaml
    It doesn't care abou the types but the structure and constraints of the types
*** Polymorphism using multimethods
*** Summary
* 17 | Reactive with ClojureScript Recipies
** 2 - ClojureScript
*** Elements
|---------------+-------------------------+-------------------------------|
|               | Javascript              | Clojure                       |
|---------------+-------------------------+-------------------------------|
| new*          | document.createElement  |                               |
|               | document.createTextNode |                               |
|               | node.cloneNode          |                               |
|---------------+-------------------------+-------------------------------|
| remove        |                         | (.removeChild parent child)   |
|---------------+-------------------------+-------------------------------|
| attach        | node.appendChild        |                               |
|               | node.insertBefore       |                               |
|               | node.replaceChild       |                               |
|---------------+-------------------------+-------------------------------|
| get           | getElementById          | (.getElementById js/document) |
|               | getElementsByTagName    |                               |
|               | getElementsByClassName  |                               |
|---------------+-------------------------+-------------------------------|
| get attribute |                         | (aget) (.-)                   |
| set attribute |                         | (aset)                        |
|---------------+-------------------------+-------------------------------|
- new nodes still need to get attached to the DOM tree on a separate step
- *innerHTML* is a property on all nodes that take a string of the childrens
*** Events
- Input events: blur, change, focus, submit reset, keypress
- Mouse events: click, dbclick, mousedown, mousemove, mouseover
- (.addEventListener element eventtype function boolean)
*** Window Object
- "Link" between the DOM and JS.
  - Each tab, each frame has a Window Object
  - alert, confirm, prompt, setTimeout, setInterval uses it
  - access it with *js/window*
- (.addEventListener
   (.getElementById js/document "neko.gif")
   "mouseover"
   #(.alert js/window "mouse detected")
   false)
* 22 | Web development with Clojure - 2nd Edition
** Introduction
- Focus on the *Luminous* stack
** 1 Getting your feet wet
- myapp/src/myapp/core.clj
  (require myapp.core) Namespace declaration, matches folder structure
- myapp/project.clj
  in (defproject) we can set the *entry point* with :main, :main myapp.core/foo, unset by default
  you can run it with:
  #+begin_src
  > lein run SomeArgument
  SomeArgument Hello, World!
  #+end_src
- add/use luminus template for a quick webapp template
  > lein new luminus guestbook --template-version 3.91 -- +h2 +http-kit
- hardcode a version by adding in ~/.lein/profiles.clj
  {:user {:plugins [[luminus/lein-template "2.9.9.2"]]}}
- Default repl namespace is *user* from *env/dev/clj/user.clj*
  - Include functions that we won't want packaged in our application
  - start/stop functions
*** resources/migration/*
- Delete template migrations, and create a new one (after (start))
  rm -f resources/migration/*
- (create-migration "guestbook")
- Write the new empty .sql files
    #+begin_src sql
CREATE TABLE guestbook
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(30),
message VARCHAR(200),
timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
  #+end_src
    #+begin_src sql
  DROP TABLE guestbook;
  #+end_src
- (migrate)
  (restart)
- Dependencies CANNOT be loades dynamically by the JVM,
  they need a restart of the REPL
*** resources/sql/queries.sql

Used by HugSQL, which creates function to interact with a database, based on SQL files
|----+-------------------------------------------|
| :! | indicates the query is destructive        |
| :n | returns the number of affected rows       |
| :? | indicates a SELECT query                  |
| :* | indicates that multiple rows are returned |
|----+-------------------------------------------|

#+begin_src sql
  -- :name save-message! :! :n
  -- :doc creates a new message using the name and message keys
  INSERT INTO guestbook (name, message)
  VALUES (:name, :message)
  -- :name get-messages :? :*
  -- :doc selects all available messages
  SELECT * from guestbook
#+end_src

*** {dev,test}-config.edn
   - Not supposed to be commited to svn
    :database-url "jdbc:h2:./guestbook_dev.db"
   - Uses the :jvm-opts flags found in :project/{test,dev} profile in project.clj
*** Running queries
   (in-ns 'guestbook.db.core)
   (conman/bind-connection *db* "sql/queries.sql")
   (get-messages)
   (save-message! {:name "bob" :message "hello world"})
   (get-messages)
*** test/clj/guestbook/db/core_test.clj

#+begin_src clojure
  (deftest test-users
    (jdbc/with-transaction [t-conn *db* {:rollback-only true}]
      (is (= 1 (db/save-message!
                t-conn
                {:name "bob"
                 :message "hello world"}
                {:connection t-conn})))
      (is (= {:name "bob"
              :message "hello world"}
             (-> (db/get-messages t-conn {})
                 (first)
                 (select-keys [:name :message]))))))
#+end_src

***  src/clj/guestbook/db/core.clj

#+begin_src clojure
  (conman/bind-connection *db* "sql/queries.sql")
#+end_src

***  src/clj/guestbook/routes/home.clj

Where the paths, functions, middleware are put together.

*** resources/html/home.html

Extends base.html and process the :doc through markdown

*** resources/html/home.html

Setup to use Bulma CSS

* 22 | Clojure: The Essential Reference MEAP v28
|-------------------------+------------------------------------------------------------------|
|                         | http://manifesto.softwarecraftsmanship.org/#/es                  |
|                         | https://cognitect.com/blog/2016/1/28/state-of-clojure-2015-survey-results |
| NET runtime             | https://github.com/clojure/clojure-clr                           |
| JS runtime              | https://clojurescript.org/                                       |
| CLR history             | https://soundcloud.com/defn-771544745/48-david-miller-and-clojure-on-the-clr |
| STM support is built-in | https://en.wikipedia.org/wiki/Software_transactional_memory#Clojure |
| STM support is built-in | https://clojure.org/reference/refs                               |
|-------------------------+------------------------------------------------------------------|
** 1
- 2007 CLR removed
  - https://soundcloud.com/defn-771544745/48-david-miller-and-clojure-on-the-clr
  - To see the initial CLR effort
    git rev-list --reverse --format="- %B %cd" -n 1 HEAD â€” src/cli/runtime.
  - CLR removed in commit b6db84aea2db2ddebcef58918971258464cbf46f
- 2009 Community adoption of the CLR from Rich Hickey
- 2011 Clojurescript announced
- Parts of the Standard Library
  1) clojure.core, always available without need to specify any namespace
  2) other clojure.*
  3) Java SDK
- Missing from the Clojure STL, are solutions already provided by java
  - Cryptography
  - Low-level networking
  - HTTP
  - 2D Graphics
