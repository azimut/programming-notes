- https://www.youtube.com/c/FluxHarmonicLive/videos music
- http://sarabander.github.io/sicp/html/UTF.xhtml#UTF
  https://github.com/sarabander/sicp/
* SICP
- MIT 6.001 Structure and Interpretation, 1986 - https://www.youtube.com/playlist?list=PLE18841CABEA24090
  Gerald Jay Sussman
** Video: Lecture 1A: Overview and Introduction to Lisp - https://www.youtube.com/watch?v=-J_xL4IGhJA&list=PLE18841CABEA24090
*** Part 1
- Computer science is not about computer in the same way that
  - physics is not about particle accelerators
  - or biology is not about petri dishes
- Computer science, is about
  - Formalizing intuitions about processes.
  - How to do things.
  - How to knowledge.
- *Declarative knowledge*: "What is true"
  sqrt(x) is the "Y" such that "pow(Y,2) = x" and "Y>=0"
- *Imperative knowledge*: "How to" (a process)
  make a guess, improve the guess by avg g and x/g, keep improving
- Computer engineer deals with idealized components.
  That means there is no much difference into what I could build and what can I imagine.
  The constrains are not physics, but the constrains of our minds.
- Techniques to control complexity:
  | Black-Box Abstraction      | functions that return values or other functions | functions  |
  | Conventional Interfaces    | generic operations                              | interfaces |
  | Metalinguistic Abstraction | DSL                                             | macros     |
*** Part 2
- Elements of programming languages:
  | Primitive elements   | + 3 17.5 5                           | primitives                         |
  | means of combination | (+ 3 17.5 5) (if) (cond)             | function application, control flow |
  | means of abstraction | (define a (+ 3 17.5 5))              | variable                           |
  |                      | (define (square x) (* x x))          | function                           |
  |                      | (define square (lambda (x) (* x x))) | lambda                             |
*** Part 3
- If you have recursive definitions. You don't need any more constructs to loop.
- Block structure: for defining local sub functions aka flet, labels
  #+begin_src scheme
  (define (sqrt x)
    (define (try a b))
    (define (improve-guess a b))
    (define (good-enough-? a b))
    (try 1)) ; Don't have to define X again as it is in scope
  #+end_src
** Video: Lecture 1B: Procedures and Processes; Substitution Model
*** Part 1
- "At any level of detail, if you look inside this machine, you are gonna find that there is multiple levels below that you don't know about."
- "We have to learn to ignore details."
- "The key to understanding complicated things is know what not to look at. And not to compute.
- Peano Arithmetics
  #+begin_src scheme
  (define (+ x y)
    (if (= x 0)
        y
        (+ (-1 x) (+1 y))))
  (define (+ x y)
    (if (= x 0)
        y
        (1+ (+ (-1 x) y))))
  #+end_src
*** Part 2
- "The key to being a creative person, partly, is to do analysis at some level."
- "How do I know what I am going to get on a film before I push a button."
- both Peano sums have different "shapes", of time(vertical)/space(horizontal/memory)
- First one has time=O(x), space=O(1)...called Iteration...iteration is "recoverable"
  Second: time=O(x), space=O(x)...called (Linear) Recursion
*** Part 3
- time=O(fib(n))
  space=O(n)
  #+begin_src scheme
  (define (fib n)
    (if (< n 2)
      n
      (+ (fib (- n 1)
         (fib (- n 2))))))
  #+end_src
