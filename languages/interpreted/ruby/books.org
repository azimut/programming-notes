- http://rubyquiz.com/
- 01 http://ruby-doc.com/docs/ProgrammingRuby/
- 04 1.7 http://ruby-hacking-guide.github.io/
- 06 https://rubylearning.github.io/satishtalim/tutorial.html
- 13 http://jasonkim.ca/projects/just_enough_ruby_to_get_by/
- 17 https://essenceofchaos.gitbooks.io/learn-ruby-first/content/
- ? https://web.archive.org/web/20180321101922/http://www.humblelittlerubybook.com/book/html/index.html
- 22 https://i-love-ruby.gitlab.io/book.html
- https://learnxinyminutes.com/docs/ruby/
- https://fiachetti.gitlab.io/mastering-roda/
- https://pine.fm/LearnToProgram/
- https://learnrubythehardway.org/book/
- https://www.programming-books.io/essential/ruby/
- https://launchschool.com/books/core_ruby_tools
- https://launchschool.com/books/ruby
- https://launchschool.com/books/oo_ruby
- https://www.ruby-lang.org/en/documentation/quickstart/
- https://learnbyexample.github.io/learn_ruby_oneliners/
  - https://github.com/learnbyexample/Command-line-text-processing/blob/master/ruby_one_liners.md
- https://ruby-doc.org/docs/ruby-doc-bundle/UsersGuide/rg/index.html
- https://leanpub.com/rwdtow/read
- https://github.com/elm-city-craftworks/practicing-ruby-manuscripts
- for security https://rubyfu.net/
- http://ruby.bastardsbook.com/
- https://caliban.org/ruby/rubyguide.shtml
- 2.7 https://rubyreferences.github.io/rubyref/
- https://github.com/manjunath5496/Ruby-Programming-Books
- book: https://learnbyexample.github.io/learn_ruby_oneliners/

* Book: Programming Ruby 3.3

- Authors:
  - Dave Thomas
  - Andy Hunt
  - Chad Fowler
  - Noel Rappin

- home https://pragprog.com/titles/ruby5/programming-ruby-3-3-5th-edition/
- errata https://devtalk.com/books/programming-ruby-3-2-5th-edition/

** 2

- Ruby is an OOP, in programming terms, an object is
  a thing that combines data with the logic that
  manipulates that data.

** 4

#+begin_src ruby
  def my_while(cond, &body)
    while cond.call
      body.call
    end
  end

  a = 0
  my_while(-> { a < 3 }) do
    puts a
    a += 1
  end
#+end_src

- blocks taking different type of arguments
  #+begin_src ruby
    #proc1 = -> (a, *b, &block) do
    proc1 = lambda do |a, *b, &block|
      puts "a = #{a.inspect}"
      puts "b = #{b.inspect}"
      block.call
    end
    proc1.call(1,2,3,4) { puts "in block1" } # a = 1 ; b = [2,3,4]
  #+end_src

* Book: why's (poignant) guide to Ruby

cartoon foxes == sinergy (often found in introductions)

** 3 A Quick Ride Through Ruby

http://poignant.guide/book/chapter-3.html

#+begin_quote
My conscience won't let me call Ruby a computer language.
That would imply that the language works primarily on the computer's terms.
But what do you call the language when your brain begins to think in that language?
When we start to use the language's own words and colloquialisms to express yourself.
How can it be a computer language?. It's ours we speak it natively!
#+end_quote

- Read the following aloud to yourself.
  - Punctuation silent.
  - "Punctuation adds meaning to words, helps give cues as to waht the author intended by a sentence."
  #+begin_src ruby
    5.times { print "0delay!" }
    exit unless "restaurant".include? "aura"
  #+end_src

- This one reads more like "shorter english"
  #+begin_src ruby
    ['toast', 'cheese', 'wine'].each { |food| print food.capitalize }
  #+end_src

#+begin_quote
Ruby is built from sentences.
They aren't exactly English sentences.
They are short collections of words and punctuation which emcompass a single thought.
These sentences can form books.
They can form pages.
They can form entire novels, when trung together.
Novels that can be read by humans, but also by computers.
#+end_quote

- "Punctuation and capitalization will help your brain to see bits of code and feel intense recognition."
