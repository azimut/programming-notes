#+TITLE: Makefile
#+DATE: <2021-12-17 vie>

|-------------+----------------------------------------------------------------------|
|         <r> |                                                                      |
|        wiki | https://en.wikipedia.org/wiki/Make_(software)                        |
|    gnu make | https://www.gnu.org/software/make/                                   |
|  posix make | https://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html |
|        fork | https://justine.lol/make/                                            |
| alternative | https://github.com/casey/just                                        |
|      manual | https://www.gnu.org/software/make/manual/html_node/index.html        |
|-------------+----------------------------------------------------------------------|

- Author: Stuart Feldman
- 1976

- library: https://github.com/mitjafelicijan/makext
- tool: linter https://github.com/mrtazz/checkmake

* language

- defines a dependency tree of rules
  - made of targets (the vertex)
  - final exe is the root vertex

- bare "make" run defaults to the first target
- can be more than 1 target
- fails if a command returns 1

** control flow

#+begin_src makefile
ifeq ($(CC),gcc)
  # foo
else
  # bar
endif
#+end_src

** functions

- $(shell find) - replaces new lines with spaces
- $(wildcard foo/*.js) - filesystem match
- $(patsubst %.c, %.o, $(wildcard *.c))
- $(strip)
- $(filter)
- $(filter-out)

** dependency
|---+-------------------------------------------------------|
| * | wildcard, filesystem matches, use it with $(wildcard) |
| % | wildcard                                              |
|---+-------------------------------------------------------|
** target

- targets without deps are human made ones
- order does not matter
- multiple targets??????

- ~.ONESHELL~ runs all commands on one shell
- ~.POSIX:~ In order to get POSIX behavior the first line should be
- ~.SUFFIXES~ To disable all default *inference rules*
- ~.DELETE_ON_ERROR:~ will delete the target if a command fails (NO DEFAULT)
- ~.PHONY~ target is to let make know that is not a file (like for clean)
  - recommended: https://www.gnu.org/software/make/manual/html_node/Standard-Targets.html
    - all, help, clean, test, check, dist
    - install: use PREFIX=/usr/local and DESTDIR

*** Default Target Rules

#+begin_src makefile
%:     ; $(CC)  $*.o -o $*
%.c:   ; $(CC)  -c $(CPPFLAGS) $(CFLAGS)
%.cpp: ; $(CXX) -c $(CPPFLAGS) $(CXXFLAGS)
%.o:   ; $(CC) $(LDFLAGS) n.o $(LOADLIBES) $(DLIBS)
#+end_src

** variables / macros

- can ONLY be strings
- Expanded with $(...)
- $(SOMVAR:.cpp=.o)

*** assignments
|-----+----------------------------------|
| <r> | assignment                       |
|-----+----------------------------------|
|   = | dynamic                          |
|  := | one time                         |
|  ?= | safe, only if undefined          |
|  += | appends with a space             |
|  != | exec shell command and assign it |
|-----+----------------------------------|
*** defaults
https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html
|---------+-------------------------------------------|
| CC      | For compiler and compiler flags           |
| CFLAGS  | "                                         |
| LDFLAGS | for flags passed to compiler when linking |
| LDLIBS  | For flags about libraries when linking    |
|---------+-------------------------------------------|
*** magic variables
|-------+-------------------------------------|
|  <c>  |                                     |
|  $@   | target name                         |
|  $<   | 1st prerequisite                    |
|  $^   | all prerequisites                   |
|  $+   | all prerequisites, with dups        |
|  $?   | new prerequisites (than the target) |
|  $*   | what "%" wildcard matched           |
|  $Â¦   | ?                                   |
| $(@D) | ? target dir ?                      |
|-------+-------------------------------------|

** commands

- use backslash (\) for too long *commands*
- each one runs on his own shell
- prefixes
  - ~@~ will not print cmd https://www.gnu.org/software/make/manual/html_node/Echoing.html
  - ~-~ ignore errors
  - ~+~ run even on no exec mode

* flags
|---------+-----------------------+--------------------------------|
|   <c>   |          <c>          |                                |
|         |       long flag       | description                    |
|---------+-----------------------+--------------------------------|
|   -k    |      keep-going       | keep going on errors           |
| -o FILE |     old-file=FILE     |                                |
|   -s    |        silent         | silent command print           |
|   -i    |     ignore-errors     |                                |
|   -e    | environment-overrides | env > make vars                |
|   -B    |      always-make      | make ALL targets               |
|  -j N   |        jobs=N         | parallel jobs                  |
|    -    |                       | add to suppress command error  |
|   -n    |        dry-run        |                                |
|   -t    |         touch         | touch targets, without running |
|---------+-----------------------+--------------------------------|

* gotchas

- https://github.com/casey/just#what-are-the-idiosyncrasies-of-make-that-just-avoids
- assignment expressions are ONLY evaluated when they are used
- ~$~ needs to be escaped with another ~$$~ in commands, in order to pass them to the shell properly. Regardless if they are in between single quotes.


* articles

- https://swcarpentry.github.io/make-novice/reference.html
- https://github.com/mbcrawfo/GenericMakefile/
- http://nuclear.mutantstargoat.com/articles/make/
- https://www.cs.swarthmore.edu/~newhall/unixhelp/howto_makefiles.html
- article 19 https://tech.davis-hansson.com/p/make/
- https://text.causal.agency/001-make.txt
- cheat https://devhints.io/makefile
- examples https://gist.github.com/isaacs/62a2d1825d04437c6f08
- examples https://learnxinyminutes.com/docs/make/
- tutorial http://makefiletutorial.com/

** A Tutorial on Portable Makefiles

https://nullprogram.com/blog/2017/08/20/
- POSIX Make https://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html
- GNU Make, on BSD is named *gmake*
** Example

#+begin_src makefile
.POSIX:
.SUFFIXES:
CC     = cc
CFLAGS = -W -O
LDLIBS = -lm

all: game
game: graphic.so physics.o input.o
    $(CC) $(LDFLAGS) -o game graphics.o physics.o input.o
graphics.o: graphics.c graphics.h
physics.o: physics.c physics.h
input.o: input.c input.h graphics.h physics.h
clean:
    rm -f game graphics.o physics.o input.o

.SUFFIXES: .c .o # Adds them to the suffix list
.c.o:
    $(CC) $(CFLAGS) -c $<
#+end_src

* examples
** some anon makefile - DEBUG flag
*** src/program.c

#+begin_src c
  #include <stdio.h>
  #include <math.h>

  int
  main (void) {
    printf("log of 5: %f\n", log(5.0));
  }
#+end_src

*** Makefile

#+begin_src makefile
#!/usr/bin/make -f

# Reassign these as needed
DEBUG    := 0
STRIP    := strip
DESTDIR  := /usr/local/bin
SANITIZE := address,undefined

CFLAGS   := -std=c99 -Wall -Wextra -Wpedantic
CPPFLAGS := -Iinclude
LDFLAGS  := -lm

ifeq ($(DEBUG),1)
  CFLAGS   += -ggdb -Og -fsanitize=$(SANITIZE)
else
  CFLAGS   += -O3 -fwhole-program
  CPPFLAGS += -DNDEBUG
endif

SRC_DIR := src/
OBJ_DIR := obj/

VPATH := $(SRC_DIR) $(OBJ_DIR)

PROGRAM_SRC := program.c
PROGRAM_OBJ := $(addprefix $(OBJ_DIR),$(PROGRAM_SRC:.c=.o))

$(OBJ_DIR)%.o: $(SRC_DIR)%.c | $(OBJ_DIR)
    $(CC) $(CFLAGS) $(CPPFLAGS) -c -o $@ $<

all: program

program: $(PROGRAM_OBJ)
    $(CC) $(CFLAGS) -o $@ $+ $(LDFLAGS)
ifneq ($(DEBUG),1)
    $(STRIP) $@
endif

install: program
    mkdir -p $(PREFIX)$(DESTDIR)
    install -s -m 755 -t $(PREFIX)$(DESTDIR) $+

uninstall:
    $(RM) $(PREFIX)$(DESTDIR)/program

$(OBJ_DIR):
    mkdir -p $@

clean:
    $(RM) program $(PROGRAM_OBJ)
    $(RM) -d $(OBJ_DIR)

.PHONY: all clean
#+end_src

* videos
** 20 - Lecture 8: Metaprogramming
https://www.youtube.com/watch?v=_Ms1Z4xfqv4
- we generate a *pipeline*
- depending on static files
- ~Semantic Versioning~ Major.minor.patch
*** Makefile

#+begin_src makefile
  paper.pdf: paper.tex plot-date.png
       pdflatex.png

  plot-%.png: %.data plot.py
      ./plot.py -i $*.dat -o $@
#+end_src

*** plot.py

note how small is the python code for just a small and powerful library...
#+begin_src python
  import matplotlib
  import matplotlib.pyplot as plt
  import numpy as np
  import argparse

  parser = argparse.ArgumentParser()
  parser.add_argument('-i', type=argparse.FileType('r'))
  parser.add_argument('-o')
  args = parser.parse_args()

  data = np.loadtxt(args.i)
  plt.plot(data[:, 0], data[:, 1])
  plt.savefig(args.o)
#+end_src

** 19 - Makefiles: 95% of what you need to know

https://www.youtube.com/watch?v=DtGrdB8wQ_8
- -MP -MD, flags to be passed to GCC
- $(info something hello world)
- Makefile foreach, patsubst, wildcard, .d
  #+begin_src makefile
    # generate files that encode make rules for the .h deps
    # generate .d files, includes information for Make
    DEPFLAGS = -MP -MD
    INCDIRS  = . ./include/
    CFLAGS   = $(foreach D,$(INCDIRS),-I$(D))
    CFILES   = $(foreach D$(CODEDIRS),$(wildcard $(D)/*.c))
    OBJECTS  = $(patsubst %c,%,o,$(CFILES))
    DEPFILES = $(patsubst %c,%,o,$(CFILES))
  #+end_src

** 16 - Introduction to Make and GNU Autotools | Barry Smith, Argonne National Laboratory

https://www.youtube.com/watch?v=WFLvcMiG38w
#+begin_src makefile
  OUTPUT_OPTION = -MMD -MP -o $@

  SOURCE = ext8.c util8.c
  DEPS   = $(SOURCE:.c=.d)
  OBJS   = $(SOURCE:.c=.o) # replace, like patsubst
          -include ${DEPS}
#+end_src
