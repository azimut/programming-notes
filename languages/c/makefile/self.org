#+TITLE: Makefile
#+DATE: <2020-12-17 jue>

|-------------+----------------------------------------------------------------------|
|         <r> |                                                                      |
|        wiki | https://en.wikipedia.org/wiki/Make_(software)                        |
|    gnu make | https://www.gnu.org/software/make/                                   |
|  posix make | https://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html |
|        fork | https://justine.lol/make/                                            |
| alternative | https://github.com/casey/just                                        |
|      manual | https://www.gnu.org/software/make/manual/html_node/index.html        |
|-------------+----------------------------------------------------------------------|

- Author: Stuart Feldman
- 1976

- library: https://github.com/mitjafelicijan/makext
- tool: linter https://github.com/mrtazz/checkmake

* language

- defines a dependency tree of rules
  - made of targets (the vertex)
  - final exe is the root vertex

- bare "make" run defaults to the first target
- can be more than 1 target
- fails if a command returns 1

** control flow

#+begin_src makefile
ifeq ($(CC),gcc)
  # foo
else
  # bar
endif
#+end_src

** functions

- $(shell find) - replaces new lines with spaces
- $(wildcard foo/*.js) - filesystem match
- $(patsubst %.c, %.o, $(wildcard *.c))
- $(strip)
- $(filter)
- $(filter-out)

** dependency
|---+-------------------------------------------------------|
| * | wildcard, filesystem matches, use it with $(wildcard) |
| % | wildcard                                              |
|---+-------------------------------------------------------|
** target

- targets without deps are human made ones
- order does not matter
- multiple targets??????

- ~.ONESHELL~ runs all commands on one shell
- ~.POSIX:~ In order to get POSIX behavior the first line should be
- ~.SUFFIXES~ To disable all default *inference rules*
- ~.DELETE_ON_ERROR:~ will delete the target if a command fails (NO DEFAULT)
- ~.PHONY~ target is to let make know that is not a file (like for clean)
  - recommended: https://www.gnu.org/software/make/manual/html_node/Standard-Targets.html
    - all, help, clean, test, check, dist
    - install: use PREFIX=/usr/local and DESTDIR

*** Default Target Rules

#+begin_src makefile
%:     ; $(CC)  $*.o -o $*
%.c:   ; $(CC)  -c $(CPPFLAGS) $(CFLAGS)
%.cpp: ; $(CXX) -c $(CPPFLAGS) $(CXXFLAGS)
%.o:   ; $(CC) $(LDFLAGS) n.o $(LOADLIBES) $(DLIBS)
#+end_src

** variables / macros

- can ONLY be strings
- Expanded with $(...)
- $(SOMVAR:.cpp=.o)

*** assignments
|-----+----------------------------------|
| <r> | assignment                       |
|-----+----------------------------------|
|   = | dynamic                          |
|  := | one time                         |
|  ?= | safe, only if undefined          |
|  += | appends with a space             |
|  != | exec shell command and assign it |
|-----+----------------------------------|
*** defaults
https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html
|---------+-------------------------------------------|
| CC      | For compiler and compiler flags           |
| CFLAGS  | "                                         |
| LDFLAGS | for flags passed to compiler when linking |
| LDLIBS  | For flags about libraries when linking    |
|---------+-------------------------------------------|
*** magic variables
|-------+-------------------------------------|
|  <c>  |                                     |
|  $@   | target name                         |
|  $<   | 1st prerequisite                    |
|  $^   | all prerequisites                   |
|  $+   | all prerequisites, with dups        |
|  $?   | new prerequisites (than the target) |
|  $*   | what "%" wildcard matched           |
|  $Â¦   | ?                                   |
| $(@D) | ? target dir ?                      |
|-------+-------------------------------------|

** commands / actions

- use backslash (\) for too long *commands*
- each one runs on his own shell
- prefixes
  - ~@~ will not print cmd https://www.gnu.org/software/make/manual/html_node/Echoing.html
  - ~-~ ignore errors
  - ~+~ run even on no exec mode

* flags
|---------+-----------------------+--------------------------------|
|   <c>   |          <c>          |                                |
|         |       long flag       | description                    |
|---------+-----------------------+--------------------------------|
|   -k    |      keep-going       | keep going on errors           |
| -o FILE |     old-file=FILE     |                                |
|   -s    |        silent         | silent command print           |
|   -i    |     ignore-errors     |                                |
|   -e    | environment-overrides | env > make vars                |
|   -B    |      always-make      | make ALL targets               |
|  -j N   |        jobs=N         | parallel jobs                  |
|    -    |                       | add to suppress command error  |
|   -n    |        dry-run        |                                |
|   -t    |         touch         | touch targets, without running |
|---------+-----------------------+--------------------------------|

* gotchas

- https://github.com/casey/just#what-are-the-idiosyncrasies-of-make-that-just-avoids
- assignment expressions are ONLY evaluated when they are used
- ~$~ needs to be escaped with another ~$$~ in commands, in order to pass them to the shell properly. Regardless if they are in between single quotes.

