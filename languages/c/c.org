- https://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html
- A Guide to Undefined Behavior in C and C++, Part 1
  https://blog.regehr.org/archives/213
- const https://softwareengineering.stackexchange.com/questions/204500/when-and-for-what-purposes-should-the-const-keyword-be-used-in-c-for-variables
- https://gjbex.github.io/DPD-online-book/CodingBestPractices/ErrorHandling/error_handling_c/
- asan, ubsan, valgrind, fuzzers, libcheck, pvs
- http://infolab.stanford.edu/~ullman/focs.html#pdfs
- Book: http://c-faq.com/
- C Books Reviews http://knking.com/recbooks/c.html
- Code: http://bxr.su/OpenBSD/
- Example: https://github.com/ltratt/hk/blob/18fcaea3e83f0c00aaef13b2882d5fa233d85de2/hk.c
- Article: 2016 https://matt.sh/howto-c
- Article: https://suckless.org/coding_style/
- Article: 2021 - unfashionable C
  https://www.yodaiken.com/2021/05/21/your-computer-is-a-fast-pdp-11-and-more-on-c-the-c-standard-and-computer-architecture/
- Article: 2018 - C Is Not a Low-level Language
  https://queue.acm.org/detail.cfm?id=3212479
- Benchmark: https://www.wilfred.me.uk/blog/2014/10/20/the-fastest-bigint-in-the-west/
- Benchmark: FFI https://github.com/dyu/ffi-overhead
  - Golang is 40x slower than C
  - Haskell,Ocaml(opt),Rust are on par with C
  - Ocaml(C) is 4x slower
  - LuaJit is faster than C, https://github.com/dyu/ffi-overhead/issues/2#issuecomment-405834411
    "Using JITing to skip PLT inderection"
    "Same on C would be -fno-plt"
- https://fastcompression.blogspot.com/2019/01/writing-safer-c-code.html
- Video: How I program C - Eskil Steenberg - https://www.youtube.com/watch?v=443UNeGrFoM
- https://github.com/AnthonyCalandra/modern-cpp-features
- https://github.com/gerasdf/InsecureProgramming/
- https://github.com/junegunn/fzf
- https://github.com/rhysd/vim-clang-format
- https://not.cafe/2020/10/12/getting-started-with-c-programming.html
- https://tek256.com/posts/code-hardening/
- http://blog.lujun9972.win/emacs-document/blog/2018/03/22/emacs-as-a-c++-ide/index.html
  https://vxlabs.com/2016/04/11/step-by-step-guide-to-c-navigation-and-completion-with-emacs-and-the-clang-based-rtags/
* Videos
** "New" Features in C - Daniel Saks
   https://www.youtube.com/watch?v=ieERUEhs910
- C++ dev, working also on C
- 4 Standards C89=C90/C99/C11/C18(bugfix of 11)
- Reserved identifiers
  - for global scope, starting with undersore
  - for all, starting with 2 underscores, or underscore and uppercase
- C99 boolean type
- C90 _STDC_
  C99 _STDC_VERSION_
- C99 long long
- C99 <stdint.h> for exact length ints
- C90 you couldn't declare after the first line
     for loop variables declared at the beginning
  C99 relaxed it, and allows declaration after
     for loop variables declared inplace
- C99 inline for functions
- C99 ~compound literals~, where rational is a typedef struct with 2 members
  (rational){1,2}
  (int [m]){8,6,3,1,2,3,4,5,6}
  (int []){8,6,3,1,2,3,4,5,6}
- C99 ~designated initializers~, nice for unions or structs (to avoid confusion) or arrays
  glop g1 = { .i = 10}
  glop g2 = { .d = 12.3 }
  int x[10] = { 0, 0, 0, 8, 0, 0, 0,  2}
  int x[10] = { [3] = 8, [7] = 2 }
- C99 ~variable length arrays~ VLAs, declaring and as parameters
  void f(size_t m, size_t n) {
    int x[m][n];
- C99 ~Flexible Array Members~, useful for packet-like structures
  struct packet {
    header h;
    data d[]; // THIS
  }
** Modern C and What We Can Learn From It - Luca Sas [ ACCU 2021 ] 
   https://www.youtube.com/watch?v=QpAhX-gsHMs
- WG14 Standarization Group https://www.open-std.org/jtc1/sc22/wg14/
- designated initializers, initialize everything else to 0
- header macro to differentiate between c++ and c
  __cplusplus
- Instead using malloc/fopen ask for allocators iocallbacks
- static_assert()
- Example: using sokol gfx, we describe a pipeline, we initialize the others to 0/default
  #+begin_src c
sg_pipeline_desc pip_desc = {
  .layout = {
    .buffers[0].stride = 28,
    .attrs = {
      [ATTR_vs_position].format = SG_VERTEXFORMAT_FLOAT3,
      [ATTR_vs_color0].format   = SG_VERTEXFORMAT_FLOAT4
    }
  },
  .shared = shd,
  .index_type = SG_INDEXTYPE_UINT16,
  .depth_stencil = {
    .depth_compare_func = SG_COMPAREFUNC_LESS_EQUAL,
    .depth_write_enagled = true,
  }
  .rasterizer.cull_mode = SG_CULLMODE_BACK,
  .rasterizer.sample_count = SAMPLE_COUNT,
  .label = "cube-pipeline"
};
  #+end_src
- C11 _Generic and Overloading
  #define min(a,b) _Generic((a), float. minf(a,b), int: mini(a,b))
- C11 atomics, thread_local
- defer macro
  #+begin_src c
#define macro_var(name) concat(name, __LINE__)
#define defer(start,end) for (     \
   int macro_var(_i_) = (start,0); \
   !macro_var(_i_);                \
   (macro_var(_i_) +=, end)
#define profile defer(profile_begin(), profile_end())
profile
{
 ...
}
#define gui defer(gui_begin(),gui_end()
gui
{
  ...
}
  #+end_src
- scope macro
  #+begin_src c
  file_handle_t file = file_open(filename, file_mode_read);
  scope(file_close(file))
  {
    ...
  }
  #+end_src
- Unions: We can refer to the same thing in different ways
  #+begin_src c
  typedef union hmm_vec2
  {
    struct { float X, Y; };
    struct { float U, V; };
    struct { float Left, Right; };
    struct { float Width, Height; };
    float Elements[2];
  } hmm_vec2;
  #+end_src
- Error: return a struct with a *valid* field
* Libraries
- (3K) minimal cross-platform standalone C headers
  https://github.com/floooh/sokol
- (800) math lib https://github.com/HandmadeMath/Handmade-Math
- https://github.com/oz123/awesome-c
- https://wiki.gnome.org/Projects/GLib
- https://github.com/clibs
- (893) https://github.com/tezc/sc
- (80) https://github.com/ludocode/pottery
- (24) https://github.com/begriffs/libderp
- (10) https://github.com/lelanthran/libds
* Sanitizers
- Static http://splint.org/
- https://www.youtube.com/watch?v=Q2C2lP8_tNE
- https://github.com/google/sanitizers/wiki/AddressSanitizer
- https://valgrind.org/docs/manual/quick-start.html
- https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html
* Article: C Runtime Overhead
  http://ryanhileman.info/posts/lib43
  https://news.ycombinator.com/item?id=29783585
- overhead is 9ms of linker and glibc
- strace -tt shows time in microseconds
- baseline time without stdlib 0.5ms
   -ffreestanding -nostdlib
   #+begin_src c
// gcc -m32 -ffreestanding -nostdlib
void _start() {
    /* exit system call */
    asm("movl $1,%eax;"
        "xorl %ebx,%ebx;"
        "int  $0x80"
    );
}
   #+end_src
- Bloom filter, to test SET belongs, for big datasets
  gives false-positive
  do not gives false-negatives
  https://en.wikipedia.org/wiki/Bloom_filter
- 1ms in linking
- 5ms in glibc load
- portable startime libc https://github.com/lunixbochs/lib43
* 0x00sec
** II Remote Shells. Part II. Crypt your link 
- https://0x00sec.org/t/remote-shells-part-ii-crypt-your-link/306
- https://en.wikipedia.org/wiki/Loop_unrolling
- SocketPair
  - Used to transfer data
  - Are a pair of sockets that are immediatly connected
    Something like runing a client and a server in 1 call
  - Kind of like a bidirectional PIPE
  - Convenient IPC
- secure_shel()
| Parent       | Child              |
|--------------+--------------------|
| socketpair() |                    |
| fork()       | fork()             |
| close(sp[0]) | close(sp[1])       |
| async_read() | start_shell(sp[0]) |
- async_read()
  select()
  memset()
  read()
  memfrob()
- We use stdin socket as the input socket for async_read() on main()
** III Remote Shells Part III. Shell Access your Phone
- setsockopt() - SO_REUSEADDR
* Projects
- http://www.tendra.org/tdfc2-config/#S11.2
  https://github.com/tendra/tendra/wiki/About
- https://github.com/isometimes/rpi4-osdev
** clang-format
  https://emacs.stackexchange.com/questions/55635/how-can-i-set-up-clang-format-in-emacs
  clang-format -style=llvm -dump-config > .clang-format
* Book: 2020 Effective C
** 1 Getting Started with C
- C defines 2 possible execution environments:
  - Freestanding: no OS, embedded programming
  - Hosted
- A ~return~ from the initial call to the ~main~ function
  is equivalent to calling ~exit~
- Passing user supplied data to ~printf~ first argument, can result in a secvul (seacord 2013)
- https://github.com/Valloric/YouCompleteMe/
  https://github.com/Shougo/deoplete.nvim/
- Compilers: gcc, clang, visual studio
- Kinds of Portability issues:
  + Implementation-defined behavior: not on the C standard, but on a particular impl
  + Unspecified behavior: on the standard, but with >1 behavior defined
  + Undefined behavior: not on the C standard, explicit or implicit
  + Locale-specific behavior
  + Common Extensions
- ~-pedantic~, notify portability issues
** TODO 2 Objects, Functions, and Types
- "Every type in C is either an ~object~ type or a ~function~ type."
- IEEE 754-2008: the Standard for Floating-Point Arithmetic.
- The ~referenced type~ T derives a ~pointer to~ T
- A code block {} is know as a ~compound statement~
- C is ~call-by-value~ (aka ~pass-by-value~) language
*** Scopes (identifiers)
| file      | declared outside a block or param list             |
| block     | declared inside a block or param list              |
| prototype | on function prototype params                       |
| function  | on function definition, between {}, only labels(?) |
*** Storage duration (lifetime: objects)
|           | life    | default when declared on                                             |
|-----------+---------+----------------------------------------------------------------------|
| automatic | block   | block scope or function parameter                                    |
| static    | program | file scope, must be initialized wth a constant value, not a variable |
| thread    |         |                                                                      |
| allocated |         | (dynamic allocated)                                                  |
*** Alignment
  Number of bytes between suuccessive addresses of objs.
- CPU's might behave differently with aligned or unaligned data
  - They access data by word, and might be able to access multiwords with a perf cost
  - Depending of the CPU's word (16,32,64 bits)
- malloc() is sufficiently aligned for all standard types
- _Alignas(struct S) can be used on C11 to align by the type provided
  In the example for a buffer which is then casted to a struct
- Can be weaker or stronger (aka stricter). Stronger have larger alignment values.
*** Object Types
- Boolean:
  - <stdbool.h>
  _Bool (or just bool) introduced on C99, stores 0 or 1
- Character:
  - char, signed char, unsigned char
  - All have the same alignment, size range, representation, and behavior
  - satisfies a minimum et of characters aka ~basic execution character set~
  - wchar_t is a chart type that takes more space (16 32 bits) to represent more chars
- Numerical:
  - signed char, short int, int, long int, long long int
  - *int* word can be ommited on declaration
  - <limits.h> has the maximun and minumun of each type
  - <inttypes.h> or <stdinit.h> to define uint32_t or uintmax_t
- Enum: enum day {sun = 1, mon, tue}
- Floating-point: float, double, long double
- void
- Functions:
  - list the param types or use *void* when no args
  - A function with a param type list is known as a *function prototype*
- Derived:
  - Pointers:
    - operators &* used together cancell each other
    - * (indirection, operates only on pointers)
    - & (address-of)
  - Arrays:
    - str[i]   is identical to *(str + i)
    - &str[10] is the same as    str + 10
*** TODO Derived Types
*** Tags
- Special naming mechanisms (struct,union,enums)
- Are not a *type name* by itself
- On a different namespace than identifiers
- ~typedef~ define an alias for it
*** Type Qualifiers
| const                 | unmodifiable memory                                                    |
| static volatile       | mmap Inpu/Output                                                       |
| static const volative | mmap Input                                                             |
| restrict              | optimization on pointers, when they are the unique point to the object |
** 5 Control Flow
   - Expression statement
   - Compound statements
   - Statement Kinds:
     1) Selection
     2) Iteration
     3) Jump
*** Expression Statement
    Optional expression, terminated by a (;)
    Most basic unit of work.
    #+begin_src c
    a = 6;
    c = a + b;
    ; // NULL STATEMENT
    ++count;
    #+end_src
    After each full expression has been evaluated,
    its value (if any) is discarded.
*** {}        Compound Statement (or block)
    a list of zero or more statements, surrounded by braces.
    can be nested
    #+begin_src c
    {
      static int count = 0;
      c += a;
      ++count;
    }
    #+end_src
*** if/switch Selection Statements
    allows you to conditionally execute based ona a *controlling expression*
**** if
     - -Wmisleading-indentation, to check for IF indentation when not using braces
      #+begin_src c
      if (expression)
        substatement

      if (expression)
        substatement1
      else
        substatement2

      if (expr1) // if..else ladder
        substatement1
      else if (expr2)
        substatement2
      else
        substatement3

      #+end_src
     *substatement* runs if *expression* is not equal to 0
     - Example
      #+begin_src c
      bool safediv(int dividend, int divisor, int *quotient) {
        if (!quotient) return false;
        if ((divisor == 0) || ((dividend == INT_MIN) && (divisor == -1)))
          return false;
        *quotient = dividend / divisor;
        return true;
      }
      #+end_src
**** switch
     expression MUST have an *integer* type
     Integer promotions are performed on the *controlling expression*
     The *constant* expression in each *case* label is converted to the promoted type.
     -Wimplicit-fallthrough
     -Wswitch-enum
     #+begin_src c
     switch (marks/10) {
       case 10: // Falls through
       case 9:
         puts("YOUR GRADE : A");
         break;
       default:
         puts("YOUR GRADE : FAILED");
     }
     #+end_src
     remember, enums map to integers
     if you not provide a default, and nothing matches, nothing wil run
     #+begin_src c
     typedef enum { Saving, Checking, MoneyMarket } AccountType;
     void assignInterestRate(AccountType account) {
       double interest_rate;
       switch (account) {
         case Savings:
           interest_rate = 3.0;
           break;
         case Checking:
           interest_rate = 1.0;
           break;
         case MoneyMarket:
           interest_rate = 4.5;
           break;
         default: abort();
       }
       printf("Interest rate = %g.\n", interest_rate);
     }
     #+end_src
     abort(), declared in the stdlib.h
*** while/for Iteration statement
    AKA loops, "a process, the end of which is connected to the beginning"
**** while
     runs until the controlling expression is equal to 0
     a simple *entry-controlled* loop
     - Example:
       1) copies the *val* converted to uchar
       2) into the first *n* characters
       3) of the object pointed by *dest*
     #+begin_src c
     void *memset(void *dest, int val, size_t n) {
       unsigned char *ptr = (unsigned char*)dest;
       while (n-- > 0)
         *ptr++ = (unsigned char)val;
       return dest;h
     }
     #+end_src
** 10 Program Structure
- Decompose your program into a collection of components that exchange information
  aross a shared boundary, or interface.
- Aim: low copling and high cohesion
- ~Cohesion~ measure of commonality between elements on a interface.
- ~Coupling~ measure of interdependency of programming interfaces
  - You can benefit from structuring your code as a collection of libraries.
    Even if the components aren't turned into actual libraries.
- ~Code Reuse~ functions, an interface, must struck a balance between generality and specificity. To allow for future changes.
- ~Data Abstractions~ enforces clear separation between the public interface and the implementation details.
- ~Opaque Types~ provide incomplete types on public interfaces
  typedef struct collection_type collectin_type;
  Defines a pointer to the type needed, instead of an actual value type.
  Internal header file, would define the type fully.
- Static compiled code can be further optimized for your program's use.
  Unused library code can be stripped from the final executable.
*** Linkage
| external  | by default at file level                                          |
| internal  | explicit *static* at file level                                   |
| nolinkage | variable at block level (static gives it static storage duration) |
* Book: 2019 Modern C
** TODO 18 Threads
- Are another variation of *control flow*
- thrd_create()
  thrd_join() - waits until thread is finished
- "If a thread T0 writes a non-atomic object that is simultaneously read/write by another thread T1,
  the behavior of the execution becomes undefined."
- "There are no atomic array types.W
- Race Free Initilization and ...
* Book: 2002 Expert C Programming
** Introduction
- some people do: if(3==i); in order to catch if they miss a =
* 6.S081: Learning by doing
Catalog description: Design and implementation of operating systems,
and their use as a foundation for systems programming. Topics include
virtual memory; file systems; threads; context switches; kernels;
interrupts; system calls; interprocess communication; coordination,
and interaction between software and hardware. A multi-processor
operating system for RISC-V, xv6, is used to illustrate these
topics. Individual laboratory assignments involve extending the xv6
operating system, for example to support sophisticated virtual memory
features and networking.

You may wonder why we are studying xv6, an operating system that
resembles Unix v6, instead of the latest and greatest version of
Linux, Windows, or BSD Unix. xv6 is big enough to illustrate the basic
design and implementation ideas in operating systems. On the other
hand, xv6 is far smaller than any modern production O/S, and
correspondingly easier to understand. xv6 has a structure similar to
many modern operating systems; once you've explored xv6 you will find
that much is familiar inside kernels such as Linux.
- https://pdos.csail.mit.edu/6.S081/2021/schedule.html
- https://news.ycombinator.com/item?id=30094376
