- wiki https://en.wikipedia.org/wiki/C_(programming_language)
- 1972
- for the PDP-11
- by Dennis Ritchie (31)
- Influenced by ~Algol~ and ~B~ (of Ken Thompson)
- Loosely typed language

* Language

- no stacktraces by default
- 0 is false
  - non-zero is truthy
- main() entry point for a program that's executed in a hosted environment
  - a *return* from it, is equivalent to calling *exit*

- Execution environments
  - freestanding: no OS, embedded programming
  - hosted: cli or from other programs

- Behavior
  1) Defined
  2) Unspecified
  3) Undefined
  4) Locale-Specific

** type qualifiers

- const https://softwareengineering.stackexchange.com/questions/204500/when-and-for-what-purposes-should-the-const-keyword-be-used-in-c-for-variables
|-----------------------+-------------------------------------------------------------------------|
|                   <r> |                                                                         |
|                 const | unmodifiable memory                                                     |
|              [[https://en.wikipedia.org/wiki/Restrict][restrict]] | optimization on pointers, hints they are THE UNIQUE point to the object |
|       static volatile | mmap Input/Output                                                       |
| static const volative | mmap Input                                                              |
|-----------------------+-------------------------------------------------------------------------|

** types

https://en.wikipedia.org/wiki/C_data_types
|----------------+------+--------+-------+----------+-----------+----------|
|            <r> | <c>  |        |       |      <r> |       <r> |   <c>    |
|                | bits |        |    to |          |           |          |
|----------------+------+--------+-------+----------+-----------+----------|
|           bool |  1   |      0 |     1 |    false |      true |          |
|           char |  8   |   -128 |   127 | CHAR_MIN |  CHAR_MAX | %c  %hhd |
|  unsigned char |  8   |      0 |   255 |        - | UCHAR_MAX |    %c    |
|          short |  16  | -32768 | 32767 | SHRT_MIN |  SHRT_MAX |   %hi    |
| unsigned short |  16  |      0 | 65535 |        - | USHRT_MAX |   %hu    |
|            int |  16  | -32768 | 32767 |  INT_MIN |   INT_MAX |    %d    |
|   unsigned int |  16  |        |       |        - |  UINT_MAX |    %u    |
|           long |  32  |   -2bn |  +2bn | LONG_MIN |  LONG_MAX |   %li    |
|  unsigned long |  32  |      0 |  +4bn |        - | ULONG_MAX |   %lu    |
|      long long |  64  |        |       |          |           |   %ll    |
|         size_t |      |        |       |          |           |   %zu    |
|          float |  32  |        |       |  FLT_MIN |   FLT_MAX | %f %e %g |
|         double |  64  |        |       |  DBL_MIN |   DBL_MAX |          |
|    long double | 128  |        |       | LDBL_MIN |  LDBL_MAX |          |
|    [u]int<N>_t |  N   |        |       |          |           |          |
|              * |  32  |        |       |          |           |    %p    |
|          char* |      |        |       |          |           |    %s    |
|----------------+------+--------+-------+----------+-----------+----------|

*** void

As a pointer type
#+begin_src c
  int a = 3;
  void *p = &a;             // a pointer to void (aka any type)
  printf("%d\n", *(int*)p); // before dereference it we need to cast it to a int* pointer
#+end_src

*** pointer %p

- an address in memory
- an unsigned integer
- *p to dereference, aka access what the pointers is pointing to
- &x to get the address of a variable
- (int*) to typecast the pointer to "pointer to int"

*** (tagged) union

#+begin_src c
  enum tag {
    TAG_BOOL,
    TAG_INT,
    TAG_FLOAT,
  };
  struct dyn {
    enum tag tag;
    union {
      bool b;
      int i;
      float f;
    } value;
  };

  struct dyn d;
  d.tag = TAG_INT;
  t.i = 42;
  switch (d.tag) {
   case TAG_BOOL:  printf("bool: %d\n" , d.value.b); break; // or d.b if unio had no name
   case TAG_INT:   printf("int: %d\n"  , d.value.i); break; // or d.i if unio had no name
   case TAG_FLOAT: printf("float: %f\n", d.value.f); break; // or d.f if unio had no name
  };
#+end_src

*** numerical / arithmetic

- 10 0xfa (%x) 0755 (%o) 0b1010 (%b)
- literal defaults to 32bit int
- Floating-point: float, double, long double
- Numerical:
  - signed char, short int, int, long int, long long int
  - *int* word can be ommited on declaration
  - <limits.h> has the maximun and minumun of each type
  - <inttypes.h> or <stdinit.h> to define uint32_t or uintmax_t
- ON -std=c2x, can use ('), to separate long numbers: 1'000'000
- sizeof
  #+begin_src c
    int a = 1;
    sizeof a;  // for variables doesn't need parens
  #+end_src

*** boolean

- defined in ~<stdbool.h>~
- _Bool (or just bool) introduced on C99, stores 0 or 1
- bit flags: for when you have multiple boolean flags to pass to a function
  #+begin_src c
    typedef unsigned int t_flag;
    typedef enum {
      FLAG_A = (1 << 0),
      FLAG_B = (2 << 0),
      FLAG_C = (3 << 0)
    } t_flag;
    int f(int x, t_flag flags) {
      if (flags & FLAG_A) x += x;
      if (flags & FLAG_B) x += x;
      if (flags & FLAG_C) x += x;
      return x;
    }
    f(1234, 0);
    f(1234, FLAG_A);
    f(1234, FLAG_B | FLAG_C);
  #+end_src

*** char

- char, signed char, unsigned char
- all have the same alignment, size range, representation, and behavior
- satisfies a minimum et of characters aka ~basic execution character set~
- ~wchar_t~ is a chart type that takes more space (16 32 bits) to represent more chars
- printf: %hhd to intepret it as a decimal

**** strings (char*, char[])

- <string.h>
- there is no type for strings in C
- we use:
  - char*  - string literals  - read only
  - char[] - character arrays - mutable

#+begin_src c
  char* foo = "hello" "world"; // "helloworld"
  char bar[]= "hello world";
  #define STR2(x)
  #define STR(x) STR2(x)
  #define WIDTH 300
  #define HEIGHT 200
  printf("%s\n", STR(WIDTH) "x" STR(HEIGHT)); // compile time int->string casting
#+end_src

*** struct

#+begin_src c
  typedef struct Mat4 {
    float m[4][4];
  } Mat4;
  typedef struct { // typedef struct myStruct ?????
    unsigned char c1;
    unsigned char c2;
  } myStruct;
  struct foo {      // BITFIELDS
    int first4 : 4; // tells the number of BITS it will take in memory
    int next4  : 4; // total real size would be _no less_ than the size of the type given
    int alone  : 1; // can be used later with eg: read()
  };
  myStruct _m1 = {0}; // initialize all fields with zero aka "Empty Initialization"
  return (myStruct){1,1};
  return myStruct{1,1};
  return myStruct{.c1 = 1, .c2 = 2};
#+end_src

*** enum

#+begin_src c
  typedef enum {
    COOKIES_OREO = 0,
    COOKIES_VANILLA,
  } Cookies;

  enum RecipeType { maindish, sidedish, sweet, topping };
#+end_src

*** arrays

- globals and static are _automatically_ initialized to zero
- sizeof(array)
  #+begin_src c
    int xs[] = {1,2,3,4};
    sizeof xs; // give total size of array = 4*4 = 16;
  #+end_src
- array length
  #+begin_src c
    #define ARRAY_LEN(a) (sizeof a / sizeof(a[0]))
    sizeof xs;    // = 16 = 4*4 give total size of array
    ARRAY_LEN(xs) // = 4  = array length
  #+end_src
- arrays as local, either
  #+begin_src c
    int coll2[1024] = {0};
    memset(coll2, 0, 1024);
  #+end_src
- arrays of structs
  #+begin_src c
    typedef struct {
      unsigned char a;
      unsigned char b;
      unsigned char c;
    } user_struct;
    user_struct arr[5] = {0};
  #+end_src
- arrays in structs can be initialized... TODO?

**** lookup table (array+?)

- array + enum
  #+begin_src c
    enum foo {
      foo_2 = 0,
      foo_3,
      foo_4,
    };
    static int squares[] = {4,9,16}; // OR
    static int squares[] = {         // using "Designated Initializers"
      [foo_2] = 4,
      [foo_3] = 9,
      [foo_4] = 16
    };
    squares[foo_3];
  #+end_src

- array + char, makes a sparse array (non-used space is still alocated!!!)
  #+begin_src c
    static char case_convert[] = {
      ['a'] = 'A',
      ['b'] = 'B',
      ['c'] = 'C',
    };
  #+end_src

** variables
- can have a "$" on its name
*** scopes of identifiers
|-----------+----------------------------------------------------|
|       <r> |                                                    |
|           | declared...                                        |
|-----------+----------------------------------------------------|
|      file | outside a block or param list                      |
|     block | inside a block or param list                       |
| prototype | on function prototype params                       |
|  function | on function definition, between {}, only labels(?) |
|-----------+----------------------------------------------------|
*** storage class/durations (aka lifetime of objects)
|-----------+---------+-----------------------------------------------------------------------|
|       <r> |         |                                                                       |
|           | life    | default when declared on                                              |
|-----------+---------+-----------------------------------------------------------------------|
| automatic | block   | block scope or function parameter                                     |
|    static | program | file scope, must be initialized with a constant value, NOT a variable |
|    thread |         |                                                                       |
| allocated |         | (dynamic allocated)                                                   |
|-----------+---------+-----------------------------------------------------------------------|
** functions

- list the param types or use *void* when no args
- a function with a param type list is known as a *function prototype*
- C is a ~call-by-value~ (aka ~pass-by-value~) language
- Are just pointers (addresses of memory) with executable code.
- Type signatures
  #+begin_src c
    // int (*) (int,int)
    int foo(int a, int b) { return a + b; }
    void main(void) {
      int (f*) (int,int) = foo;
      printf("%d\n", f(3,4));
    }
  #+end_src
- "High order"
  #+begin_src c
    bool p(int x) { return x % 2 == 0; }
    void print_if(int xs[10], bool (*predicate)(int)) {
      for (size_t i = 0; i < 10; i++) {
        if (predicate(xs[i])) {
          printf("%d\n", xs[i]);
        }
      }
    }
    void main(void) {
      print_if(xs, p);
    }
  #+end_src

** control flow
- conditionally run *statements* based on a controlling *expression*
- if/else if/else
- switch/case/default
  - expression must have an integer type
  - integer promotion is performed
    #+begin_src c
      switch (marks/10) {
        case 10: // Falls through
        case 9:
          puts("YOUR GRADE : A");
          break;
        default:
          puts("YOUR GRADE : FAILED");
      }
    #+end_src

* Standard Library

- https://en.cppreference.com/w/c/header
- https://en.wikibooks.org/wiki/Category:Book:C_Programming
- https://en.wikipedia.org/wiki/ANSI_C
- gcc/gnu extensions https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html
  - linux kernel uses them https://maskray.me/blog/2024-05-12-exploring-gnu-extensions-in-linux-kernel
  - also implemented by clang
- K&R C - 1978 - from the book with Brian Kernighan

- banned stdlib functions
  - https://wiki.openstack.org/wiki/StarlingX/Security/Banned_C_Functions
  - in git https://github.com/git/git/blob/master/banned.h
    - reasons https://github.com/git/git/commits/master/banned.h
    - strcopy, strncopy, strcat, strncat, strtok, strtok_r
    - sprintf, vsprintf
    - gmtime, localtime, ctime, ctime_r, asctime, asctime_r

** ANSI/ISO C89/C90
- https://en.wikipedia.org/wiki/C_data_types
- https://en.wikipedia.org/wiki/C_character_classification
- https://en.wikipedia.org/wiki/C_string_handling
- https://en.wikipedia.org/wiki/C_mathematical_functions
- https://en.wikipedia.org/wiki/C_file_input/output
- https://en.wikipedia.org/wiki/C_date_and_time_functions
- https://en.wikipedia.org/wiki/C_localization_functions
- https://en.wikipedia.org/wiki/C_dynamic_memory_allocation
- https://en.wikipedia.org/wiki/C_process_control
- https://en.wikipedia.org/wiki/C_signal_handling
- https://en.wikipedia.org/wiki/C_alternative_tokens
- assert(0 && "TODO: description");
|----------+--------------+----------------------------------------------------------------------|
|      <r> |     <c>      |                                                                      |
|   HEADER |      fn      |                                                                      |
|----------+--------------+----------------------------------------------------------------------|
| assert.h |    assert    | Conditionally compiled macro that compares its argument to zero      |
|  ctype.h |              | Functions to determine the type contained in ~character~ data        |
|  errno.h |    errno     | Macros reporting error conditions                                    |
|  float.h |              | Limits of floating-point types                                       |
|   time.h |              | Time/date utilities                                                  |
| limits.h |              | Ranges of integer types                                              |
| locale.h |              | Localization utilities                                               |
|   [[https://en.wikibooks.org/wiki/C_Programming/math.h][math.h]] |     fabs     | Common mathematics functions                                         |
|  paths.h |              | constants with string paths of common LINUX files                    |
| setjmp.h |              | Nonlocal jumps                                                       |
| signal.h |              | Signal handling                                                      |
| stdarg.h |   va_start   | Allows variable arguments functions                                  |
|          |    va_arg    |                                                                      |
|          |    va_end    |                                                                      |
|----------+--------------+----------------------------------------------------------------------|
| stddef.h |     NULL     | Common macro definitions                                             |
|          |    size_t    |                                                                      |
|----------+--------------+----------------------------------------------------------------------|
|  [[https://en.wikibooks.org/wiki/C_Programming/stdio.h][stdio.h]] |              | Input/output. Most return EOF (-1) on error.                         |
|          |    fopen     | open a stream                                                        |
|          |    fclose    | close a stream                                                       |
|          |    fread     | reads from stream, elements not bytes                                |
|          |    fgetc     | reads int character from stream                                      |
|          |    fwrite    | writes into stream                                                   |
|          |   fprintf    | writes into stream                                                   |
|          |   sprintf    | to string, does NOT check size of string                             |
|          |   snprintf   | to string                                                            |
|          |    printf    | returns the nr of chars printed, or negative number on error         |
|          |   getchar    |                                                                      |
|          |   getline    | mallocs line to given buffer, realloc if needed                      |
|          |    scanf     |                                                                      |
|          |     puts     |                                                                      |
|          |    remove    | erases a file                                                        |
|          |    rename    | renames a file                                                       |
|          |   tmpfile    | pointer to tmp file                                                  |
|          |    perror    | prints human readable *errno*                                        |
|----------+--------------+----------------------------------------------------------------------|
| [[https://en.wikibooks.org/wiki/C_Programming/stdlib.h][stdlib.h]] |              | General utilities                                                    |
|          |    size_t    |                                                                      |
|          |    malloc    |                                                                      |
|          |    getenv    |                                                                      |
|          |    system    |                                                                      |
|          |     exit     |                                                                      |
|          |   bsearch    |                                                                      |
|          |    qsort     |                                                                      |
|          |     abs      |                                                                      |
|          |     div      |                                                                      |
|          |    random    |                                                                      |
|          |     ato?     |                                                                      |
|          |    strto?    |                                                                      |
|          |    abort     | cause abnomal process termination                                    |
|          | EXIT_SUCCESS |                                                                      |
|          | EXIT_FAILURE |                                                                      |
|----------+--------------+----------------------------------------------------------------------|
| [[https://en.wikibooks.org/wiki/C_Programming/string.h][string.h]] |    size_t    | String handling                                                      |
|          |    memcpy    |                                                                      |
|          |    strdup    |                                                                      |
|          |    strtok    | split string by delimiter, modifies src string                       |
|          |    strsep    | split string by delimiter, modifies src string, handles empty fields |
|          |   strerror   | returns a string of *errno*                                          |
|----------+--------------+----------------------------------------------------------------------|

- stdarg.h
  - va_start(va_list, LAST_KNOWN_NAMED) - initializes va_list
  - va_arg(va_list, TYPE)
  - va_end(va_list)

- Example: using qsort
  #+begin_src c
    int compar(const void *x1, const void *x2) {
      return (*(int*)x2) - (*(int*)x1);
    }
    int xs[] = {1,2,3,4,5,6,7,8,9,10};
    qsort(xs, 10, sizeof(int), compar);
  #+end_src

** ANSI/ISO C95
|----------+---+------------------------------------------------------------------|
|      <r> |   |                                                                  |
| iso646.h |   | Alternative operator spellings                                   |
|  wchar.h |   | Extended multibyte and wide character utilities                  |
| wctype.h |   | Functions to determine the type contained in wide character data |
|----------+---+------------------------------------------------------------------|
** ANSI/ISO C99/C9X
- https://en.wikipedia.org/wiki/C99
- https://en.cppreference.com/w/c/compiler_support/99.html
*** features

- inline for functions
- ~Compound Literals~, where rational is a typedef struct with 2 members
  Create an unnamed object, an *lvalue* (can be assigned or taken an address of it).
  #+begin_src c
    mktime(&(struct tm){ .tm_year=2021, .tm_mon=6,... })
    (Person) { "john", "smith", 40 }
    (rational){1,2}
    (int [m]){8,6,3,1,2,3,4,5,6}
    (int []){8,6,3,1,2,3,4,5,6}
  #+end_src
- ~designated initializers~, nice for unions or structs (to avoid confusion) or arrays (zero out not given fields)
  #+begin_src c
    glop g1 = { .i = 10}
    glop g2 = { .d = 12.3 }
    glap g4 = { .customer.id = 20 }
    int x[10] = { 0, 0, 0, 8, 0, 0, 0,  2}
    int x[10] = { [3] = 8, [7] = 2 }
  #+end_src
- ~Variable Length Arrays~ VLAs, declaring them and as parameters (stack allocated!!!)
  #+begin_src c
    void f(size_t m, size_t n) {
      int x[m][n];
    }
    // also works and warns with malloc() arrays
    void g(size_t n, int numbers[n]) {} // for unintialized arrays
    void g(size_t n, int numbers[static n]) {} // for valid arrays
    void h(size_t n, int* numbers) {} // instead of...
    // single object
    void g(const char str[static 1]) {} // ensure isn't NULL
  #+end_src
- ~Flexible Array Members~, useful for packet-like structures
  You cannot longer: make an array of this, be a member of other struct, direct init.
  You can skip a malloc. And do it in 1(one) go. Ensuring contiguous memory.
  #+begin_src c
    struct packet {
      header h;
      data d[]; // <--- flexible array member, must be at the END
    };
  #+end_src

  #+end_src

*** headers
|------------+-------------+----------------------------------------------------------|
|        <r> |     <c>     |                                                          |
|  complex.h |             | ~Complex number~ arithmetic                              |
|     fenv.h |             | Floating-point environment                               |
| inttypes.h |             | Format conversion of integer types                       |
|   tgmath.h |             | Type-generic math (macros wrapping math.h and complex.h) |
|  stdbool.h |             | Macros for boolean type                                  |
|   [[https://en.wikibooks.org/wiki/C_Programming/stdint.h][stdint.h]] | [u]int<n>_t | Fixed-width integer types                                |
|            | INT<n>_MAX  |                                                          |
|------------+-------------+----------------------------------------------------------|
** ANSI/ISO C11/C1X

https://en.wikipedia.org/wiki/C11_(C_standard_revision)
|---------------+---+----------------------------------------|
|           <r> |   |                                        |
|    stdalign.h |   | alignas and alignof convenience macros |
|   stdatomic.h |   | Atomic operations                      |
| stdnoreturn.h |   | noreturn convenience macro             |
|     threads.h |   | Thread library                         |
|       uchar.h |   | UTF-16 and UTF-32 character utilities  |
|---------------+---+----------------------------------------|

- C11 =_Generic= and Overloading
#+begin_src c
  #define _Generic(x, \ // <------- controlling expression
    T1 : expr1, \   // <---Types
    T2 : expr2, \
    default : expr_def)
#+end_src

** ANSI/ISO C17/C18
- https://en.wikipedia.org/wiki/C17_(C_standard_revision)
- bugfix of C11
** ANSI/ISO C23
- https://en.wikipedia.org/wiki/C23_(C_standard_revision)
- https://en.cppreference.com/w/c/compiler_support/23
|-------------+---+---------------------------------------------------------------|
|         <r> |   |                                                               |
|    stdbit.h |   | macros to work with the byte and bit representations of types |
| stdckdint.h |   | macros for performing checked integer arithmetic              |
|-------------+---+---------------------------------------------------------------|

- -std=C2X
- constexpr (instead of #define, to define constants at compile time, with a type)
  - can be used on char* if NULL
  - cannot be used on char* otherwise
- bool (without needing to #include)
- nullptr (typesafe NULL)

** POSIX
- Portable Opearting System Interface (for UNIX)
- https://en.wikipedia.org/wiki/POSIX
  - POSIX.1-2024
    - https://sortix.org/blog/posix-2024/
    - https://blog.toast.cafe/posix2024-xcu
- https://en.wikipedia.org/wiki/C_POSIX_library
- https://en.wikibooks.org/wiki/C_Programming/POSIX_Reference
- libc's compare http://www.etalabs.net/compare_libcs.html
- history https://www.usenix.org/publications/loginonline/transcending-posix-end-era
- adds functions specific to POSIX systems
- sys/wait.h
  - waits for state changes in a child of the calling process
  - returns the pid of the process that changed state
|------------+----------+--------------------------------------------------|
|    <c>     |          |                                                  |
|   aio.h    |          | Asynchronous input and output.                   |
|  fmtmsg.h  |          | Message display structures.                      |
|  iconv.h   |          | Codeset conversion facility.                     |
| langinfo.h |          | Language information constants.                  |
|  libgen.h  |          | Definitions for pattern matching functions.      |
| monetary.h |          | Monetary types.                                  |
|  netdb.h   |          | Definitions for network database operations.     |
| nl_types.h |          | Data types.                                      |
|   poll.h   |          | Definitions for the poll() function.             |
|  regex.h   | regcomp  | Regular expression matching types.               |
|            | regexec  |                                                  |
|            | regerror |                                                  |
|            | regfree  |                                                  |
|  sched.h   |          | Execution scheduling.                            |
| strings.h  |          | String operations.                               |
| stropts.h  |          | STREAMS interface (STREAMS).                     |
|  syslog.h  |          | Definitions for system error logging.            |
| termios.h  |          | Allows terminal I/O interfaces.                  |
|  trace.h   |          | Tracing.                                         |
|  unistd.h  |          | Various essential POSIX functions and constants. |
| wordexp.h  |          | Word-expansion types.                            |
|------------+----------+--------------------------------------------------|
*** sys/
|----------------+---+------------------------------------------|
| sys/mman.h     |   | POSIX memory management declarations.    |
| sys/resource.h |   | Definitions for XSI resource operations. |
| sys/select.h   |   | Select types.                            |
| sys/shm.h      |   | XSI shared memory facility.              |
| sys/statvfs.h  |   | VFS File System information structure.   |
| sys/time.h     |   | Time and date functions and structures.  |
| sys/types.h    |   | Various data types used elsewhere.       |
| sys/uio.h      |   | Definitions for vector I/O operations.   |
| sys/utsname.h  |   | uname and related structures.            |
|----------------+---+------------------------------------------|
*** account
|---------+-----------------------------------------------|
| grp.h   | User group information and control.           |
| pwd.h   | Passwd (user information) access and control. |
| utmpx.h | User accounting database definitions.         |
|---------+-----------------------------------------------|
*** datastructure
|-------------+----------------------------|
| mqueue.h    | Message queues (REALTIME). |
| search.h    | Search tables.             |
| semaphore.h | Semaphores.                |
| sys/sem.h   | POSIX semaphores.          |
| sys/msg.h   | POSIX message queues.      |
|-------------+----------------------------|
*** file format
|--------+--------------------------------------------|
| cpio.h | Magic numbers for the cpio archive format. |
| ndbm.h | Definitions for ndbm database operations.  |
| tar.h  | Magic numbers for the tar archive format.  |
|--------+--------------------------------------------|
*** filesystem
|-------------+------------------------------------------------|
|     <c>     |                                                |
|  [[https://en.wikibooks.org/wiki/C_Programming/POSIX_Reference/dirent.h][dirent.h]]   | Allows the opening and listing of directories. |
|   fcntl.h   | File opening, locking and other operations.    |
|  fnmatch.h  | Filename-matching types.                       |
|    ftw.h    | File tree traversal.                           |
|   glob.h    | Pathname pattern-matching types.               |
| [[https://en.wikibooks.org/wiki/C_Programming/POSIX_Reference/sys/stat.h][sys/stat.h]]  | File information (stat et al.).                |
| sys/times.h | File access and modification times structure.  |
|   [[https://en.wikibooks.org/wiki/C_Programming/POSIX_Reference/utime.h][utime.h]]   | File access and modification times.            |
|-------------+------------------------------------------------|
*** network
|---------------+-------------------------------------------------------------------|
|      <c>      |                                                                   |
|  arpa/inet.h  | Definitions for internet operations.                              |
|   net/if.h    | Sockets local interfaces.                                         |
| netinet/in.h  | Internet address family.                                          |
| netinet/tcp.h | Definitions for the Internet Transmission Control Protocol (TCP). |
| sys/socket.h  | Main sockets header.                                              |
|   sys/un.h    | Definitions for UNIX domain sockets.                              |
|---------------+-------------------------------------------------------------------|
*** process
|------------+-------------------------------------------------------------|
|    <c>     |                                                             |
| pthread.h  | Defines an API for creating and manipulating POSIX threads. |
|  spawn.h   | Create a new process to run an executable program.          |
| sys/ipc.h  | Inter-process communication (IPC).                          |
| sys/wait.h | Status of terminated child processes.                       |
|  ulimit.h  | ulimit commands.                                            |
|------------+-------------------------------------------------------------|
*** <unistd.h>
https://en.wikibooks.org/wiki/C_Programming/POSIX_Reference/unistd.h
- close
- [[https://en.wikibooks.org/wiki/C_Programming/POSIX_Reference/unistd.h/exec][exec]](vp)
  - the "p" means that it will look into PATH
  - replaces the current process image with the one passed to it
  - you NEED to run in on a fork()ed child
  - 2nd argument list must end with NULL
- [[https://en.wikibooks.org/wiki/C_Programming/POSIX_Reference/unistd.h/fork][fork]]
  - returns
    - to the parent the child id
    - to the child 0
    - or negative on error
- open
- read
- select
- sleep
- swab
- write
** Windows
- MSVCRT.DLL -> UCRTBASE.DLL (C99-ish) https://en.wikipedia.org/wiki/Microsoft_Windows_library_files#Runtime_libraries
- sockets https://en.wikipedia.org/wiki/Winsock
** Linux
- alloca.h: allocs memory in stack
- execinfo.h: backtrace https://man7.org/linux/man-pages/man3/backtrace.3.html
** printf
|-----+-----------------------------------------|
| <r> |                                         |
|     | a space, leaves a space for sign symbol |
|   + | always prints sign symbol               |
|   * | takes width as an argument              |
|  .* | takes decimal precision from argument   |
|   N | aligns right                            |
|  -N | aligns left                             |
|  .N | decimal precision                       |
|-----+-----------------------------------------|
* Gotchas
- ME: (like bash) small differences can make a lot
* Snippets

** read file line by line
#+begin_src c
  FILE *file = fopen("foo", "r");
  char *line = NULL;
  size_t line_buffer_len = 0;
  size_t read_size = 0;
  while ((read_size = getline(&line, &line_buffer_len, file)) != -1)
    {
      line[read_size-1] = '\0';
      printf("line='%s'\n", line);
    }
  free(line);
  assert(feof(file));
  fclose(file);
#+end_src

** regex.h

#+begin_src c
  regex_t preg;
  assert(!recomp(&preg, "ab*", REG_EXTENDED|REG_ICASE));

  int result = regexec(&preg, "abb", 0, NULL, 0);
  if (result == 0)
    puts("match");
  else if (result == REG_NOMATCH)
    puts("no match");

  regfree(&preg);
#+end_src

** sockets
*** basic

- CLIENT
  s = socket()
  opts = htons+inet_addr
  connect(s, opts)

- SERVER
  s = socket()
  opts = htons+htonl
  bind(s, opts)
  listen(s, BACKLOG)
  accept(s) // wait
