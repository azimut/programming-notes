#+TITLE: Make
#+DATE: <2020-12-17 jue>
#+KEYWORDS: make, makefile, gnu make, programming, cheatsheet, quick reference

#+ATTR_HTML: :height 400
[[./makebook.png]]

|--------------+---------------------------|
|     <c>      |            <c>            |
|     wiki     |     [[https://en.wikipedia.org/wiki/Make_(software)][english]] [[https://en.wikibooks.org/wiki/Make][wikibooks]]     |
|     gnu      |         [[https://www.gnu.org/software/make/][home]] [[https://www.gnu.org/software/make/manual/html_node/index.html][docs]]         |
|     bsd      |            [[https://man.freebsd.org/cgi/man.cgi?make(1)][man]]            |
|    posix     |           [[https://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html][home]]            |
|   original   |           [[https://pages.cs.wisc.edu/~horwitz/make/make.pdf][.pdf]]            |
|     fork     | https://justine.lol/make/ |
| alternatives |    [[https://github.com/casey/just][just]] [[https://taskfile.dev/][Task]] [[https://snakemake.github.io/][Snakemake]]    |
|--------------+---------------------------|

- 1976, at Bell Labs
- by Stuart Feldman

* cli

#+begin_src sh
  make [-f Makefile] [VAR="foo"] [OPTIONS] [TARGETS]
#+end_src

- bare run of "make", defaults to running the first target found
- you can give more than 1 target

|-----+----------------------------+-----------+--------------------------------|
| <c> |            <c>             |    <c>    |              <c>               |
| -f  |        --(make)file        |   file    |                                |
| -o  |         --old-file         |  target   |      never remake TARGET       |
| -k  |        --keep-going        |           |         keep on errors         |
| -s  |          --silent          |           |      silent command print      |
| -i  |      --ignore-errors       |           |                                |
| -e  |  --environment-overrides   |           |         env>make vars          |
| -B  |       --always-make        |           |        make ALL targets        |
| -j  |           --jobs           |  n_jobs   |         parallel jobs          |
| -n  |         --dry-run          |           |                                |
| -t  |          --touch           |           | touch targets, without running |
| -d  |          --debug           | [abvijmn] |          print debug           |
|     | --warn-undefined-variables |           |        when referenced         |
| -r  |     --no-builtin-rules     |           |                                |
| -R  |   --no-builtin-variables   |           |                                |
|-----+----------------------------+-----------+--------------------------------|

* language

#+ATTR_HTML: :width 600 :style filter: invert()
#+ATTR_ORG: :width 600
#+CAPTION: from go.embeddedexpert.io
[[./makefile.png]]

- defines a dependency tree (DAG) of ~rules~ (aka recipe)
  - between his structure and dependencies
  - made of ~targets~ (the vertices)
  - final exe is the root vertex

- use ~include MAKEFILE~ to include another Makefile

** target / output

- targets without deps are human made ones
- order does not matter
  - but if multiple % patterns match, will use the last one matched (deps stills stacked?)
- multiple targets: for same dependencies
- recommended phony ones: https://www.gnu.org/software/make/manual/html_node/Standard-Targets.html
  - all, help, clean, check, dist, run, deps, serve, deploy
  - test: make it depend of the final binary
  - (un)install: use PREFIX=/usr/local and DESTDIR

*** special targets

https://www.gnu.org/software/make/manual/html_node/Special-Targets.html
|-------------------+-----------------------------------------------------------|
| .ONESHELL:        | runs all commands the same shell                          |
| .POSIX:           | must be the first line                                    |
| .SUFFIXES:        | disable all default *inference rules*                     |
| .DELETE_ON_ERROR: | make target be deleted if a command fails (NO BY DEFAULT) |
| .PHONY:           | unconditionally make targets given                        |
| .PRECIOUS:        | make target not being deleted, can be a pattern           |
| .SECONDARY:       | with no target, makes all targets secondary               |
|-------------------+-----------------------------------------------------------|

*** default targets

- https://www.gnu.org/software/make/manual/html_node/Catalogue-of-Rules.html
- https://www.gnu.org/software/make/manual/html_node/Suffix-Rules.html
#+begin_src makefile
%:     ; $(CC)  $*.o -o $*
%.c:   ; $(CC)  -c $(CPPFLAGS) $(CFLAGS)
%.cpp: ; $(CXX) -c $(CPPFLAGS) $(CXXFLAGS)
%.o:   ; $(CC) $(LDFLAGS) n.o $(LOADLIBES) $(DLIBS)
#+end_src

** prerequisites / dependency

can be split into different targets with the same name (?
|---+-------------------------------------------------------|
| * | wildcard, filesystem matches, use it with $(wildcard) |
| % | wildcard                                              |
|---+-------------------------------------------------------|

** commands / actions

- uses /bin/sh by default
- TAB indented
- use (\) for long ones
- use (;) to make one command of many
- each one runs on his own shell
- whole makefile fails if a command returns 1
- prefixes
  |-----+------------------------------------------------------|
  | <c> |                                                      |
  |  -  | ignore errors                                        |
  |  @  | [[https://www.gnu.org/software/make/manual/html_node/Echoing.html][not print]] the command, use it to add indent comments |
  |  +  | run even on no-exec mode                             |
  |-----+------------------------------------------------------|

** variables / macros

- are ALWAYS strings
- undefined variables are treated as empty strings (see --warn-undefined-variables)
- order of precedence (see override)
  1) cli
  2) makefile
  3) environment
  4) predefined

*** referencing

#+begin_src makefile
$a            # for length=1 vars
$(ab)         # for length>1 vars
${ab}         # "
$(ab:.cpp=.o) # string replace
#+end_src

*** assignments
- ONLY evaluated when they are used
|-----+--------------------------------------------|
| <r> |                                            |
|   = | dynamic/macro, evaluated each time is used |
|  := | one time, evaluated procedurally           |
| ::= | "                                          |
|  ?= | safe, only if undefined                    |
|  += | appends with a space                       |
|  != | exec shell command and assign it           |
|-----+--------------------------------------------|
*** implicit / predefined / default
https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html
|---------------+-------------------------------------------|
| CC            | For compiler and compiler flags           |
| CXX           | "                                         |
| CFLAGS        | "                                         |
| CPPFLAGS      |                                           |
| CXXFLAGS      |                                           |
| LDFLAGS       | for flags passed to compiler when linking |
| LDLIBS        | For flags about libraries when linking    |
| SHELL         | eg: "bash"                                |
| MAKE_FLAGS    |                                           |
| MAKEFILE_LIST |                                           |
| .SHELLFLAGS   | eg: "-eu -o pipefail -c"                  |
| .RECIPEPREFIX | use instead of tabs                       |
| .DEFAULT_GOAL | default target                            |
|---------------+-------------------------------------------|
*** magic / automatic variables
https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html
|-------+----------------------------------------|
|  <c>  |                                        |
|  $@   | target's name (always one)             |
| $(@D) | target's dir(name)                     |
| $(@F) | target's base(name)                    |
|  $<   | 1st prerequisite                       |
| $(<D) | 1st prerequisite's dir(name)           |
| $(<F) | 1st prerequisite's base(name)          |
|  $^   | all prerequisites                      |
|  $+   | all prerequisites, with dups           |
|  $?   | new prerequisites (than the target)    |
|  $*   | what "%" wildcard matched              |
|  $$   | literal "$"                            |
|  $%   | target's name, WHEN (ar)chive member ? |
|  $Â¦   | ? order-only prerequisites ?           |
|-------+----------------------------------------|

** functions

- https://www.gnu.org/software/make/manual/html_node/Functions.html
- do NOT add spaces between arguments, functions will see it
|---------+------------------------+--------------------------------------------|
|     <r> |          <c>           |                                            |
|   [[https://www.gnu.org/software/make/manual/html_node/Shell-Function.html][shell]] |          cmd           | exec and replaces *\n* with space          |
| [[https://www.gnu.org/software/make/manual/html_node/Foreach-Function.html][foreach]] |  varname, list , text  | foreach V in L, runs and returns each TEXT |
|     [[https://www.gnu.org/software/make/manual/html_node/Let-Function.html][let]] | varname...,[list],text | simple expanded, only in scope             |
|      [[https://www.gnu.org/software/make/manual/html_node/Conditional-Functions.html][if]] |    cond, expr, expr    | conditional expansion, expands only needed |
|      or |    cond, [cond...]     | expands to first non-empty cond            |
|     and |    cond, [cond...]     | expands to last if all non-empty           |
|  intcmp |    l,r[,lp,eqp,rp]     | integer comparison of l & r                |
|---------+------------------------+--------------------------------------------|

*** strings
https://www.gnu.org/software/make/manual/html_node/Text-Functions.html
|------------+---------------+-------------------------------------------|
|    <c>     |      <c>      |                                           |
|            |               | returns                                   |
|------------+---------------+-------------------------------------------|
|    word    |    n,text     | text[n]                                   |
|  wordlist  |   n,m,text    | text[n:m]                                 |
| firstword  |     text      | text[0]                                   |
|  lastword  |     text      | text[-1]                                  |
|   words    |     text      | len(text)                                 |
|------------+---------------+-------------------------------------------|
| findstring |  needle,text  | "needle" or "" if not in text             |
|   filter   | pat%...,text  | remove words that match "pat%"            |
| filter-out | pat%...,text  | remove words that do NOT match "pat%"     |
|    sort    |     text      | sort words, remove dups                   |
|   strip    |     text      | trim and squash whitespaces               |
|   subst    | from,to,text  | substitute literal words                  |
|  patsubst  | pat,repl,text | substitute pattern% words, text can use * |
|------------+---------------+-------------------------------------------|
*** filenames
https://www.gnu.org/software/make/manual/html_node/File-Name-Functions.html
|-----------+---------------+-------------------------------------------------|
|    <c>    |      <c>      |                                                 |
|   join    | xs... , xs... | zipWith (<>)                                    |
| wildcard  |   glob*Path   | filesystem match, space separated if many       |
| (not)dir  |     xs...     | like shell's basename/dirname                   |
|  abspath  |     xs...     | absolute path, might not exist, no follow links |
| realpath  |     xs...     | absolute path, must exist                       |
| basename  |     xs...     | removes suffix/extension                        |
|  suffix   |     xs...     | extract suffix                                  |
| addsuffix | suffix, xs... |                                                 |
| addprefix | prefix, xs... |                                                 |
|-----------+---------------+-------------------------------------------------|
** control flow

https://www.gnu.org/software/make/manual/html_node/Conditional-Syntax.html
#+begin_src makefile
if(n)def VARNAME
if(n)eq ($(CC),gcc)
else # if...
endif
#+end_src

* snippets

#+CAPTION: Stuart Feldman
#+ATTR_ORG: :width 400
[[./stu4.png]]

- autogenerated *help* target
  #+begin_src makefile
help: # https://blog.ovhcloud.com/pimp-my-makefile/
	@grep '^[^.#]\+:\s\+.*#' Makefile | \
	sed "s/\(.\+\):\s*\(.*\) #\s*\(.*\)/`printf "3[93m"``printf "3[0m"`	 []/" | \
	expand -t20
help: # https://lobste.rs/s/7svvkz/using_bsd_make#c_mar0yk
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m\033[0m\n"} /^[a-zA-Z0-9_-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)
  #+end_src

- run N targets concurrently with *--jobs=N*
  #+begin_src makefile
.PHONY: dev dev/dep1 dev/dep2
dev:; $(MAKE) -j2  dev/dep1 dev/dep2
dev/dep1: sleep 10
dev/dep2: sleep 60
  #+end_src

- dynamically set a variable at runtime (aka inside a target)
  #+begin_src makefile
task1:
	$(eval ROBOTS = $(shell curl example.com/robots.txt))
	@echo $(ROBOTS)
  #+end_src

- set bash pipefail, use either of these
  #+begin_src makefile
 SHELL      = /bin/bash -o pipefail
.SHELLFLAGS = -eu -o pipefail -c
  #+end_src

- *$(foreach)* expansion
  #+begin_src makefile
    dirs := a b c d
    files := $(foreach dir,$(dirs),$(wildcard $(dir)/*))
  #+end_src

- dynamically generating targets, each with their correspondent dependency
  #+begin_src makefile
IMGS   := $(wildcard org/images/*/*.jpg)
THUMBS := $(subst .jpg,.thumb.jpg,$(IMGS))
$(THUMBS): %.thumb.jpg: %.jpg
	convert $< -resize 240x $@
  #+end_src

* gotchas

- [[https://stackoverflow.com/questions/9838384/can-gnu-make-handle-filenames-with-spaces][no support for filenames with spaces]]
- ~=~ assignment is perpetually evaluated (aka a macro definition)
- ~$~ needs to be always escaped with ~$$~ to be sent to commands as such
- ~\t~ for indentation, NOT spaces
- Will *keep* an incomplete target on failure, unless ~.DELETE_ON_ERROR:~
- What is an ~intermediate~ target? And how to stop them from being deleted?

* tools
|------------+-------------------------------------------|
| linter     | [[https://github.com/mrtazz/checkmake][checkmake]] [[https://github.com/mcandre/unmake][unmake]]                          |
| visualizer | [[https://github.com/TomConlin/MakefileViz][MakefileViz]] [[https://github.com/lindenb/makefile2graph][makefile2graph]] [[https://github.com/dnaeon/makefile-graph][makefile-graph]] |
| TAP output | [[https://www.npmjs.com/package/make2tap][make2tap]]                                  |
| library    | [[https://github.com/mitjafelicijan/makext][makext]]                                    |
|------------+-------------------------------------------|
* trivia

** Why the tab in column 1?

#+begin_src
"Yacc was new, Lex was brand new. I hadn't tried either, so I figured
this would be a good excuse to learn. After getting myself snarled up
with my first stab at Lex, I just did something simple with the
pattern newline-tab. It worked, it stayed. And then a few weeks later
I had a user population of about a dozen, most of them friends, and I
didn't want to screw up my embedded base. The rest, sadly, is
history."

-- Stuart Feldman, from "The Art of Unix Programming"
#+end_src
