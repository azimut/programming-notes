clojure https://www.clojure-toolbox.com/
clojure https://clojure.org/community/libraries
clojure https://clojars.org/
clojurescript https://clojurescript.org/community/libraries

- popular way to compile clojurescript https://github.com/thheller/shadow-cljs
- 2d drawing https://github.com/Clojure2D/clojure2d
- webdriver https://github.com/clj-commons/etaoin

|-----------------------+-----+----------------------------------------------|
| Async programming     | 1.9 | https://github.com/clojure/core.async        |
| Logic programming     | 1.4 | https://github.com/clojure/core.logic        |
| Pattern Matching      | 1.1 | https://github.com/clojure/core.match        |
| Cache strategies      | 0.4 | https://github.com/clojure/core.cache        |
| Memoization           | 0.2 | https://github.com/clojure/core.memoize      |
| RRB-Trees             | 0.1 | https://github.com/clojure/core.rrb-vector   |
| Contracts programming | 0.1 | https://github.com/clojure/core.contracts    |
| Type System           | 0.3 | https://github.com/typedclojure/typedclojure |
|-----------------------+-----+----------------------------------------------|

- java.time
  https://stackoverflow.com/questions/62969992/clojure-whats-the-way-to-have-current-time-string-with-babashka-with-least-dep

* Web
- https://www.youtube.com/watch?v=wEjNWUMCX78&list=PLVi9lDx-4C_T7jkihlQflyqGqU4xVtsfi
** hiccup
- https://clojurebridgelondon.github.io/community-docs/docs/web-applications/hiccup/
- https://github.com/yokolet/hiccup-samples/blob/master/src/hiccup_templating/views/contents.clj
- https://github.com/weavejester/hiccup/blob/master/src/hiccup/element.clj
** luminus template dependencies
| Name               | Description                                                                  | Home                                                    |
|--------------------+------------------------------------------------------------------------------+---------------------------------------------------------|
| bulma              | CSS framework                                                                | https://bulma.io/                                       |
| chesire            | json encoding/decoding                                                       | https://github.com/dakrone/cheshire                     |
| conman             | managing database connections                                                | https://github.com/luminus-framework/conman             |
| cprop              | likes properties, environments, configs, profiles..                          | https://github.com/tolitius/cprop                       |
| expound            | Human-optimized error messages for clojure.spec                              | https://github.com/bhb/expound                          |
| http-kit           | HTTP client+server                                                           | https://github.com/http-kit/http-kit                    |
| h2                 | H2 is a database distributed as library...                                   | http://www.h2database.com/html/main.html                |
| java-time          | wrapper for Java 8 Date-Time API.                                            | https://github.com/dm3/clojure.java-time                |
| logback-classic    | successor to the popular log4j                                               | http://logback.qos.ch/                                  |
| luminus-http-kit   | HTTP Kit adapter for Luminus                                                 | https://github.com/luminus-framework/luminus-http-kit   |
| luminus-migrations | For DB migrations. The library is a command line wrapper for Migratus.       | https://github.com/luminus-framework/luminus-migrations |
| luminus-transit    | transit serialization helpers for Luminus                                    | https://github.com/luminus-framework/luminus-transit    |
| markdown-clj       | Markdown parser in Clojure                                                   | https://github.com/yogthos/markdown-clj                 |
| material-icons     | Webjars. A font for the web.                                                 | https://google.github.io/material-design-icons/         |
| mount              | managing app state since (reset)                                             | https://github.com/tolitius/mount                       |
| muuntaja           | Clojure library for fast http api format negotiation, encoding and decoding. | https://github.com/metosin/muuntaja                     |
| nrepl              | network REPL                                                                 | https://github.com/nrepl/nrepl                          |
| reitit             | data-driven router                                                           | https://github.com/metosin/reitit                       |
| ring               | HTTP server                                                                  | https://github.com/ring-clojure/ring                    |
| ring-webjars       | Ring middleware to serve static assets from WebJars.                         | https://github.com/weavejester/ring-webjars             |
| ring-http-response | Handling HTTP Statuses with Clojure(Script)                                  | https://github.com/metosin/ring-http-response           |
| selmer             | Templating system                                                            | https://github.com/yogthos/Selmer                       |
| struct             | Structural/Scheme validation                                                 | https://github.com/funcool/struct                       |
|--------------------+------------------------------------------------------------------------------+---------------------------------------------------------|
** threeagent
- https://martin.varela.fi/2019/11/01/webgl-react-and-no-javascript/
  https://www.youtube.com/watch?v=myigRnZHhTw
** quil
- https://github.com/quil/quil-templates/
- https://gist.github.com/mmzsource/340322e6ff4b17be8b7dcb84d16d5172
#+begin_src
:profiles {:dev {:source-paths ["src"]
                   :repl-options {:nrepl-middleware
                                  [cider.piggieback/wrap-cljs-repl]}
                   :dependencies [[figwheel-sidecar "0.5.19"]
                                  [cider/piggieback "0.4.1"]]}}
#+end_src
- https://www.reddit.com/r/Clojure/comments/a69wse/setup_dynamic_clojurescript_and_quil_environment/  
** Overtone
- https://github.com/pjagielski/disclojure

* core.async

- Implement a CSP with channels
- first class channels
- types of channels: unbuffered, fixed buffers, sliding, dropping

#+begin_src clojure
  (thread body) ; - real thread, real blocking
  (go body...)  ; - IOC thread, state-machine, park/blocks/"await"
  (future body) ; fire and forget on another thread
  (timeout ms)  ; autoclosing channel
  (chan)        ; unbuffered
  (chan n)      ; buffered n
  (chan buffer)
  (dropping-buffer N) ; non-blocking buffer
  (slidding-buffer N) ; non-blocking buffer
  (>! ch val)   ; put/parking
  (>!! ch val)  ; put/parking blocking (not in JS)
  (<!  ch)      ; take
  (<!! ch)      ; take blocking
  (close ch)
  (alts! ops)                 ; "choice", wait on multiple things, completes at most 1
  (alts!! [ch1 ch2])          ; blocks, returns a tuple of a value and the channel where it got it
  (alts!! [a (timeout 1000)]) ; take a value from "a" or timeout after 1000
  (alts!! [[a 42]             ; write 42
           (timeout 1000)])   ; or timeout
  (alts!! [a]                 ; non-blocking take
          :default :nothing-found)
  (let [[val chan] (alts! [ch1 [ch2 100]])] ; we try to get from ch1, and put into ch2
    val)
  (alt!         ; alts + cond
    [c t]       ([val ch] (foo ch val))
    x           ([v] v)
    [[out val]] :wrote
    :default    42)

  (put!  ch val)      ; async - need NOT to be in (go)
  (put!  ch val cb)   ; callback gets called when it's put
  (take! ch cb)       ; async - need NOT to be in (go)
                      ; callback gets throw away once it receives ONE msg
  (async/map fn chans) ; take 1 item from each channel, apply fn, returns a new chan
  (mult chan)         ; allow channel rebroadcasting
  (tap mult chan)

  ;; pub/sub
  (pub chan fn)  ; fn applied to every msg
#+end_src
