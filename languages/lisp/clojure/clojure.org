|---------------+------------------------------------|
| home          | https://clojure.org/               |
| docs official | https://clojuredocs.org/           |
| docs 3rd      | https://cljdoc.org/                |
| cheatsheet    | https://clojure.org/api/cheatsheet |
| quickref      | https://clojuredocs.org/quickref   |
|---------------+------------------------------------|

Community Resources: https://clojure.org/community/resources

EDN (extensible data notation): https://clojure.github.io/clojure/clojure.edn-api.html

- Blog https://www.juxt.pro/blog
- https://github.com/mfikes/esprit ESP
- Transforming Data with ClojureScriptÂ¶ https://langintro.com/cljsbook/
- https://github.com/magomimmo/modern-cljs
- https://www.cs.utexas.edu/users/novak/cs378contents.html
- https://github.com/bbatsov/clojure-style-guide
- Live Notebooks https://clerk.vision/
- C++ Dialect https://github.com/jank-lang/jank

- exercises
  - https://exercism.io/tracks/clojure
  - https://github.com/functional-koans/clojure-koans/
  - https://github.com/4clojure/4clojure

* language

- "The use of keyword argument had fallen in and out of fashin in the Clojure comunity over the years"
- One-pass compiler https://gist.github.com/reborg/dc8b0c96c397a56668905e2767fd697f#why-clojure-compiler-is-single-pass-arent-many-possible-optimizations-lost-this-way
- code organized in ~namespaces~
- EDN = Extensible Data Notation
- (binding) is like Bagger's (with-setf) https://clojuredocs.org/clojure.core/binding
- (comp)    is like Alexandria's (compose) https://clojuredocs.org/clojure.core/comp

** require/import
| (:require)                      |   |
|---------------------------------+---|
| [clojure.string :as str]        |   |
| [clojure.string :refer [split]] |   |
|---------------------------------+---|
** Control Flow

- (do)
- (if) (when) (cond) (dotimes)
  - on if, else is optional
  - cond/:else
- (case)  - aka "switch", cases must be compile time literals
- (doseq) - can iterate over >1 sequence at the time, like nested for loops
- (for) aka "list comprehensions"
- (recur) does not consume stack, must be on tail position

- (loop) (recur)
  #+begin_src clojure
    (loop [i 0]
      (if (< i 10)
        (recur (inc i))
        i))
  #+end_src

- (defn) (recur)
  #+begin_src clojure
    (defn increase [i]
      (if (< i 10)
        (recur (inc i))
        i))
  #+end_src

- try/catch/finally
  #+begin_src clojure
    (try
      (/ 2 1)
      (catch ArithmeticException e
        "divide by zero")
      (finally
        (println "cleanup")))
  #+end_src

- throw Java data
  #+begin_src clojure
    (try
     (throw (Exception. "something went wrong"))
     (catch Exception e (.getMessage e)))
  #+end_src

- try/ex-info/ex-data
  #+begin_src clojure
    (try
      (throw (ex-info "There was a problem" {:detail 42}))
      (catch Exception e
        (prn (:detail (ex-data e)))))
  #+end_src

** Operators
- (not=)
  (==) to compare irrespective of the exact type
  (=)
** Types
*** Primitive / Literals
|------------+-------------------------------------------|
| "foo"      | java.lang.String                          |
| #"a*b"     | java.util.regex.Pattern                   |
| true/false |                                           |
| nil        |                                           |
|------------+-------------------------------------------|
| ##Inf      | symbolic values                           |
| ##-Inf     |                                           |
| ##NaN      |                                           |
|------------+-------------------------------------------|
| \f         | java.lang.Character                       |
| \newline   |                                           |
| \uNNNN     | unicode                                   |
| \oNNN      | octal                                     |
|------------+-------------------------------------------|
| 3.14       | doubles (64bit) (~15-17 digits precision) |
| 3.14M      | big decimal (arbitrary precision)         |
|------------+-------------------------------------------|
| 42         | integer (32bit)                           |
| 42N        | big integer                               |
| 052        | (octal)                                   |
| 2r0101110  |                                           |
| 8r52       |                                           |
| 0x2a       |                                           |
|------------+-------------------------------------------|
- char https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Character.html
  - Character/isLetter
  - .isLetter https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Character.html#isLetter(char)
  - .isISOControl https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#isISOControl-char-

- strings https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html
  * can destructure like lists
  * are UTF-16
  * count empty? str subs seq keyword includes?
    bigint bigdec parse-long parse-double
    (binding [*read-eval* false] (read-string "#\"[abc]\""))
    (with-out-str)
  * format https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Formatter.html
  * edn/read-string
  * pp/cl-format
  * str/blank? str/join str/index-of str/last-index-of
    str/escape
    str/lower-case str/upper-case str/capitalize
    str/split str/split-lines
    str/trim str/triml str/trimr
  * .indexOf .lastIndexOf .getBytes
    Integer/parseInt Float/parseFloat Long/parseLong Double/parseDouble

- regex https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/regex/Pattern.html
  - re-find   , simple matching
  - re-matches, returns the first *groups* that satisfies the match
  - re-seq    , returns seq of all matching *groups*
  - str/replace

*** Complex

|----------+----------------------+------------+---------------------+-------------+-------------+--------------------------------------------------|
|          | constructing         | access     | update              | add         | remove      | destructuring                                    |
|----------+----------------------+------------+---------------------+-------------+-------------+--------------------------------------------------|
| list     | '(1 2 3)             | first/rest |                     | (conj l 2)  |             | [one _ & tail :as all]                           |
|          | '(~foo 2)            | peek/pop   |                     |             |             |                                                  |
|          | (quote 1 2 3)        |            |                     |             |             |                                                  |
|          | (list 1 2 3)         |            |                     |             |             |                                                  |
|----------+----------------------+------------+---------------------+-------------+-------------+--------------------------------------------------|
| vector   | [1 2 3]              | (get v 0)  | (assoc v 2 9)       | (conj v 2)  |             | sequential destructuring                         |
|          | (vector 1 2 3)       |            |                     |             |             | associative destructuring                        |
|----------+----------------------+------------+---------------------+-------------+-------------+--------------------------------------------------|
| hash-map | {"age" 12}           |            |                     |             |             | {age "age" :or {age "Not age provided"} :as all} |
|          |                      |            |                     |             |             | {age :age}                                       |
|          |                      |            |                     |             |             | {age 0}                                          |
|          |                      |            |                     |             |             | {:keys [age name]}                               |
|          |                      |            |                     |             |             | {:strs [age]}                                    |
|          |                      |            |                     |             |             | {:syms [last-name]}                              |
|          |                      |            |                     |             |             | [val & {:keys [debug verbose]                    |
|          |                      |            |                     |             |             | ________:or {debug false, verbose false}]        |
|          |                      |            |                     |             |             | {:keys [hobby/hobbies] :person/keys [name age]}  |
|----------+----------------------+------------+---------------------+-------------+-------------+--------------------------------------------------|
| record   | (defrecord rr [age]) |            |                     |             |             | "                                                |
|----------+----------------------+------------+---------------------+-------------+-------------+--------------------------------------------------|
| sets     | #{1 2 3}             | (get s :a) |                     | (conj s :a) | (disj s :a) |                                                  |
|          | (hash-set 1 2 3)     | (s :a)     |                     |             |             |                                                  |
|          | (sorted-set 1 2 3)   |            |                     |             |             |                                                  |
|          | (set [1 2 3])        |            |                     |             |             |                                                  |
|----------+----------------------+------------+---------------------+-------------+-------------+--------------------------------------------------|
| atoms    | (atom ())            | (deref)    | (swap! foo conj :x) |             |             |                                                  |
|          |                      | @foo       | (reset! foo ())     |             |             |                                                  |
|          |                      |            | (compare-and-set!)  |             |             |                                                  |
|----------+----------------------+------------+---------------------+-------------+-------------+--------------------------------------------------|

- sets
  - union/difference/intersection
  - select/index/rename/join
- atoms
  - shared, synchronous, independent state
  - they are a reference
  - swap!, internally uses compare-and-set!
  - set-validator! get-validator
  - add-watch      remove-watch
  - swap-vals!     reset-vals!
- list
  - grow at front
  - implemented as SLL
  - contains mixed types
- vector
  - grow at end
  - implemented as maphash
  - contains mixed types
- hash-map
  - contains mixed types

** Standard Library

- https://clojure.github.io/clojure/
  https://clojuredocs.org/clojure.zip
  https://clojure.github.io/clojure/clojure.zip-api.html

|---------------+------------------------------------------------------------------|
| clojure       |                                                                  |
|---------------+------------------------------------------------------------------|
| .core         | Fundamental library of the Clojure language                      |
| .datafy       | Functions to turn objects into data. Alpha, subject to change    |
| .math         | Clojure wrapper functions for java.lang.Math static methods.     |
|---------------+------------------------------------------------------------------|
| .walk         |                                                                  |
| .zip          | Functional hierarchical zipper, with navigation, editing, and enumeration. |
| .sh           |                                                                  |
| .xml          | XML reading/writing.                                             |
| .test         | A unit testing framework.                                        |
|---------------+------------------------------------------------------------------|
| .template     | Macros that expand to repeated copies of a template expression.  |
| .string       | Clojure String utilities                                         |
| .pprint       | A Pretty Printer for Clojure                                     |
| .set          | Set operations such as union/intersection.                       |
| .stacktrace   | Print stack traces oriented towards Clojure, not Java.           |
|---------------+------------------------------------------------------------------|
| .main         | Top-level main function for Clojure *REPL* and scripts.          |
| .repl         | Utilities meant to be used interactively at the *REPL*           |
| .core.server  |                                                                  |
|---------------+------------------------------------------------------------------|
| .data         | Non-core data functions.                                         |
| .edn          |                                                                  |
| .instant      |                                                                  |
|---------------+------------------------------------------------------------------|
| .java.javadoc | A *REPL* helper to quickly open javadocs.                        |
| .java.browse  | Start a web browser from Clojure                                 |
| .java.shell   | Conveniently launch a sub-process providing its stdin and collecting its stdout |
| .java.io      | This file defines polymorphic I/O utility functions for Clojure. |
| .inspector    | Graphical object inspector for Clojure data structures.          |
| .reflect      |                                                                  |
|---------------+------------------------------------------------------------------|


* snippets
** memoize
https://clojure.org/reference/atoms
#+begin_src clojure
(defn memoize
  [f]
  (let [mem (atom {})]
    (fn [& args]
      (if-let [e (find @mem args)]
        (val e)
        (let [ret (apply f args)]
          (swap! mem assoc args ret)
          ret)))))
#+end_src

** open a file
#+begin_src clojure
  (with-open [f (clojure.java.io/writer "/tmp/new")]
    (.write f "some text"))
#+end_src

* codebases

- https://shaunlebron.github.io/t3tr0s-slides/#0
