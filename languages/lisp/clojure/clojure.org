Guys what about?:
Core:
Official Website: https://clojure.org/
Documentation: https://clojuredocs.org/
Cheat-sheet: https://clojure.org/api/cheatsheet
Community Resources: https://clojure.org/community/resources
Clojure Libraries: https://clojars.org/
Libraries Documentation: https://cljdoc.org/

Practice:
4Clojure: https://www.4clojure.com/
Koans: https://github.com/functional-koans/clojure-koans
Clojure problems on Exercism: https://exercism.io/tracks/clojure

Tools:
Clojure Toolbox: https://www.clojure-toolbox.com/
EDN (extensible data notation): https://clojure.github.io/clojure/clojure.edn-api.html

- Blog https://www.juxt.pro/blog
- https://github.com/mfikes/esprit ESP
- Transforming Data with ClojureScriptÂ¶ https://langintro.com/cljsbook/
- https://github.com/magomimmo/modern-cljs
- https://www.cs.utexas.edu/users/novak/cs378contents.html
- Simulating Machines in Clojure https://stopa.io/post/255
- https://github.com/functional-koans/clojure-koans/
- https://github.com/bbatsov/clojure-style-guide
- https://clojuredocs.org/quickref
- Live Notebooks https://clerk.vision/
- (binding) is like Bagger's (with-setf) https://clojuredocs.org/clojure.core/binding
- (comp)    is like Alexandria's (compose) https://clojuredocs.org/clojure.core/comp
* Standard Library
- https://clojure.github.io/clojure/
  https://clojuredocs.org/clojure.zip
  https://clojure.github.io/clojure/clojure.zip-api.html
| clojure       |                                                                                 |
|---------------+---------------------------------------------------------------------------------|
| .core         | Fundamental library of the Clojure language                                     |
| .data         | Non-core data functions.                                                        |
| .datafy       | Functions to turn objects into data. Alpha, subject to change                   |
| .edn          |                                                                                 |
| .inspector    | Graphical object inspector for Clojure data structures.                         |
| .instant      |                                                                                 |
| .java.browse  | Start a web browser from Clojure                                                |
| .java.io      | This file defines polymorphic I/O utility functions for Clojure.                |
| .java.javadoc | A *REPL* helper to quickly open javadocs.                                       |
| .java.shell   | Conveniently launch a sub-process providing its stdin and collecting its stdout |
| .main         | Top-level main function for Clojure *REPL* and scripts.                         |
| .math         | Clojure wrapper functions for java.lang.Math static methods.                    |
| .pprint       | A Pretty Printer for Clojure                                                    |
| .reflect      |                                                                                 |
| .repl         | Utilities meant to be used interactively at the *REPL*                          |
| .set          | Set operations such as union/intersection.                                      |
| .stacktrace   | Print stack traces oriented towards Clojure, not Java.                          |
| .string       | Clojure String utilities                                                        |
| .template     | Macros that expand to repeated copies of a template expression.                 |
| .test         | A unit testing framework.                                                       |
| .walk         |                                                                                 |
| .xml          | XML reading/writing.                                                            |
| .zip          | Functional hierarchical zipper, with navigation, editing, and enumeration.      |
|---------------+---------------------------------------------------------------------------------|
* Types
|     |         | Implementation     | Types |
|-----+---------+--------------------+-------|
| ()  | lists   | singly-linked list | mixed |
| []  | vector  | hash-map like      | mixed |
| {}  | hashmap |                    | mixed |
| #{} | sets    |                    |       |
|-----+---------+--------------------+-------|
* Podcasts
- Podcast - https://clojuredesign.club/
- Podcast - Clojurescript - https://open.spotify.com/show/3lnWCN0PAAywiN7gaxNzKZ
* Personalities
** Rich Hickey
- Talks https://www.youtube.com/playlist?list=PLZdCLR02grLrEwKaZv-5QbUzK0zGKOOcr
- https://github.com/tallesl/Rich-Hickey-fanclub
* Tools
- nrepl, inserted with cider-jack-in, but needed on projects if "lein run"
  https://docs.cider.mx/cider/0.26/basics/middleware_setup.html
** GraalVM
- native-image on deps.edn https://github.com/taylorwood/clj.native-image
  - Example https://gist.github.com/taylorwood/23d370f70b8b09dbf6d31cd4f27d31ff
  - AWS Example https://github.com/latacora/lamed-sample-app
  - Lein Plugin https://github.com/taylorwood/lein-native-image
- https://clojure.atlassian.net/browse/CLJ-2582
- https://github.com/clj-easy/graal-docs
- https://www.graalvm.org/reference-manual/native-image/StaticImages/
- https://www.innoq.com/en/blog/native-clojure-and-graalvm/
- https://www.redpill-linpro.com/techblog/2021/03/31/faster-clojure-with-graalvm.html
* Overtone
- https://github.com/pjagielski/disclojure
* Libraries
- java.time
  https://stackoverflow.com/questions/62969992/clojure-whats-the-way-to-have-current-time-string-with-babashka-with-least-dep
** Web
- https://www.youtube.com/watch?v=wEjNWUMCX78&list=PLVi9lDx-4C_T7jkihlQflyqGqU4xVtsfi
*** hiccup
- https://clojurebridgelondon.github.io/community-docs/docs/web-applications/hiccup/
- https://github.com/yokolet/hiccup-samples/blob/master/src/hiccup_templating/views/contents.clj
- https://github.com/weavejester/hiccup/blob/master/src/hiccup/element.clj
*** threeagent
- https://martin.varela.fi/2019/11/01/webgl-react-and-no-javascript/
  https://www.youtube.com/watch?v=myigRnZHhTw
*** quil
- https://github.com/quil/quil-templates/
- https://gist.github.com/mmzsource/340322e6ff4b17be8b7dcb84d16d5172
#+begin_src
:profiles {:dev {:source-paths ["src"]
                   :repl-options {:nrepl-middleware
                                  [cider.piggieback/wrap-cljs-repl]}
                   :dependencies [[figwheel-sidecar "0.5.19"]
                                  [cider/piggieback "0.4.1"]]}}
#+end_src
- https://www.reddit.com/r/Clojure/comments/a69wse/setup_dynamic_clojurescript_and_quil_environment/  
