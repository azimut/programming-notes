- Code: 2022 htmx hiccup server example https://github.com/babashka/babashka/blob/master/examples/htmx_todoapp.clj
- differences https://github.com/babashka/babashka#differences-with-clojure
- Libraries
  https://babashka.org/toolbox/
  https://github.com/babashka/babashka/blob/master/doc/projects.md#libraries
- Pods
  https://github.com/babashka/pod-registry
  https://book.babashka.org/#pods
- Edit Conf https://github.com/exercism/babashka/blob/main/docs/editors.md
  > bb --nrepl-server
- Doc https://book.babashka.org/
- Implementation: Uses this to interpret a (large) subset of clojure https://github.com/babashka/SCI
  - As such the code is NOT compiled.

- Article: https://rattlin.blog/bbgum.html
- Channel: https://www.youtube.com/@babashkatv/videos
- tool: cli json/yaml/edn convert https://github.com/borkdude/jet

* flags

|----------+--------------------------------------------------------------|
| --stream | from lazy seq, to each element by itself (aka no map needed) |
| -i       | *input* becomes a lazy seq of strings from stdin             |
| -I       | *input* becomes a lazy seq of parsed EDN from stdin          |
| -o       | stdout one entry per line                                    |
| -O       | stdout one entry per line, as EDN                            |
|----------+--------------------------------------------------------------|

* Native Image Building

- you could get a smaller bb binary size by building bb yourself (?
  https://github.com/babashka/babashka/blob/306842857803f272f0ac900f54710c61e5717b06/doc/dev.md

- bb release binary size:
  - v1.3.189 - 63M
  - v1.3.190 - 77M

- caxa/babashka (with bb in that directory) https://github.com/leafac/caxa/issues/44
  #+begin_src shell
  $ npx caxa --input . --output hello -- "{{caxa}}/bb" "{{caxa}}/foo.clj"
  $ ./hello # 60M (of a 63M bb, or 62M of a 77M bb)
  #+end_src

* Example: newspod.clj - sqlite3
#+begin_src clojure
  ;; TODO: gh-actions
  ;; https://stackoverflow.com/questions/24098792/how-to-force-github-pages-build/61706020#61706020

  (require '[clojure.string :as str])
  (require '[babashka.tasks :refer [shell]])
  (require '[cheshire.core :refer [parse-string]])
  (require '[hiccup.core :refer [html]])


  (def URLS "/home/sendai/.newsboat/urls")
  (def DB "/home/sendai/.newsboat/cache.db")

  ;; TODO: parse "exec:~/" lines
  ;; TODO: ensure http urls is the only thing returned
  ;; TODO: get feed title from sqlite3/rss_feed
  (defn get-feeds []
    (->> (slurp URLS)
         (str/split-lines)
         (filter #(not (str/starts-with? % "#")))
         (filter #(not (str/starts-with? % "\"")))
         (filter #(str/includes? % " podcast"))
         (map #(str/split % #" "))
         (map first)))

  ;; TODO: content
  (defn get-episodes [feed]
    (->> (shell {:out :string} "sqlite3" DB ".mode json"
                (format "SELECT title, enclosure_url, pubDate
                           FROM rss_item
                          WHERE feedUrl = '%s'
                       ORDER BY pubDate DESC
                          LIMIT 2"
                        feed))
         :out parse-string))

  (defn now []
    (.format (java.time.ZonedDateTime/now)
             (java.time.format.DateTimeFormatter/ofPattern "yyyy-MM-dd")))

  (html
   [:head [:title (format "Newspod %s" (now))]]
   [:body [:table]])
#+end_src
