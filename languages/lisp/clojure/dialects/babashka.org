- home https://babashka.org/
- docs https://book.babashka.org/
- differences https://github.com/babashka/babashka#differences-with-clojure
- author's
  - https://x.com/borkdude
  - https://github.com/borkdude

- Libraries
  - https://babashka.org/toolbox/
  - https://github.com/babashka/babashka/blob/master/doc/projects.md#libraries
  - https://github.com/babashka/pod-registry
  - https://book.babashka.org/#pods

- Edit Conf https://github.com/exercism/babashka/blob/main/docs/editors.md
  > bb --nrepl-server

- Channel: https://www.youtube.com/@babashkatv/videos
- Codebase: 2022 htmx hiccup server example https://github.com/babashka/babashka/blob/master/examples/htmx_todoapp.clj
- tool: cli json/yaml/edn convert https://github.com/borkdude/jet

* articles

- 23 https://endot.org/2023/12/30/writing-babashka-scripts/
- https://blog.agical.se/en/posts/changing-my-mind--converting-a-script-from-bash-to-babashka/
- https://rattlin.blog/bbgum.html

* stdlib
https://book.babashka.org/
|-----------------------+------------------------------------+-----------|
| library               | description                        | aliased   |
|-----------------------+------------------------------------+-----------|
| [[https://github.com/clojure/test.check][clojure.test.check]]    | quickcheck for clojure             |           |
| [[https://github.com/clojure/core.rrb-vector][core.rrb-vector]]       | vector fast appending              |           |
| [[https://clojure.github.io/core.async/][clojure.core.async]]    | async                              | async     |
| [[https://github.com/clojure/core.match][clojure.core.match]]    | pattern matching                   |           |
| [[https://github.com/nrepl/bencode][bencode.core]]          | a data format                      | bencode   |
| [[https://github.com/cognitect/transit-clj][cognitect.transit]]     | a data format                      | transit   |
| [[https://github.com/clojure/tools.logging][clojure.tools.logging]] | logging                            |           |
| [[https://github.com/taoensso/timbre][timbre]]                | logging                            |           |
|-----------------------+------------------------------------+-----------|
| [[https://github.com/babashka/cli][babashka.cli]]          | CLI arg parsing                    |           |
| [[https://github.com/babashka/fs][babashka.fs]]           | file system manipulation           |           |
| [[https://github.com/babashka/process][babashka.process]]      | shelling out to external processes |           |
| [[https://github.com/clojure/tools.cli][clojure.tools.cli]]     | Command-line processing            | tools.cli |
|-----------------------+------------------------------------+-----------|
| [[https://github.com/clojure/data.xml][clojure.data.xml]]      | xml                                | xml       |
| [[https://github.com/clojure/data.csv][clojure.data.csv]]      | csv                                | csv       |
| [[https://github.com/clj-commons/clj-yaml][clj-yaml.core]]         | yaml                               | yaml      |
| [[https://github.com/dakrone/cheshire][cheshire.core]]         | json                               | json      |
|-----------------------+------------------------------------+-----------|
| [[https://github.com/yogthos/Selmer][Selmer]]                | text templating                    |           |
| [[https://github.com/weavejester/hiccup/][hiccup[2].core]]        | html rendering                     |           |
| [[https://github.com/babashka/http-client][babashka.http-client]]  | http client                        |           |
| [[https://github.com/http-kit/http-kit][org.httpkit.client]]    | http client                        |           |
| [[https://github.com/http-kit/http-kit][org.httpkit.server]]    | http server                        |           |
|-----------------------+------------------------------------+-----------|
| [[https://github.com/clj-commons/rewrite-clj][rewrite-clj]]           | metaprogramming                    |           |
| [[https://github.com/borkdude/edamame][edamame]]               | metaprogramming                    |           |
|-----------------------+------------------------------------+-----------|

* flags
|----------+--------------------------------------------------------------|
| --stream | from lazy seq, to each element by itself (aka no map needed) |
| -i       | *input* becomes a lazy seq of strings from stdin             |
| -I       | *input* becomes a lazy seq of parsed EDN from stdin          |
| -o       | stdout one entry per line                                    |
| -O       | stdout one entry per line, as EDN                            |
|----------+--------------------------------------------------------------|
* Native Image Building

- you could get a smaller bb binary size by building bb yourself (?
  https://github.com/babashka/babashka/blob/306842857803f272f0ac900f54710c61e5717b06/doc/dev.md

- bb release binary size:
  - v1.3.189 - 63M
  - v1.3.190 - 77M

- caxa/babashka (with bb in that directory) https://github.com/leafac/caxa/issues/44
  #+begin_src shell
  $ npx caxa --input . --output hello -- "{{caxa}}/bb" "{{caxa}}/foo.clj"
  $ ./hello # 60M (of a 63M bb, or 62M of a 77M bb)
  #+end_src

* Example: newspod.clj - sqlite3
#+begin_src clojure
  ;; TODO: gh-actions
  ;; https://stackoverflow.com/questions/24098792/how-to-force-github-pages-build/61706020#61706020

  (require '[clojure.string :as str])
  (require '[babashka.tasks :refer [shell]])
  (require '[cheshire.core :refer [parse-string]])
  (require '[hiccup.core :refer [html]])


  (def URLS "/home/sendai/.newsboat/urls")
  (def DB "/home/sendai/.newsboat/cache.db")

  ;; TODO: parse "exec:~/" lines
  ;; TODO: ensure http urls is the only thing returned
  ;; TODO: get feed title from sqlite3/rss_feed
  (defn get-feeds []
    (->> (slurp URLS)
         (str/split-lines)
         (filter #(not (str/starts-with? % "#")))
         (filter #(not (str/starts-with? % "\"")))
         (filter #(str/includes? % " podcast"))
         (map #(str/split % #" "))
         (map first)))

  ;; TODO: content
  (defn get-episodes [feed]
    (->> (shell {:out :string} "sqlite3" DB ".mode json"
                (format "SELECT title, enclosure_url, pubDate
                           FROM rss_item
                          WHERE feedUrl = '%s'
                       ORDER BY pubDate DESC
                          LIMIT 2"
                        feed))
         :out parse-string))

  (defn now []
    (.format (java.time.ZonedDateTime/now)
             (java.time.format.DateTimeFormatter/ofPattern "yyyy-MM-dd")))

  (html
   [:head [:title (format "Newspod %s" (now))]]
   [:body [:table]])
#+end_src

* Issues

- PRO: html generation
- Flaky (untested) libraries
- Precompiled binary (or pods?) can have issues on my old PC. (see also https://github.com/babashka/pod-registry/issues/53 )
  - With this
    #+begin_src clojure
      (require '[babashka.pods :as pods])
      (pods/load-pod 'com.github.jackdbd/jsoup "0.4.0")
    #+end_src
  - Returns
    #+begin_src
    Please rebuild the executable with an appropriate setting of the -march option.
    The current machine does not support all of the following CPU features that are required by the image:
       [CX8, CMOV, FXSR, MMX, SSE, SSE2, SSE3, SSSE3, SSE4_1, SSE4_2, POPCNT, LZCNT, AVX, AVX2, BMI1, BMI2, FMA].
    #+end_src
