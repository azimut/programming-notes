Guys what about?:
Core:
Official Website: https://clojure.org/
Documentation: https://clojuredocs.org/
Cheat-sheet: https://clojure.org/api/cheatsheet
Community Resources: https://clojure.org/community/resources
Clojure Libraries: https://clojars.org/
Libraries Documentation: https://cljdoc.org/

Practice:
4Clojure: https://www.4clojure.com/
Koans: https://github.com/functional-koans/clojure-koans
Clojure problems on Exercism: https://exercism.io/tracks/clojure

Tools:
Clojure Toolbox: https://www.clojure-toolbox.com/
EDN (extensible data notation): https://clojure.github.io/clojure/clojure.edn-api.html

- Blog https://www.juxt.pro/blog
- https://github.com/mfikes/esprit ESP
- Transforming Data with ClojureScript¶ https://langintro.com/cljsbook/
- https://github.com/magomimmo/modern-cljs
- https://www.cs.utexas.edu/users/novak/cs378contents.html
- Simulating Machines in Clojure https://stopa.io/post/255
- https://github.com/functional-koans/clojure-koans/
- https://github.com/bbatsov/clojure-style-guide
- https://clojuredocs.org/quickref
* Notebooks
- Live Notebooks https://clerk.vision/
* Babashka
- Edit Conf https://github.com/exercism/babashka/blob/main/docs/editors.md
  > bb --nrepl-server
- Doc https://book.babashka.org/
- Uses this to interpret a (large) subset of clojure https://github.com/babashka/SCI
  - As such the code is NOT compiled.
* Courses
- [O'Reilly Media Infinite Skills / Adam Bard / Stuart Halloway / Neal Ford] Learning path: Clojure Fundamentals (Learning Clojure, Clojure Inside Out) [2016, ENG]
  https://rutracker.org/forum/viewtopic.php?t=5354881
- Building Microservices with Clojure Training Video
  https://rutracker.org/forum/viewtopic.php?t=5053153
* Podcasts
- Podcast - https://clojuredesign.club/
- Podcast - Clojurescript - https://open.spotify.com/show/3lnWCN0PAAywiN7gaxNzKZ
* Videos
- Course - Brian Will - the Clojure language - https://www.youtube.com/playlist?list=PLAC43CFB134E85266
- Clojure Study Group - https://www.youtube.com/playlist?list=PLpr9V-R8ZxiDjyU7cQYWOEFBDR1t7t0wv
- ClojuRU 2019 - https://www.youtube.com/playlist?list=PLvf-wiCQYkAVvrZr53Upxti9Hr3t7V4bW
- Fulcro – Part 1: Getting Started https://www.youtube.com/watch?v=wEjNWUMCX78
** Channel
- London Clojurians https://www.youtube.com/channel/UC-pYfofTyvVDMwM4ttfFGqw
- on the code again https://www.youtube.com/channel/UCKlYSDBb1KBcZyCRbniW1ig
- Sci Cloj https://www.youtube.com/c/SciCloj/videos
- re:clojure https://www.youtube.com/c/reclojure/videos
* Personalities
** Rich Hickey
- Talks https://www.youtube.com/playlist?list=PLZdCLR02grLrEwKaZv-5QbUzK0zGKOOcr
- https://github.com/tallesl/Rich-Hickey-fanclub
* Tools
- nrepl, inserted with cider-jack-in, but needed on projects if "lein run"
  https://docs.cider.mx/cider/0.26/basics/middleware_setup.html
** GraalVM
- native-image on deps.edn https://github.com/taylorwood/clj.native-image
  - Example https://gist.github.com/taylorwood/23d370f70b8b09dbf6d31cd4f27d31ff
  - AWS Example https://github.com/latacora/lamed-sample-app
  - Lein Plugin https://github.com/taylorwood/lein-native-image
- https://clojure.atlassian.net/browse/CLJ-2582
- https://github.com/clj-easy/graal-docs
- https://www.graalvm.org/reference-manual/native-image/StaticImages/
- https://www.innoq.com/en/blog/native-clojure-and-graalvm/
- https://www.redpill-linpro.com/techblog/2021/03/31/faster-clojure-with-graalvm.html
* Web
- https://www.youtube.com/watch?v=wEjNWUMCX78&list=PLVi9lDx-4C_T7jkihlQflyqGqU4xVtsfi
** threeagent
- https://martin.varela.fi/2019/11/01/webgl-react-and-no-javascript/
  https://www.youtube.com/watch?v=myigRnZHhTw
** quil
- https://github.com/quil/quil-templates/
- https://gist.github.com/mmzsource/340322e6ff4b17be8b7dcb84d16d5172
#+begin_src
:profiles {:dev {:source-paths ["src"]
                   :repl-options {:nrepl-middleware
                                  [cider.piggieback/wrap-cljs-repl]}
                   :dependencies [[figwheel-sidecar "0.5.19"]
                                  [cider/piggieback "0.4.1"]]}}
#+end_src
- https://www.reddit.com/r/Clojure/comments/a69wse/setup_dynamic_clojurescript_and_quil_environment/
* Overtone
- https://github.com/pjagielski/disclojure
* Book: 2017 | Reactive with ClojureScript Recipies
** 2 - ClojureScript
*** Elements
|               | Javascript              | Clojure                       |
|---------------+-------------------------+-------------------------------|
| new*          | document.createElement  |                               |
|               | document.createTextNode |                               |
|               | node.cloneNode          |                               |
|---------------+-------------------------+-------------------------------|
| remove        |                         | (.removeChild parent child)   |
|---------------+-------------------------+-------------------------------|
| attach        | node.appendChild        |                               |
|               | node.insertBefore       |                               |
|               | node.replaceChild       |                               |
|---------------+-------------------------+-------------------------------|
| get           | getElementById          | (.getElementById js/document) |
|               | getElementsByTagName    |                               |
|               | getElementsByClassName  |                               |
|---------------+-------------------------+-------------------------------|
| get attribute |                         | (aget) (.-)                   |
| set attribute |                         | (aset)                        |
- new nodes still need to get attached to the DOM tree on a separate step
- *innerHTML* is a property on all nodes that take a string of the childrens
*** Events
- Input events: blur, change, focus, submit reset, keypress
- Mouse events: click, dbclick, mousedown, mousemove, mouseover
- (.addEventListener element eventtype function boolean)
*** Window Object
- "Link" between the DOM and JS.
  - Each tab, each frame has a Window Object
  - alert, confirm, prompt, setTimeout, setInterval uses it
  - access it with *js/window*
- (.addEventListener
   (.getElementById js/document "neko.gif")
   "mouseover"
   #(.alert js/window "mouse detected")
   false)
* Book: 2016 | Etudes for Clojurescript
*** 1
- (in 'formulas.core)
- (require 'formulas.core :reload)
- (.pow js/Math NUMBER POWER)
  (js/Math.pow NUMBER POWER)
* Book: 2016 | Clojure In Action
| Type of Polymorphism | https://en.wikipedia.org/wiki/Parametric_polymorphism |
|                      | https://en.wikipedia.org/wiki/Ad_hoc_polymorphism     |
|                      | https://en.wikipedia.org/wiki/Subtyping               |
|                      | https://en.wikipedia.org/wiki/Structural_type_system  |
|----------------------+-------------------------------------------------------|
|                      |                                                       |
** 4 Multimethod Polymorphism
*** Polymorphism and his types
- "In a certain sense polymorphism provides the ability to create your own abstractions."
- Common Types of Polymorphism
  1) Parametric: clojure's collections or map, reduce, get, conj...
     1(one) behaviour
     with type variables instantiated to particular types when needed
     sometimes calles *generic functions* and *generic datatypes*
  2) Ad Hoc
     many behaviours, one for each type

          aka *function overloading* or *operator overloading*
     NOT a fundamental feature of type systems
  3) Subtype
- In Clojure, if you want to create your own PP function, you need to look for other kinds of polymorphism.
  Polymorphism is often a matter of perspective.
- Example: Ad-hoc Polymorphic function, _closed dispatch_
  #+begin_src clojure
    (defn ad-hoc-type-name [thing]
      (condp = (type thing);; throws exception on unmatched
        java.lang.String             "string"
        clojure.langPersistentVector "vector"))
  #+end_src
- Example: Ad-hoc Polymorphic function, _open dispatch_
  #+begin_src clojure
    (def type-namer-implementation
      {java.lang.String              (fn [thing] "string")
       clojure.lang.PersistentVector (fn [thing] "vector")})
    (defn open-ad-hoc-type-namer [thing]
      (let [dispatch-value (type thing)]
        (if-let [implementation
                 (get type-namer-implementations dispatch-value)]
          (implementation thing)
          (throw (IllegalArgumentException
                  (str "No implementation found for " dispatch-value))))))
  #+end_src
- Subtype Polymorphism
  - When the types (not functions) are polymorphic
  - Expressed in OO, as class or interface hierarchies
  - A form of SP is called _structural subtyping_
    (me) https://youtu.be/MbZoQlmQaWQ?t=452
    Exists in TS, Go, OCaml
    It doesn't care abou the types but the structure and constraints of the types
*** Polymorphism using multimethods
*** Summary
* Book: 2022 | Web development with Clojure - 2nd Edition
** Introduction
    - Focus on the *Luminous* stach
** 1 Getting your feet wet
- Clojure libraries https://clojars.org/
- myapp/src/myapp/core.clj
  (require myapp.core) Namespace declaration, matches folder structure
- myapp/project.clj
  in (defproject) we can set the *entry point* with :main, :main myapp.core/foo, unset by default
  you can run it with:
  #+begin_src
  > lein run SomeArgument
  SomeArgument Hello, World!
  #+end_src
- add/use luminus template for a quick webapp template
  > lein new luminus guestbook --template-version 3.91 -- +h2 +http-kit
- hardcode a version by adding in ~/.lein/profiles.clj
  {:user {:plugins [[luminus/lein-template "2.9.9.2"]]}}
- Template Dependencies
| Name               | Description                                                                  | Home                                                    |
|--------------------+------------------------------------------------------------------------------+---------------------------------------------------------|
| bulma              | Webjars. Bulma: the modern CSS framework that just works.                    | https://bulma.io/                                       |
| chesire            | Clojure JSON and JSON SMILE (binary json format) encoding/decoding           | https://github.com/dakrone/cheshire                     |
| conman             | a helper library for managing database connections                           | https://github.com/luminus-framework/conman             |
| cprop              | likes properties, environments, configs, profiles..                          | https://github.com/tolitius/cprop                       |
| expound            | Human-optimized error messages for clojure.spec                              | https://github.com/bhb/expound                          |
| http-kit           | A simple, high-performance event-driven HTTP client+server for Clojure       | https://github.com/http-kit/http-kit                    |
| h2                 | H2 is a database distributed as library...                                   | http://www.h2database.com/html/main.html                |
| java-time          | A Clojure wrapper for Java 8 Date-Time API.                                  | https://github.com/dm3/clojure.java-time                |
| logback-classic    | Logback is intended as a successor to the popular log4j project...           | http://logback.qos.ch/                                  |
| luminus-http-kit   | HTTP Kit adapter for Luminus                                                 | https://github.com/luminus-framework/luminus-http-kit   |
| luminus-migrations | For DB migrations. The library is a command line wrapper for Migratus.       | https://github.com/luminus-framework/luminus-migrations |
| luminus-transit    | transit serialization helpers for Luminus                                    | https://github.com/luminus-framework/luminus-transit    |
| markdown-clj       | Markdown parser in Clojure                                                   | https://github.com/yogthos/markdown-clj                 |
| material-icons     | Webjars. A font for the web.                                                 | https://google.github.io/material-design-icons/         |
| mount              | managing Clojure and ClojureScript app state since (reset)                   | https://github.com/tolitius/mount                       |
| muuntaja           | Clojure library for fast http api format negotiation, encoding and decoding. | https://github.com/metosin/muuntaja                     |
| nrepl              | A Clojure network REPL that provides a server and client...                  | https://github.com/nrepl/nrepl                          |
| reitit             | A fast data-driven router for Clojure/Script                                 | https://github.com/metosin/reitit                       |
| ring               | Clojure HTTP server abstraction                                              | https://github.com/ring-clojure/ring                    |
| ring-webjars       | Ring middleware to serve static assets from WebJars.                         | https://github.com/weavejester/ring-webjars             |
| ring-http-response | Handling HTTP Statuses with Clojure(Script)                                  | https://github.com/metosin/ring-http-response           |
| selmer             | A fast, Django inspired template system in Clojure.                          | https://github.com/yogthos/Selmer                       |
| struct             | Structural validation library for Clojure(Script)                            | https://github.com/funcool/struct                       |
- Default repl namespace is *user* from *env/dev/clj/user.clj*
  - Include functions that we won't want packaged in our application
  - start/stop functions
** resources/migration/*
- Delete template migrations, and create a new one (after (start))
  rm -f resources/migration/*
- (create-migration "guestbook")
- Write the new empty .sql files
    #+begin_src sql
CREATE TABLE guestbook
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(30),
message VARCHAR(200),
timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
  #+end_src
    #+begin_src sql
  DROP TABLE guestbook;
  #+end_src
- (migrate)
  (restart)
- Dependencies CANNOT be loades dynamically by the JVM,
  they need a restart of the REPL
** resources/sql/queries.sql
   Used by HugSQL, which creates function to interact with a database, based on SQL files
   :! indicates the query is destructive
   :n returns the number of affected rows
   :? indicates a SELECT query
   :* indicates that multiple rows are returned
   #+begin_src sql
-- :name save-message! :! :n
-- :doc creates a new message using the name and message keys
INSERT INTO guestbook
(name, message)
VALUES (:name, :message)
-- :name get-messages :? :*
-- :doc selects all available messages
SELECT * from guestbook
   #+end_src
** src/clj/guestbook/db/core.clj
   (conman/bind-connection *db* "sql/queries.sql")
** {dev,test}-config.edn
   - Not supposed to be commited to svn
    :database-url "jdbc:h2:./guestbook_dev.db"
   - Uses the :jvm-opts flags found in :project/{test,dev} profile in project.clj
** Running queries
   (in-ns 'guestbook.db.core)
   (conman/bind-connection *db* "sql/queries.sql")
   (get-messages)
   (save-message! {:name "bob" :message "hello world"})
   (get-messages)
** test/clj/guestbook/db/core_test.clj
   - Update (deftest)
      #+begin_src clojure
(deftest test-users
  (jdbc/with-transaction [t-conn *db* {:rollback-only true}]
    (is (= 1 (db/save-message!
              t-conn
              {:name "bob"
               :message "hello world"}
              {:connection t-conn})))
    (is (= {:name "bob"
            :message "hello world"}
           (-> (db/get-messages t-conn {})
               (first)
               (select-keys [:name :message]))))))
       #+end_src
   - lein test
   - lein test-refresh
** src/clj/guestbook/routes/home.clj
   Where the paths, functions, middleware are put together.
** resources/html/home.html
   - extends base.html and process the :doc through markdown
** resources/html/home.html
   - Setup to use Bulma CSS
* Book: 2022 | Clojure: The Essential Reference MEAP v28
|                         | http://manifesto.softwarecraftsmanship.org/#/es                              |
|                         | https://cognitect.com/blog/2016/1/28/state-of-clojure-2015-survey-results    |
| NET runtime             | https://github.com/clojure/clojure-clr                                       |
| JS runtime              | https://clojurescript.org/                                                   |
| CLR history             | https://soundcloud.com/defn-771544745/48-david-miller-and-clojure-on-the-clr |
| STM support is built-in | https://en.wikipedia.org/wiki/Software_transactional_memory#Clojure          |
| STM support is built-in | https://clojure.org/reference/refs                                           |
** 1
- 2007 CLR removed
  - https://soundcloud.com/defn-771544745/48-david-miller-and-clojure-on-the-clr
  - To see the initial CLR effort
    git rev-list --reverse --format="- %B %cd" -n 1 HEAD — src/cli/runtime.
  - CLR removed in commit b6db84aea2db2ddebcef58918971258464cbf46f
- 2009 Community adoption of the CLR from Rich Hickey
- 2011 Clojurescript announced
- Parts of the Standard Library
  1) clojure.core, always available without need to specify any namespace
  2) other clojure.*
  3) Java SDK
- Missing from the Clojure STL, are solutions already provided by java
  - Cryptography
  - Low-level networking
  - HTTP
  - 2D Graphics
- All other non-core namespaces
  1) Core Support
     - clojure.template
     - clojure.string
     - clojure.pprint
     - clojure.set
     - clojure.stacktrace
  2) REPL
     - clojure.main
     - clojure.repl
     - clojure.core.server
  3) General Support
     - clojure.walk
     - clojure.zip
     - clojure.sh
     - clojure.xml
     - clojure.test
     - clojure.core.reducers
  4) Data Serialization
     - clojure.edn
     - clojure.instant
     - clojure.data
  5) Java
     - clojure.java.javadoc
     - clojure.java.browse
     - clojure.inspector
     - clojure.reflect
     - clojure.java.io
