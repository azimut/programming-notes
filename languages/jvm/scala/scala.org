- wiki https://en.wikipedia.org/wiki/Scala_(programming_language)
  - Author: Martin Odersky
- Article: https://www.scrapingbee.com/blog/web-scraping-scala/
- Article: https://degoes.net/articles/scala-resurrection
- FP library https://typelevel.org/cats/
- Async https://zio.dev/
- Async https://typelevel.org/cats-effect/
- Build https://github.com/com-lihaoyi/mill
- HTTP https://http4s.org/
- https://ebookfoundation.github.io/free-programming-books/books/free-programming-books-langs.html#scala
- https://github.com/lauris/awesome-scala
- Article Effective Scala Case Class Patterns
  https://gist.github.com/chaotic3quilibrium/58e78a2e21ce43bfe0042bbfbb93e7dc
- Framework: Play Framework.
  Conocimientos deseables: Slick, Monix Task.
- https://en.wikipedia.org/wiki/Scala_(programming_language)
- tutorial http://caiorss.github.io/Functional-Programming/scala/README.html
- recipies http://caiorss.github.io/Functional-Programming/scala/PRACTICAL_RECIPES.html

* Language

- haskell typeclasses (FROM: book of monads)
  #+begin_src scala
    trait Eq[a] {
      def eq(x: A, y: A): Boolean
    }
  #+end_src
  - implicits (Scala 2) aka type class pattern aka traits
    #+begin_src scala
      def eqList[A](xs: List[A], ys: List[A])(implicit eq: Eq[A])
          : Boolean = ???
    #+end_src
  - givens (Scala 3) aka contextual abstractions aka clauses
    #+begin_src scala
      def eqList[A](xs: List[A], ys: List[A])(using eq: Eq[A])
          : Boolean = ???
    #+end_src
** Types
|---------+------------+-------------------------------------------------------|
|     <r> |    <c>     |                                                       |
| Nothing |            | has no value, only valid code throwing exceptions     |
|    Unit |  ()  {()}  |                                                       |
|    Null |    null    |                                                       |
| Boolean |    true    | no other truthy or falsy values exists in scala       |
|    Byte |    1 or    | Byte.MinValue or Byte.MaxValue                        |
|   Short |            |                                                       |
|     Int |            |                                                       |
|    Long |            |                                                       |
|   Float |            |                                                       |
|  Double |            |                                                       |
|     Any |            | at the top of scala type hierarchy                    |
|  AnyVal |            | at the top of scala primitive types                   |
|  AnyRef |            | at the top of scala classes, alias of JavaLang.Object |
|---------+------------+-------------------------------------------------------|
** Standard Library
- https://www.scala-lang.org/api/current/
** Binary Compatibility

#+begin_src
Scala doesn't have binary compatibility, you can't even use a library compiled for 2.12 on Scala 2.13. For that
reason library developers cross-compile to all versions they support.

This is fixed in Scala 3, but it's only valid for Scala 3 and higher, it doesn't help for Scala 2.
#+end_src

* Codebases
- https://github.com/twitter/the-algorithm
