- Channel: Sergei Winitzki https://www.youtube.com/channel/UCWpjX-z6_oNZhcHPzAAQy6g/videos
  Programming Papers explained with scala
- Lens https://www.youtube.com/watch?v=efv0SQNde5Q
* 11 | What Scala Adopted from Erlang         | 00:58:00 | Martin Odersky
https://vimeo.com/18912803
- Quotes from the man that wrote the java spec.
  Gilad Bracha
  - "Threads are to concurrency as witchcraft to physics."
  - "Hanging by a thread is the punishment for shared state concurrency."
- 08:00
* 21 | #Scala Crash Course by a Scala Veteran | 03:28:02 | DevInsideYou
https://www.youtube.com/watch?v=-xRfJcwhy7A
- Scala 3 has python like identation support
- everything is an *expression*
  - every expression computes to a *value*
    - every value is an *object*
    - every value has a type
- there are NOT operators
  1 + 3
  is infix notation for
  1.+(3)
- exceptions do not return a value, so their type is ~Nothing~
- it is considered an anti-pattern to use ~return~
- Scala Environment Installer (jdk,.profile,ammonite,scalafmt,sbt,scala)
  https://get-coursier.io/
  https://github.com/coursier/coursier
- wsl
  wsl -l -v
  wsl -d Ubuntu-20.04
- cs install giter8
  sbt new devinsideyou/scala-seed.g8
  g8 devinsideyou/scala3-seed.g8
- sbt> compile, run, clean, test:compile, test, scalafmtAll
  - commands with (~) will keep watching the code like "~compile"
- .code
  - extensions: Reload, error lens, scala(metals), disable ligatures
  - worksheets, lets you put scala code and have the return value of the line show on a comment beside it
- scala classes
  - does not have to be named exactly the same as the filename
  - not restricted to 1 class per file
- ";" are optional but never used
- ~package~ are syntatic sugar for namespaces with braces
- ~traits~ are similar to java *interfaces* but they can contain implementation
- *object Main* is the syntax we use when we want a single instance of a class, singleton object
  - the body will run as their main method
  - the body is also the constructor
  - Example
    #+begin_src scala
      package com.traversymedia
      package playground
      object Main extends App {
        println("-" * 50)
        println("Hello world!")
        println("-" * 50)
      }
    #+end_src
  - Example
    #+begin_src scala
      package com.traversymedia
      package playground
      object Main {
        def main(args: Array[String]): Unit = {
          println("-" * 50)
          println("Hello world!")
          println("-" * 50)
        }
      }
    #+end_src
- /** */ for javadoc
- Declarations: val, var, def, lazy, type
  - val similar to const    in JS
  - var similar to let      in JS
  - def similar to function in JS
  - lazy val
- Top level definitions: class, object, trait
  - Declarations can only happen inside these
    - In Scala 3, def's CAN happen at the top level
- 00:55:00 *Uniform Axis Principle*: means that I can leave empty parens on calls to functions with no arguments
- 00:55:57 Type is Capitalized eg: Int
- 00:56:28 Scala has support for *named parameters* for methods
- 00:57:06 function names are NOT limited to alphanumeric, eg: "*"
- 00:59:44 *top level definitions* go with uppercase
- 01:00:25 is a convention to specify the types for al *public* members (default visibility)
- 01:01:01 Types
  | Nothing |            | has no value, only valid code throwing exceptions     |
  | Unit    | () or {()} |                                                       |
  | Null    | null       |                                                       |
  | Boolean | true       | no other truthy or falsy values exists in scala       |
  | Byte    | 1 or       | Byte.MinValue or Byte.MaxValue                        |
  | Short   |            |                                                       |
  | Int     |            |                                                       |
  | Long    |            |                                                       |
  | Float   |            |                                                       |
  | Double  |            |                                                       |
  | Any     |            | at the top of scala type hierarchy                    |
  | AnyVal  |            | at the top of scala primitive types                   |
  | AnyRef  |            | at the top of scala classes, alias of JavaLang.Object |
- 01:04:36 Type Aliases
  type N = Int
  val myFavoriteNumber: N = 1337
- 01:05:28 names of types and names of values live in different namespaces
  type N = Int
  val N: N = 1337
- 01:09:48 single quotes is for characters only, eg: 'a' or '\u2500'
  |           | interp. | escape | format |
  |-----------+---------+--------+--------|
  | s""       | yes     |        |        |
  | f""       | yes     |        | yes    |
  | raw"""""" | yes     | no     |        |
  | """"""    |         |        |        |
  | s""""""   | yes     | yes    |        |
  |-----------+---------+--------+--------|
  - Where interpolation is $myvar or ${myvar + 2}
  - """""", useful with a .stripMargin('#') which default arg is "|"
  - you can define your own interpolator, which happens at runtime
- 01:22:10 you can optionally put *end* to end a "def" or an "if" to *close the scope* of them
- 01:23:29 in scala 3 you do NOT need to put parens on a if condition
- 01:23:36 on scala 3 you can optionally put an *then* of "if/else if" to oneline them without parens
- 01:24:25 in scala (==) delegates to .equals()
- 01:25:58 Scala 3 has a more type safe (==) than Scala 2
  - While in Java and Scala equality (==) is defined for Any
  - Scala gives a warning when doing it with different types
- 01:27:56 methods support default argument
  def loop(acc: Int = 0): Unit
- 01:27:09 Scala has *tail recursion*
  - It will rewrite the method to use a loop (usually more performant)
- 01:28:28 @scala.annotation.tailrec we mark the method as being tail recursive
- 01:30:31 "do while" loops are deprecated, due *do* being used elsewhere
- 01:30:38 no "for loop" but instead *for comprehensions*
- 01:31:19 function signature: parens are optional on args if only 1
  eg: (Int) => String
- 01:33:30 List(1,2,3).foreach(println)
- 01:35:03 in Scala 3, eta-expansion is deprecated for defs with an empty parameter list
- 01:37:49 arrow functions (=>)
- 01:40:01 on a method call of 1 argument you can use {} instead of ()
** 01:43:02 *case/match* with previous var value
- lowercase val, use backticks
  #+begin_src scala
    val four = 4
    highOrderFunction {
      case `four` => Console.GREEN + four + Console.RESET
      case other  => other.toString
    }
  #+end_src
- with uppercase val, no backticks
  #+begin_src scala
    val Four = 4
    highOrderFunction {
      case Four => Console.GREEN + Four + Console.RESET
      case other  => other.toString
    }
    #+end_src
- 01:43:31 case guard
  #+begin_src scala
    highOrderFunction {
      case x if x % 2 == 0 => Console.GREEN + x + Console.RESET
      case other => other.toString
    }
  #+end_src
- 01:45:24 match/case and (_*) and (if) guard
  #+begin_src scala
    val result =
      List(1,2,3,4,5,6,7,8,9) match {
        case List(_,_,third,fourth,_*) if third == fourth - 1 => true
        case _ => false
      }
  #+end_src
- 01:46:16 val pattern match (destructuring?)
  - dangerous in case of missing "cases", it will throw an exception
    #+begin_src scala
      val 1337 = 1337
      val List(_,_,third,fourth, rest @ _*) = List(1,2,3,4,5,6,7)
    #+end_src
** 01:50:08 try/catch/case/finally
  #+begin_src scala
    val result: Int =
      try println(1 / 0)
      catch {
        case e: ArithmeticException =>
          print(Console.RED)
          e.printStackTrace()
          print(Console.RESET)
      }
      finally println("no worries, it's all good")
  #+end_src
** 01:52:34 in scala if something is named *.apply()* then you don't need to call it
  #+begin_src scala
    val a = Array("what", "is")
    val b = Array.apply("what", "is")
    println(a(2))
  #+end_src
** 01:54:58 a.update(key, value) can be written as const(key) = value
** 01:56:11 never import scala.collection.mutable.<BUILDERS>, otherwise you shadow the immutable
  - import scala.collections.mutable
    mutable.ArraySeq(1,2,3)
** 01:57:58 Iterable(1,2,3,4), Seq(), List(), IndexedSeq(), Vector(), Set()
  - scala.collection.immutable.HashSet()
  - must be the same type to have a non Any type
  - Iterable() defaults to List()
  - IndexedSeq() default to Vector()
** mutable collections vs immutable collections
  - immutable need to be imported
  - import can happen anywhere
  - fruits.mapInPlace(_.reverse).foreach(println)
    fruits.map(_.reverse).foreach(println)
  - is weird to use immutable functions (map) on mutable collections
** 02:11:03 Range(start = 0, end = 10, step = 2) or Range.inclusive()
  - 0 to 9
  - 0 until 9 foreach println
  - 0 until 9 by 2 foreach println
** 02:14:18 for comprehension
  #+begin_src scala
    for (i <- 0 to 9)
      println(i)
    val a =
      for (i <- 0 to 9)
        yield i + 2
    // c -> n , creates a tuple
    val b =
      for (c <- 'a' to 'h')
        yield for (n <- 0 to 9)
          yield c -> n).flatten
  #+end_src
- nested for comprehension
  #+begin_src scala
    val b =
      for (c <- 'a' to 'h')
        yield for (n <- 0 to 9)
          yield c -> n).flatten
  #+end_src
- nested for comprehension can also be understand as succesion of map's
  #+begin_src scala
    val c =
      ('a' to 'h').flatMap { c =>
        (0 to 8).map { n =>
          c -> n
        }
      }
  #+end_src
- nested for comprehension (;)
  #+begin_src scala
    for(c <- 'a' to 'h'; n <- 0 to 8)
      yield c -> n
    // OR
    for {
      c <- 'a' to 'h'
      n <- 0 to 8 if n % 2 == 0
    } yield c -> n
  #+end_src
** appending/preppending
- 02:24:45 (::) prepend to list
- 02:24:06 if a function ends with a color (:) is right associative
  0 :: list
  list.::(0)
- 02:25:31 (+:) preppend to a non-list
- 02:25:31 (:+) append to list
  list :+ 3
- 02:25:54 (:::) concatenate list
- 02:26:10 (++) concatenate other things
** 02:27:18 Set(), no ordered (can only add (+) or concatenate (++))
  - NOT prepend or append
** 02:28:17 Map(), no ordered
- 02:07:08 Map((1,"1"),(2,"2")) or Map(1 -> "1", 2 -> "2")
** 02:30:44 import scala.jdk.CollectionConverts._
  #+begin_src scala
  val hashSet = {
    val result = new java.util.HashSet[Int]
    result.add(1)
    result
  }
  val scalSet = hashSet.asScala // Set(1)
  val javaSet = scalaSet.asJava // [1]
  #+end_src
** 02:31:18 variable args parameter list (Int*)
  #+begin_src scala
    object MyCollection {
      def apply(ints: Int): Seq[Int] =
        ints
    }
    val c1 = MyCollection()
  #+end_src
** 02:35:01 def plus(a: Int)(b: Int): Int = a + b
  is syntactic sugar for curried functions
  def plus(a: Int): Int => Int = b => a + b
  plus(1)(2)
** 02:37:09 scala class & constructors
  #+begin_src scala
    class Calculator(a: Int) {
      println("body of the class is executed during construction")
      def add(b: Int): Int = a + b
      def subtract(b: Int): Int = a - b
    }
    type C = Calculator
    val c = new Calculator(a = 1)
    val result = c.add(b = 2)
    println(result)
    println(c.substract(b = 2))
  #+end_src
- 02:41:11 scala object
  #+begin_src scala
    object C // Is the same as doing
    val C = {
      class C$
      new C$
    }
  #+end_src
- 02:41:30 companion object, similar to a static method in Java
  #+begin_src scala
    object Calculator {
      private var _calculatorsCreated: Int = 0
      def calculatorsCreated: Int = _calculatorsCreated // getter
      private def calculatorsCreated_=(newVAlue: Int): Unit // setter
        _calculatorsCreated = newValue
    }
    class Calculator(a: Int) {
      Calculator.calculatorsCreated += 1
      def add()
      def subtract()
    }
  #+end_src
- 02:45:29 scala traits, they can have implementation or be abstract
  #+begin_src scala
    trait Add {
      def add(b: Int): Int
    }
    class Calculator(a: Int) extends Add {
      override def add(b: Int) Int = a + b
    }
  #+end_src
