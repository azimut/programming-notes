#+TITLE: Lua
#+DATE: <2020-11-24 mar>

#+ATTR_ORG: :width 200
[[https://upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Lua-Logo.svg/240px-Lua-Logo.svg.png]]

|--------+----------------------------------------------------------|
| home   | https://www.lua.org/                                     |
| doc    | https://www.lua.org/manual/5.4/                          |
| wiki   | https://en.wikipedia.org/wiki/Lua_(programming_language) |
| wiki   | https://en.wikibooks.org/wiki/Lua_Programming            |
| libs   | https://github.com/luarocks/luarocks                     |
| libs   | https://github.com/LewisJEllis/awesome-lua               |
| source | https://github.com/lua/lua                               |
| source | https://github.com/LuaJIT/LuaJIT                         |
| typed  | https://github.com/pallene-lang/pallene                  |
| typed  | https://github.com/teal-language/tl                      |
|--------+----------------------------------------------------------|

- 1993
- by [[https://en.wikipedia.org/wiki/Roberto_Ierusalimschy][Roberto Ierusalimschy]], Luiz Henrique Figueiredo, Waldemar Celes
- scripting language for extending applications
- embeddable, implemented as a library
- written in ISO/ANSI C

* cli
|-----------+------------------------------------|
| LUA_INIT  | executed before anything else      |
| LUA_PATH  | set package.cpath, for lua loaders |
| LUA_CPATH | set package.cpath, for C loaders   |
|-----------+------------------------------------|
** lua  - interpreter
#+begin_src sh
  lua [opts] [ script [args] ]
#+end_src
|-----------+--------------------------------------------|
| -e <stat> | executes given statement                   |
| -i <file> | interactive mode after running script file |
| -l <lib>  | requires library                           |
| -E        | ignore environment vars                    |
| -W        | turn _warnings_ on                         |
|-----------+--------------------------------------------|
** luac - compiler
* language

#+begin_src lua
  function fact (n)
    if n == 0 then
      return 1
    else
      return n * fact(n - 1)
    end
  end

  print("factorials of 3:", fact(5))
#+end_src

- chunk = piece of code executed, a sequence of commands/statements (a file?)
- closures support
- first class functions
- dynamic: variables don't have a type, values inside have
- weakly typed, in the automatic type conversion sense (for +, and ..)
- referencing undefined variables return value nil, no error
- 1(one) based index

** variables

- always global scope by default
- arg - array of arguments, [0] name of the script

#+begin_src lua
        x = 0
  local x = 0    -- limit scope
     x, y = 0, 0 -- multiple values
     x, y = y, x -- swap values
#+end_src

** types
- userdata, thread
***   number

https://www.lua.org/pil/2.3.html
- 2 2.0 1e10
- Lua has no integer type
- Represents real (double-precision floating-point) numbers.
- no rounding error at all (unless the number is greater than 1e14)

***  boolean

https://www.lua.org/pil/2.2.html
- true false
- falsy: false nil

***      nil

https://www.lua.org/pil/2.1.html
- global variables have this value by default

***   string

https://www.lua.org/pil/2.4.html
- '' "" [[]]
- [[]] multiline raw string, do not interpret escape sequences
- 10 != "10"
- sequence of 8-bit characters
- can store binary data
- are *immutable*
- escape sequences: (need escape: "'[]\)
  |------+-----------------------------------|
  |  <r> |                                   |
  | \nnn | literal char, where n is a number |
  |   \a | bell                              |
  |   \b | backspace                         |
  |   \f | form feed                         |
  |   \n | new line                          |
  |   \r | carriage return                   |
  |   \t | horizontal tab                    |
  |   \v | vertical tab                      |
  |------+-----------------------------------|

***    table

https://www.lua.org/pil/2.5.html
- {}
- aka associative arrays
- are objects
- tab.field or tab["field"]
- nil is an invalid index
- it might change its internal representations according to the use given
  - "arrays" are tables with numeric index
    - 1 based
    - ends at his first non initialized value (a sort of *sentinel*)
    - you might want to enforce the index type (toint,tostring)
  - "records" are tables with literal keys
  - "modules" are tables populated with anonymous functions
  - "objects" are tables

*** function
https://www.lua.org/pil/2.6.html
- support for nested functions, with lexical scoping

** control flow

#+begin_src lua
if i > 20 then print("BIG") end
if i > 20 then print("BIG") else print("smol") end
if i > 20 then print("BIG") elseif i > 10 print("big") end
#+end_src

** looping

#+begin_src lua
while 1 do print("!") end
repeat print("!") until 0
for i=1, 1000 do a[i] = i*2 end
for i=1, 1000, 10 do a[i] = i*2 end
for key,value in pairs(t) do print(value) end
#+end_src

** operators

https://www.lua.org/manual/5.4/manual.html#3
|-----+-------------------------------|
| <r> |                               |
|  .. | string concatenation          |
|  == | equality                      |
|  ~= | inequality                    |
|  >= | ge                            |
|  <= | le                            |
|  #a | length/size of string/array a |
|  // | floor division                |
|   & | bitwise and                   |
|   Â¦ | bitwise or                    |
| a~b | bitwise binary xor            |
|  ~a | bitwise unary not             |
|  << | bitwise left shift            |
|  >> | bitwise right shift           |
|   : | method call                   |
|-----+-------------------------------|
#+begin_src
 ::     ;     ,     .     ..    ...
 and or not
#+end_src

** stdlib functions

source https://github.com/lua-stdlib/lua-stdlib
doc https://lua-stdlib.github.io/lua-stdlib/
https://www.lua.org/manual/5.4/

*** base
assert
collectgarbage
dofile
error
getmetatable
ipairs
load
loadfile
next
pairs
pcall - returns "ok, err", an exception protected call to fn
print
rawequal
rawget
rawlen
rawset
require
select
setmetatable
tonumber
tostring
type
warn
xpcall
*** coroutine
https://www.lua.org/manual/5.4/manual.html#6.2
*** debug
https://www.lua.org/manual/5.4/manual.html#6.10
*** io
https://www.lua.org/manual/5.4/manual.html#6.8
io.read(FMT) - returns read value
- FMT
  - all a *a  - all input
  - *n        - a number
  - *l        - an entire line, same as () no argument
  - 4         - reads 4 characters
  - 4,6       - reads 4 and 6 characters, returns mval
  - *n,*n     - reads two numbers
io.open("file.csv", "r")
- :close()
- :read("*a")
- :read("a")
- :read("all")
*** os
|------------+-------------------+---|
|        <r> |        <c>        |   |
|     .clock |                   |   |
|      .date |   [fmt[,time]]    |   |
|  .difftime |      t2 , t1      |   |
|   .execute |     [command]     |   |
|      .exit |  [code[,close]]   |   |
|    .getenv |      varname      |   |
|    .remove |     filename      |   |
|    .rename | oldname , newname |   |
| .setlocale | locale[,category] |   |
|      .time |      [table]      |   |
|   .tmpname |                   |   |
|------------+-------------------+---|
*** package
https://www.lua.org/manual/5.4/manual.html#6.3
*** math

https://www.lua.org/manual/5.4/manual.html#6.7
.pi
.sqrt(n)
.abs(n)
.cos(n)
.sin(n)
.tan(n)
.atan(n)
.floor(n)
.ceil(n)
.randomseed(seed) - eg: seed = os.time()
.random() - between 0 and 1
.random(a,b) - between a and b

*** table
https://www.lua.org/manual/5.4/manual.html#6.6
*** string
#+begin_src
   init = where to start searching, can be negative
pattern = regex
#+end_src
|-----------+---------------------+----------------------------------------------------|
|       <r> |         <c>         |                                                    |
|    [[https://www.lua.org/manual/5.4/manual.html#6.4][string]] |      arguments      | returns                                            |
|-----------+---------------------+----------------------------------------------------|
|      .len |          s          | number, "" returns 0                               |
|    .lower |          s          | string, depends on locale                          |
|    .upper |          s          | string, depends on locale                          |
|  .reverse |          s          |                                                    |
|      .sub |     s, i, [,j]      | substring, from =i= to =j=, both can be negative   |
|-----------+---------------------+----------------------------------------------------|
|    .match | s, pattern, [,init] | captures in =s= of =pattern=                       |
|   .gmatch | s, pattern, [,init] | iterator fn, of each capture of =pattern= in =s=   |
|     .find | s, pattern, [,init] | idx where =pattern= starts and ends in =s= or nil  |
|           | s, pat, init, plain | " =plain= turns off pattern matching               |
|-----------+---------------------+----------------------------------------------------|
|     .gsub |  s, pattern, repl   | string, with =pattern= replaced with =repl= in =s= |
|           | s, pattern, repl, n | " =n= limits it to nth ammount of replacements     |
|           |    repl = string    | where "%n" is the nth match, %0 is the whole match |
|           |    repl = table     | queried on every match, 1st capture as key         |
|           |   repl = function   | called on every match, captures as arguments       |
|-----------+---------------------+----------------------------------------------------|
|     .byte |   s, [[,i] [,j]]    | numeric codes for =s=, from =i= to =j=             |
|     .char |      [int...]       | string, from given numeric code arguments          |
|-----------+---------------------+----------------------------------------------------|
| .packsize |         fmt         | length of string packed with =fmt=                 |
|     .pack |  fmt, v1, v2, ...   | binary serialized string, containing Vn.. by =fmt= |
|   .unpack |    fmt, s [,pos]    | values packed in string =s= according to =fmt=     |
|           |                     | and index of unread bytes in =s=                   |
|-----------+---------------------+----------------------------------------------------|
|     .dump |                     |                                                    |
|   .format |                     |                                                    |
|      .rep |                     |                                                    |
|-----------+---------------------+----------------------------------------------------|
*** utf8
https://www.lua.org/manual/5.4/manual.html#6.5
** metamethods
https://www.lua.org/manual/5.4/manual.html#2.4
https://gist.github.com/oatmealine/655c9e64599d0f0dd47687c1186de99f
|-------------+-----|
|     <c>     |     |
|-------------+-----|
|   __call    |     |
|-------------+-----|
| __metatable |     |
| __tostring  |     |
|   __name    |     |
|   __pairs   | 5.2 |
|  __ipairs   | 5.2 |
|-------------+-----|
|   __index   |     |
| __newindex  |     |
|-------------+-----|
|   __close   | 5.4 |
|    __gc     |     |
|   __mode    |     |
|-------------+-----|
*** operators
|----------+----+-----|
| __concat | .. |     |
| __len    | #  | 5.1 |
| __eq     | == |     |
| __lt     | <  |     |
| __le     | <= |     |
|----------+----+-----|
*** math    operators
|--------+----+-----|
| __add  | +  |     |
| __sub  | -  |     |
| __mul  | *  |     |
| __div  | /  |     |
| __unm  | -  |     |
| __mod  | %  | 5.1 |
| __pow  | ^  | 5.1 |
| __idiv | // | 5.3 |
|--------+----+-----|
*** bitwise operators
|--------+----+-----|
| __bor  | &  | 5.3 |
| __band | Â¦  | 5.3 |
| __bnot | ~  | 5.3 |
| __bxor | ~  | 5.3 |
| __shl  | << | 5.3 |
| __shr  | >> | 5.3 |
|--------+----+-----|
** changelog

https://www.lua.org/versions.html

#+CAPTION: lines of code per Lua version
#+ATTR_ORG: :width 500
[[./loc.png]]

|----+-----+-------------------------------------------|
| 20 | 5.4 | const and to-be-closed vars               |
| 15 | 5.3 | integers, bitwise ops, utf8, repl exp, // |
| 11 | 5.2 |                                           |
| 06 | 5.1 |                                           |
| 03 | 5.0 |                                           |
|----+-----+-------------------------------------------|
** coroutines
- covers most uses of full continuations
- equivalent to
  - cooperative multithreading
  - one-shot continuations (call/1cc)
* codebases

- https://github.com/lunarmodules/luasocket
- https://github.com/vincasmiliunas/lua-basic-oauth2
  - https://developers.google.com/youtube/v3/live/docs/liveBroadcasts/list
  - https://developers.google.com/youtube/v3/live/registering_an_application

* used in

[[https://en.wikipedia.org/wiki/List_of_applications_using_Lua][List of Apps]] [[https://en.wikipedia.org/wiki/Category:Lua_(programming_language)-scripted_video_games][List of Games]]

- redbean http server https://redbean.dev/
- obs https://docs.obsproject.com/scripting
  - example: https://github.com/insin/obs-bounce/
- nodemcu https://github.com/nodemcu/nodemcu-firmware
- neovim
- nmap (nse)
- wireshark
- snort
- redis
- nginx https://fly.io/docs/app-guides/openresty-nginx-plus-lua/
- awm (awesome window manager config)
- pico-8
- love2d
  - arcade shooter https://github.com/a327ex/SNKRX
  - game devlog https://github.com/a327ex/blog
- mpv
  - https://mpv.io/manual/master/#lua-scripting
    https://mpv.io/manual/master/#list-of-input-commands
  - https://github.com/davidde/mpv-autosub
  - https://github.com/CounterPillow/mpv-quack
- in LucasArts's Grim Fandango
- puredata https://agraef.github.io/pd-lua/

* transpiles to Lua
|------------+------|
| [[https://moonscript.org/][moonscript]] |      |
| [[https://fennel-lang.org/][fennel]]     | lisp |
| [[https://urn-lang.com/][urn]]        | lisp |
| [[https://amulet.works/][amulet]]     | ml   |
|------------+------|
