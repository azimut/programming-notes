- Video: How I program C - Eskil Steenberg - https://www.youtube.com/watch?v=443UNeGrFoM
- https://github.com/AnthonyCalandra/modern-cpp-features
- https://github.com/gerasdf/InsecureProgramming/
- https://github.com/junegunn/fzf
- https://github.com/oz123/awesome-c
- https://github.com/rhysd/vim-clang-format
- https://not.cafe/2020/10/12/getting-started-with-c-programming.html
- https://tek256.com/posts/code-hardening/
- http://blog.lujun9972.win/emacs-document/blog/2018/03/22/emacs-as-a-c++-ide/index.html
  https://vxlabs.com/2016/04/11/step-by-step-guide-to-c-navigation-and-completion-with-emacs-and-the-clang-based-rtags/
* Projects
- http://www.tendra.org/tdfc2-config/#S11.2
  https://github.com/tendra/tendra/wiki/About
- https://github.com/isometimes/rpi4-osdev
** clang-format
  https://emacs.stackexchange.com/questions/55635/how-can-i-set-up-clang-format-in-emacs
  clang-format -style=llvm -dump-config > .clang-format
* Book: Expert C Programming
** Introduction
   - some people do: if(3==i); in order to catch if they miss a =
* Book: Effective C
** 1 Getting Started with C
- C defines 2 possible execution environments:
  - Freestanding: no OS, embedded programming
  - Hosted
- A ~return~ from the initial call to the ~main~ function
  is equivalent to calling ~exit~
- Passing user supplied data to ~printf~ first argument, can result in a secvul (seacord 2013)
- https://github.com/Valloric/YouCompleteMe/
  https://github.com/Shougo/deoplete.nvim/
- Compilers: gcc, clang, visual studio
- Kinds of Portability issues:
  + Implementation-defined behavior: not on the C standard, but on a particular impl
  + Unspecified behavior: on the standard, but with >1 behavior defined
  + Undefined behavior: not on the C standard, explicit or implicit
  + Locale-specific behavior
  + Common Extensions
- ~-pedantic~, notify portability issues
** TODO 2 Objects, Functions, and Types
- "Every type in C is either an ~object~ type or a ~function~ type."
- IEEE 754-2008: the Standard for Floating-Point Arithmetic.
- The ~referenced type~ T derives a ~pointer to~ T
- A code block {} is know as a ~compound statement~
- C is ~call-by-value~ (aka ~pass-by-value~) language
*** Scopes:
  - file: declared outside a block or param list
  - block: declared inside a block or param list
  - prototype: on function prototype params
  - function: on function definition, between {}, only labels(?)
*** Storage duration
  - automatic: block scope
  - static: file scope (the word *static* can make block vars into static scope)
            Must be initialized wth a constant value, not a variable
  - thread:
  - allocated: dynamic allocated
*** Alignment
    Number of bytes between suuccessive addresses of objs.
  - CPU's might behave differently with aligned or unaligned data
    - They access data by word, and might be able to access multiwords with a perf cost
    - Depending of the CPU's word (16,32,64 bits)
  - malloc() is sufficiently aligned for all standard types
  - _Alignas(struct S) can be used on C11 to align by the type provided
    In the example for a buffer which is then casted to a struct
  - Can be weaker or stronger (aka stricter). Stronger have larger alignment values.
*** Object Types
- Boolean:
  - <stdbool.h>
  _Bool (or just bool) introduced on C99, stores 0 or 1
- Character:
  - char, signed char, unsigned char
  - All have the same alignment, size range, representation, and behavior
  - satisfies a minimum et of characters aka ~basic execution character set~
  - wchar_t is a chart type that takes more space (16 32 bits) to represent more chars
- Numerical:
  - signed char, short int, int, long int, long long int
  - *int* word can be ommited on declaration
  - <limits.h> has the maximun and minumun of each type
  - <inttypes.h> or <stdinit.h> to define uint32_t or uintmax_t
- Enum: enum day {sun = 1, mon, tue}
- Floating-point: float, double, long double
- void
- Functions:
  - list the param types or use *void* when no args
  - A function with a param type list is known as a *function prototype*
- Derived:
  - Pointers:
    - operators &* used together cancell each other
    - * (indirection, operates only on pointers)
    - & (address-of)
  - Arrays:
    - str[i]   is identical to *(str + i)
    - &str[10] is the same as    str + 10



** 5 Control Flow
   - Expression statement
   - Compound statements
   - Statement Kinds:
     1) Selection
     2) Iteration
     3) Jump
*** Expression Statement
    Optional expression, terminated by a (;)
    Most basic unit of work.
    #+begin_src c
    a = 6;
    c = a + b;
    ; // NULL STATEMENT
    ++count;
    #+end_src
    After each full expression has been evaluated,
    its value (if any) is discarded.
*** {}        Compound Statement (or block)
    a list of zero or more statements, surrounded by braces.
    can be nested
    #+begin_src c
    {
      static int count = 0;
      c += a;
      ++count;
    }
    #+end_src
*** if/switch Selection Statements
    allows you to conditionally execute based ona a *controlling expression*
**** if
     - -Wmisleading-indentation, to check for IF indentation when not using braces
      #+begin_src c
      if (expression)
        substatement

      if (expression)
        substatement1
      else
        substatement2

      if (expr1) // if..else ladder
        substatement1
      else if (expr2)
        substatement2
      else
        substatement3

      #+end_src
     *substatement* runs if *expression* is not equal to 0
     - Example
      #+begin_src c
      bool safediv(int dividend, int divisor, int *quotient) {
        if (!quotient) return false;
        if ((divisor == 0) || ((dividend == INT_MIN) && (divisor == -1)))
          return false;
        *quotient = dividend / divisor;
        return true;
      }
      #+end_src
**** switch
     expression MUST have an *integer* type
     Integer promotions are performed on the *controlling expression*
     The *constant* expression in each *case* label is converted to the promoted type.
     -Wimplicit-fallthrough
     -Wswitch-enum
     #+begin_src c
     switch (marks/10) {
       case 10: // Falls through
       case 9:
         puts("YOUR GRADE : A");
         break;
       default:
         puts("YOUR GRADE : FAILED");
     }
     #+end_src
     remember, enums map to integers
     if you not provide a default, and nothing matches, nothing wil run
     #+begin_src c
     typedef enum { Saving, Checking, MoneyMarket } AccountType;
     void assignInterestRate(AccountType account) {
       double interest_rate;
       switch (account) {
         case Savings:
           interest_rate = 3.0;
           break;
         case Checking:
           interest_rate = 1.0;
           break;
         case MoneyMarket:
           interest_rate = 4.5;
           break;
         default: abort();
       }
       printf("Interest rate = %g.\n", interest_rate);
     }
     #+end_src
     abort(), declared in the stdlib.h
*** while/for Iteration statement
    AKA loops, "a process, the end of which is connected to the beginning"
**** while
     runs until the controlling expression is equal to 0
     a simple *entry-controlled* loop
     - Example:
       1) copies the *val* converted to uchar
       2) into the first *n* characters
       3) of the object pointed by *dest*
     #+begin_src c
     void *memset(void *dest, int val, size_t n) {
       unsigned char *ptr = (unsigned char*)dest;
       while (n-- > 0)
         *ptr++ = (unsigned char)val;
       return dest;h
     }
     #+end_src
