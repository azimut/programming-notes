- Video: Competitive Programming in Java
  https://www.youtube.com/playlist?list=PLMCXHnjXnTnsWU7jYp9XCKPW8ayl6D8fb
- Video:  Optimizing JVM at Alibaba, for e-commerce apps running on 100,000+ servers with San Hong Li
  https://www.youtube.com/watch?v=X4tmr3nhZRg
  https://jcp.org/aboutJava/communityprocess/ec-public/materials/2017-02-14/Java_at_Alibaba.pdf
* 2016 | Optional - The Mother of All Bikesheds | Stuart Marks
https://www.youtube.com/watch?v=Ej0sss6cq14
** 06:00 Rationale for =Optional=
- "Optional is intended to provide a *limited mechanism* for
   library method *return types* where there is a clear need to
   represent "no result", and where using null for that is
   *overwhelmingly likely to cause errors*"
- NOT trying to solve the _maybe monad_ problem
- NOT trying to get rid of _null references_ from java entirely
** 12:50 =Optional= is *immutable*, you can never set the value of it after created
** 13:00 orElse orElseGet orElseThrow
** 14:00 there is a .map() method on =Optional=, only called if there is something on it
  opt.map(Customer::getName)
     .orElse("UNKNOWN")
** 24:00 Stream of Optional
- Java 8 Optional::isPresent/get
  #+begin_src java
    List<Customer> list = custIDlist.stream()
        .map(Customer::findByID)
        .filter(Optional::isPresent)
        .map(Optional::get)
        .collect(Collectors.toList());
  #+end_src
- Java 9 Optional::stream
  #+begin_src java
    List<Customer> list = custIDlist.stream()
        .map(Customer::findByID)
        .flatMap(Optional::stream)
        .collect(Collectors.toList());
  #+end_src
** 26:00 .ofNullable(ref) to bridge =Optional= and nullable worlds
** 27:00 .orElse(null) used mostly to bridge into something that wants nulls
** 29:00 #4 do not create an =Optional= for the specific purpose of chaining methods from it to get a value
  - Primary reason for Optional was for return values for methods
  - It would be the same as to doing null checks
    #+begin_src java
      Optional.ofNullable(s).orElseGet(this::getDefault); // NO
      (s != null) ? s : getDefault(); // YES
    #+end_src
** 33:00 #5 If an =Optional= chain is nested OR has an intermediate result of Optional<Optional<T>>, it's probably too complex
  - USe instead some imperative code
    #+begin_src java
      Optional<BigDecimal> second = getSecondValue();
      Optional<BigDecimal> first = getFirstValue();
      Optional<BigDecimal> result;
      if (!first.isPresent() && !second.isPresent()) {
          result = Optional.empty();
      } else {
          result = Optional.of(first.orElse(ZERO).add(second.orElse(ZERO)));
      }
    #+end_src
** 40:00 #6 Avoid using =Optional= *on* fields, method parameters, and collections (of Optional)
** 48:00 #7 Avoid using *identity* sensitive operations on =Optionals=
* 2017 | Modules in One Lesson                  | Mark Reinhold
** 04:30 x.getClass().getModule() - all classes are in a module
** 05:00 all modules are of a new type java.lang.Module
** 07:00 compiling and running
  mkdir lib
  javac -d classes src/org/openjdk/hello/Main.java
  jar --create --file lib/hello.jar -C classses .
  java -cp lib/heelo.jar org.openjdk.hello.Main
** 09:18 src/module-info.java *require*
  - Where module declarations go
  #+begin_src java
    module org.openjdk.hello {
        require java.base; // redundant, by default added
    }
  #+end_src
** 10:00 compiling and running module
   java -d classes src/openjdk/hello/Main.java src/module-info.java
   javap classes/module-info.class // shows info
   java --module-path lib -m org.openjdk.hello/org.openjdk.hello.Main // module run
** 12:00 *--describe-module*
  java --module-path lib --describe-module org.openjdk.hello
** 13:00 =--main-class= add an entry point, added to the module system, yo don't need to specify it anymore
  jar --create --file lib/hello.jar --main-class org.openjdk.hello.Main -C classes .
  java --module-path lib -m org.openjdk.hello
** 14:00 in a modular *source tree*, every module gets his own directory
  src/org.openjdk.hello/module-info.java
  src/org.openjdk.hello/org/openjdk/hello/Main.java
  src/org.openjdk.text/module-info.java
  src/org.openjdk.text/org/openjdk/text/Padder.java
** 17:00 src/module-info.java *exports*
  src/org.openjdk.text/module-info.java
  #+begin_src java
    module org.openjdk.text {
        exports org.openjdk.text;
    }
  #+end_src
** 22:00 unlike classpath that errors at runtime you get an error on startup or compilation if something is missing
** 23:00 java --list-modules
** 30:00 =jlink= dynamic linking of .jmod
  jlink --module-path SJ/jmods --add-module java.base --output jre
  du -sh SJ/ # 553 MB
  du -sh jre #  48 MB
** 32:00 =jlink= compression
  jlink --module-path SJ/jmods --add-modules java.base --output jrez --compress 2 --vm-minimal --strip-debug
  du -sh SJ/jrez # 15MB
* TODO 2018 | Parallel and Asynchronous Programming with Streams and CompletableFuture | Venkat Subramaniam
https://www.youtube.com/watch?v=0hQvWIdwnw4
** .parallelStream()
*** 00:00:04 - Parallel vs Asynchronous
  | Parallel     | you fork and then you join and continue                                                 |
  | Asynchronous | you run without waiting for completion, no synchronization, using a callback to receive |
*** 00:08:00 - Collection Pipeline Pattern by Martin Fowler
*** 00:09:00 - "A stream is an internal iterator"
*** 00:10:00 - "Imperative programming has ~accidental complexity~"
*** 00:18:00 - "In imperative style, the ~structure~ of *sequential code* is very different from the structure of *concurrent code*"
  ...using streams api makes them identical
*** 00:23:00 - ~.parallel()~ on a stream, there is also a ~.sequential()~ method, the very last one wins.
  There are not "segments" of code running parallel/sequential
*** 00:28:00 - Reactive Stream
  | Streams                | Reactive Streams        |
  |------------------------+-------------------------|
  | sequential vs parallel | sync vs async           |
  | no segments            | subscribeOn NO SEGMENTS |
  |                        | observeOn      SEGMENTS |
*** 00:34:00 - Java History
  | Java 1 | Threads          |                                                                       |
  | Java 5 | ExecutorServices | "Pool induced deadlock", not enough non-idle workers to take the work |
  | Java 7 | Fork Join Pool   | Workstealing                                                          |
  |        | Common FJP       |                                                                       |
*** 00:48:00 - forEach() vs forEachOrdered()
  - Useful when you want to run things in parallel, BUT want some order 
  - There are methods that don't have a order and variations that have.
  - forEachOrdered() does NOT convert the execution pipeline into sequential
    but it won't run until the previous is completed, imposing order
*** 00:59:00 - reduce on parallelStream()
  - it works with 0, as is =identity value=
    - working with it as it is an *initial value* will work on sequential code, not in parallel code
  - does NOT work with 30, as is =identity value=
  - what we work it it should be an =monoid= operation
  #+begin_src java
    numbers.parallelStream()
        .reduce(30, (total, e) -> add(total, e));
  #+end_src
*** 01:05:00 - threads - computation intensive vs IO intensive
  - for computation intensive = #T <= # of cores
  - for IO intensive may be > # cores
  - #T >= ((#cores)/(1-blocking-factor))
    0 <= blacking-factor < 1
  - number of threads is not limited by the ammount of memory
*** 01:10:00 - Fork.JoinPool.commonPool()
  - example output
    #+begin_src
      java.util.concurrent.ForkJoinPool@131e32[Running, paralleism = 7,
      size = 0, active = 0, running = 0, steals = 0, tasks = 0, submissions = 0]
    #+end_src
*** 01:11:00 - Runtime.getRuntime().availableProcessor()
  - number of cores
*** 01:15:00 - -D java.util.concurrent.ForkJoinPool.common.paralleism=100
*** 01:22:00 - the pool that runs your stream pipeline is the pool where the *terminal operation* executes
** TODO CompletableFuture
*** 01:34:00 Asynchronous execution: aka non-blocking
*** 01:35:00 Future<?> future = call();
  future.get(); // blocking
*** 01:37:00 callbacks pitfalls
  - Is the first parameter data or error? (no consistency)
  - hard to compose (callback hell)
  - no consistency dealing with errors
*** 01:38:00 promises
  - has 3 states: resolved, reject, pending
  - have 2 channels of communication: data, error
    - failures are threated as data
  - carry 0 or 1 piece of data ever, not a collection of it
  - in JS they are called *thenable*, object that you can call .then()
*** 01:43:00 CompleatableFutures are nothing but promises of JS
*** 01:44:00 CF has stages, stage is a pipeline of execution
  - from a CF to another CF
    #+begiN_src java
      import java.util.*;
      import java.util.concurrent.*;
      public class Sample {
          public static CompletableFuture<Integer> create() {
              return CompletableFuture.supplyAsync(() -> 2);
          }
          public static void main(String[] args) {
              CompletableFuture<Integer> future =
                  create();
              CompletableFuture<Void> future2 =
                  future.thenAccept(data -> System.out.println(data));
              create()
                  .thenAccept(data -> System.out.println(data))
                  .thenRun(() -> System.out.println("this never dies"));
          }
      }
    #+end_src
*** 01:48:00 Most popular functional interface in Java 8
  - Other is Runnable, takes nothing, return nothing
  - CompletableFutures uses the same interfaces
  | name          | return  | method    |
  |---------------+---------+-----------|
  | Supplier<T>   | T       | get()     |
  | Predicate<T>  | boolean | test(T)   |
  | Function<T,R> | R       | apply(T)  |
  | Consumer<T>   | void    | accept(T) |
*** 01:56:00 Bad way to get the data .get()
  - .get() is blocking
  #+begin_src java
    public static void main(String[] args) throws Exception {
        System.out.println(create.get());
    }
  #+end_src
*** 01:59:00 CF.getNow(T) returns T if the CF is not done
*** 02:08:00
* 2019 | Exploring Collectors | Venkat Subramaniam
https://www.youtube.com/watch?v=pGroX3gmeP8
** 00:08:50 reduce:
  1) takes the collection reduces to a single value
  2) converts a Stream to something concrete
** 00:09:38 Java has recude in 2 forms: reduce and collect
** 00:12:57 "Lazy evaluation requires purity of functions"
** 00:15:08 Pure Functions
  1) Do not change anything
  2) Do not depend on anything that may possibly change
** 00:20:00 bad code: pure + impure (shared mutability)
  won't work with parallelStream()
  #+begin_src java
    List<String> namesofOlderThan30 = new ArrayList<>();
    createPeople().stream()
        .filter(person -> person.getAge() > 30)
        .map(Person::getName)
        .map(String::toUpperCase)
        .forEach(name -> nameOfOlderThan30.add(name));
  #+end_src
** 00:24:00 better code: using reduce()
  works with .parallelStream()
  #+begin_src java
    List<String> namesofOlderThan30 = new ARrayList<>();
    createPeople().stream()
        .filter(person -> person.getAge() > 30)
        .map(Person::getName)
        .map(String::toUpperCase)
        .reduce
        (
         new ArrayList<String>(),
         (names, name) -> {
             names.add(name);
             return names;
         },
         (names1, names2) -> {
             names1.addAll(names2);
             return names1;
         });
  #+end_src
** 00:29:00 good code: Collector
  works with .parallelStream()
  #+begin_src java
    List<String> namesofOlderThan30 = new ARrayList<>();
    createPeople().stream()
        .filter(person -> person.getAge() > 30)
        .map(Person::getName)
        .map(String::toUpperCase)
        .collect(toList())
  #+end_src
** 00:37:00 Imperative Map<String,Integer>
  #+begin_src java
    Map<String,Integer> nameAndAge = new HashMap<>();
    for(Person person : createPeople()) {
        nameAndAge.put(person.getName(), person.getAge());
    }
    System.out.println(nameAndAge);
  #+end_src
** 00:38:00 Declarative Map<String,Integer>
  #+begin_src java
    System.out.println
        (createPeople.stream()
         .collect(toMap(Person::getName, Person::getAge))
  #+end_src
** 00:41:00 =toUnmodifiableList()= (Java 10)
** 00:45:00 .collect(joining(", "))
** 00:46:00 Collector<T,A,R>
  T - type i dealing with
  A - accumulator
  R - combined value
** 01:04:52 groupingBy() overload
  groupingBy(Function<T,R>)            returns a Collector
  groupintBy(Function<T,R>, Collector)
** 01:05:00 given that what we want is map() we do =mapping()=
  #+begin_src java
    Map<String,List<Integer>> ageByName = people.stream()
        .collect(groupingBy(Person::getName, mapping(Person::getAge, toList())));
  #+end_src
** 01:15:00 collectingAndThen(Collector, Function)
  - Collectors are a recursive structure
  - Applies Arg1 and then Arg2
  | method            | Arg1      | Arg2      |
  |-------------------+-----------+-----------|
  | groupingBy        | Function  | Collector |
  | mapping           | Function  | Collector |
  | collectingAndThen | Collector | Function  |
** 01:16:00 Example: using =collectingAndThen=, to convert Long to Integer the counting()
  #+begin_src java
    Map<String,Long> countByName = people.stream()
        .collect(groupingBy(Person::getName, counting()));
    Map<String,Integer> countByName = people.stream()
        .collect(groupingBy(Person::getName, collectingAndThen(counting(), value -> value.intValue())));
    Map<String,Integer> countByName = people.stream()
        .collect(groupingBy(Person::getName, collectingAndThen(counting(), Long::intValue)));
  #+end_src
** 01:19:00 map/reduce vs mapInt/sum
  #+begin_src java
    people.stream()
        .map(Person::getAge)
        .reduce(0, (total,age) -> total + age);
    people.stream()
        .mapToInt(Person::getAge) // returns a IntStream
        .sum() // is a reduce
  #+end_src
** 01:25:00 Example: using =collectingAndThen=, to unpack an Optional
  #+begin_src java
    // Optional<Person>
    people.stream().collect(collectingAndThen(maxBy(comparing(Person::getAge))));
    // Optional<String>
    // NOTE: could have used .map().orElse() instead collectingAndThen()
    people.stream()
        .collect(collectingAndThen(maxBy(comparing(Person::getAge)),
                                   person -> person.map(Person::getName).orElse("")));
  #+end_src
** 01:28:00 map vs mapping & filter vs filtering
  - filtering was added on JAVA 11
  | filter/map        | transformation in stream           |
  | filtering/mapping | filter/map in the middle of reduce |
  #+begin_src java
    people.stream()
        .collect(groupingByPerson::getAge,
                 mapping(Person::getName,
                         filtering(name -> name.length() > 4,
                                   toList()))));
  #+end_src
** 01:32:00 teeing
  - It merges 2 collectors with the operation given
    | METHOD            | 1         | 2         |         3 |
    |-------------------+-----------+-----------+-----------|
    | teeing            | Collector | Collector | Operation |
    | collectingAndThen | Collector | Function  |           |
    | grouping          | Function  | Collector |           |
    | mapping           | Function  | Collector |           |
** 01:48:00 flatMap
  - is used to map() using a *one-to-many* function
  | map     | Function<T, R>         | Stream<R> |
  | flatmap | Function<T, Stream<R>> | Stream<R> |
** 01:58:00 flatmapping
  #+begin_src java
    people.stream()
        .collect(groupingBy(Person::getAge,
                            flatMapping(person -> Stream.of(person.getName().split("")),
                                        toSet())));
    people.stream()
        .collect(groupingBy(Person::getAge,
                            mapping(person -> person.getName().toUpperCase(),
                                    flatMapping(name -> Stream.of(name.split("")),
                                                toSet()))));
  #+end_src
** 02:09:00 "lambda expressions should be glue code. two lines might be too many."
** 02:16:00 "=Exception handling= is an imperative style of programming concept"
- In FP you deal with the problem downstream
- Reactive??? librarary has 3 channels
  1) data
  2) error: errors are tretead as data
  3) complete
** 02:23:00 sorted() & thenComparing()
#+begin_src java
  people.stream()
      .sorted(comparing(Person::getAge).thenComparing(Person::getName))
      .forEAch(System.out::println);
#+end_src
* 2020 | Java Full Course ☕ -Learn to code today
https://www.youtube.com/watch?v=xk4_1vDrzzo
** 1:59:57 - wrapper classes, provides a way to use primitive DT as reference DT. Related is autoboxing and unboxing
** 2:07:00 - ArrayList is a resizable array, only stores reference DT
  uses .size() instead of .length of Array (?)
** 2:23:44 - methods called on a static method need to be static, this includes the main() method
  - you pass *arguments* to a method
  - you name and receive *parameters* on the method
** 2:40:00 - printf
  % [flags] [precision] [width] [conversion-character]
  flags: -, +, 0, (,)
** 3:12:25 *local*: declared inside a method *global*: declared outside a method
** 3:29:00 .println() calls implicitly to the method .toString() of the object you pass (like in go)
** 3:56:10 it is considered best practice use *@Override* annotation when overriding a method on a subclass
** 4:05:00 *abstract* can be used on classes or methods
** 4:10:00 *access modifiers*
  | Modifier    | Class | Package | Subclass | World |
  |-------------+-------+---------+----------+-------|
  | public      | Y     | Y       | Y        | Y     |
  | protected   | Y     | Y       | Y        | NO    |
  | no modifier | Y     | Y       | NO       | NO    |
  | private     | Y     | NO      | NO       | NO    |
** 4:34:40 classes can apply/implement >1 interface, inhereritance is limited extend only ==1 super
** 4:54:00 *dynamic polymorphism*  means we can declare a variable of a super class and finish declaring it later with a sub class
** 5:18:40 javax.sound.sampled
  #+begin_src java
    import javax.sound.sampled.*;
    import java.io.File;
    public class Main throws UnsupportedAudioFileException, IOException, LineUnavailableException {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            File file = new File("Level_Up.wav");
            AudioInputStream audioStream = AudioSystem.getAudioInputStream(file);
            Clip clip = AudioSystem.getClip();
            clip.open(audiostream);
            clip.start();
            String response = scanner.next();
        }
    }
  #+end_src
** 5:28:00 *JFrame*
- uses the *border* layout managment (.setVerticalAligment())
#+begin_src java
  import java.awt.Color;
  import javax.swing.JFrame;
  import javax.swing.ImageIcon;
  public class Main {
      public static void main(String[] args) {
          JFrame frame = new JFrame();

          frame.setSize(240, 240);
          frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
          frame.setResizable(false);
          frame.setTitle("some title");
          frame.setVisible(true);

          ImageIcon image = new ImageIcon("logo.png");
          frame.setIconImage(image.getImage());

          frame.getContentPane().setBackground(Color.green);
          frame.getContentPane().setBackground(new Color(25, 13, 3));
          frame.getContentPane().setBackground(new Color(0xff119a));
      }
  }
  #+end_src
** 5:40:00 *JLabel*, is a display area
  #+begin_src java
    Label label = new Label();
    label.setText("label text");
    label.setIcon(new ImageIcon("dude.png"));
    label.setBounds(0,0,250,250); // optional set label sizes
    frame.setLayout(null);// optional to make the label NOT occupy the whole frame
    frame.setSize(500,500); // optional
    frame.add(label);
    frame.pack(); // optional: resizes the frame to accomodate all the components, (not compatible with 3 optional above)
  #+end_src
** 5:57:00 *JPanel*
- uses FlowLayout by default
- frame > panel > label
- we can .add() components to it
- you can add it to a JFrame
#+begin_src java
  JLabel label = new JLabel("text here");
  JPanel panel = new JPanel();
  panel.setBounds(0,0,250,250);
  panel.add(label);
  frame.add(panel); // FRAME
#+end_src
** 6:10:00 JButton + ActionListener interface
#+begin_src java
  public class MyFrame extends JFrame implements ActionListener {
      JButton button;
      MyFrame() {
          button = new JButton();
          button.addActionListener(this);
          this.setVisible(true);
          this.add(button);
      }
      @Override
      public void actionPerformed(ActionEvent e) {
          if (e.getSource()==button) {
              System.out.println("poo");
          }
      }
  }
#+end_src
** 6:15:00 JButton + Lambda instead of using the interface
#+begin_src java
  public class MyFrame extends JFrame {
      JButton button;
      MyFrame() {
          button = new JButton();
          button.addActionListener(e -> System.out.println("poo"));
          this.setVisible(true);
          this.add(button);
      }
  }
#+end_src
** Layouts Management
- *FlowLayout*,  it sticks them to the top and centers them, until the row is filled
  - ME: like css flex
  - .setLayout(new FlowLayout(FlowLayout.CENTER, OPTIONAL_SPACING_X, OPTIONAL_SPACING_Y))
- *BorderLayout* as the layout management on the panel, it centers vertically and left horizontally
  - components take as much space as possible
  - .setLayout(new BorderLayout(OPTIONAL_MARGINX,OPTIONAL_MARGINY))
  - we can use .setHorizontally() .setVertically()
  - or we can set the position on the .add() second parameter
- *GridLayout*
  - ME: like css grid
  - places components into cells, in a number of rows and colums
  - each cell is of same size
  - .setLayout(new GridLayout(OPTIONAL_NUMBER_OF_ROWS, OPTIONAL_NUMBER_OF_COLS, OPTIONAL_MARGIN_X, OPTIONAL_MARGIN_Y))
- when layout managment is set to *null* as the layout management on the container of the panel
  - we need to .setBounds()
** 6:47:00 JLayeredPane
- used to stack components
- like a JPanel but provides a 3rd dimension Z
- first .add() is at the top
- Name of the layers, from the bottom to the front of the screen
  0) Default
  1) Palette
  2) Modal
  3) PopUp
  4) Drag
- .add(COMPONENT, JLareyedPane.DEFAULT_LAYER)
  .add(COMPONENT, Integer.valueOf(0))
** 7:04:00 frame.dispose() is used to close the frame, other might be open
** 7:06:00 JOptionPane
- popup dialog box to inform of something
- .showMessageDialog(PARENTORNULL, MESSAGE, TITLE, MESSAGE_TYPE)
  - .PLAIN_MESSAGE
  - .INFORMATION_MESSAGE
  - .QUESTION_MESSAGE
  - .WARNING_MESSAGE
  - .ERROR_MESSAGE
- .showConfirmDialog(PARENTORNULL, MESSAGE, TITLE, OPTION_TYPE)
  - .YES_NO_CANCEL
  - returns 0,1,2 or -1. If Yes/No/Cancel/Closed
- .showInputDialog(MESSAGE)
- .showOptionDialog()
** JTextField
** 10:15:23 Generic
- Methods and Classes
- Enable types (classes and interfaces) to be paremeters when defining classes, interfaces or methods
  Eliminates the necessity to have multiple versions for different data types
*** Generic Methods
#+begin_src java
  public class Main {
      public static void main(String[]args) {
          Integer[] intArray = { 1, 2, 3, 4 };
          String[] stringArray = { "B", "Y", "E" };
          displayArray(intArray);
          displayArray(stringArray);
      }
      public static <T> void displayArray(T[] array) {
          for (T x : array) {
              System.out.print(x+" ");
          }
          System.out.println();
      }
  }
#+end_src
*** Generic Classes
#+begin_src java
  public class Main {
      public static void main(String args[]) {
          MyGenericClass<Integer> myInt = newMyGeneriClass<>(1);
          MyGenericClass<Double> myDouble = newMyGeneriClass<>(4.44);
          System.out.println(myInt.getValue());
          System.out.println(myDouble.getValue());
      }
  }
  #+end_src
#+begin_src java
    public class MyGenericClass <T> {
        T x;
        MyGeneriClass(T x) {
            this.x = x;
        }
        public T getValue() {
            return x;
        }
    }
  #+end_src
*** Bounded Types
- allows you to create objects of a generic class to have data of a specific derived type
#+begin_src java
  public class MyGenericClass <T extends Number> {
      //...
  }
#+end_src
* 2020 | Java Tutorial for Absolute Beginners: Learn Java in 3 hours
https://www.youtube.com/watch?v=sjGjoDiD2F8
** ~pre and post incrementing~, do the incrementation before or after returing a value
  #+begin_src java
  ++someVar;
  someVar++;
  #+end_src
** 0:53:00 Instructions
  - the (=) reads as "becomes"
  - changing state
  - order matters
  #+begin_src java
  aNumber = 45;
  aNumber = aNumber + 6;
  #+end_src
** 1:26:00 a "Person" class is a =reference type=
** 1:33:00 if you want to use the _same variable name_ at
  the parameters of the constructor AND the instance variables
  use this.
  #+begin_src java
    class Person {
        String username;
        int age;
        public Person(String username, int age) {
            this.username = username;
            this.age = age;
        }
    }
  #+end_src
** 1:39:35 a =method= is pieces of code attached to a single type
** 1:50:30 all =reference types= (classes) can have methods
** 2:13:00 =static methods= can ONLY use static variables, NOT instance variables
** 2:15:46 =private/public/protected= are an ~access modifiers~
no modifier (aka package modifier) means that it can be accessed by the same package
** 2:19:00 =method signature= = access modifier + (static) + return type + method name + argument list
* 2022 | Parsing Java Bytecode with Python      | Tsoding
** JelloVM Ep.01
https://www.youtube.com/watch?v=67FmRyv8jTM
- code https://github.com/tsoding/JelloVM
- Class File Format https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html
  - in big-endian
- "0xCAFEBABE" is the java class file "magic"
- placeholder python
  #+begin_src python
    assert False, "not implemented"
  #+end_src
- format string
  #+begin_src python
  variable = 10
  f"the value of variable = {variable}"
  #+end_src
