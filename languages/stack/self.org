- Concatenative programming is so called because it uses function compos
  ition instead of function applicationâ€”a non-concatenative language is thus called applicative. [[http://evincarofautumn.blogspot.com/2012/02/why-concatenative-programming-matters.html][1]]

- stacks: explicit access to 2
  - data stack
  - return stack: for control

- wiki https://en.wikipedia.org/wiki/Concatenative_programming_language
  - term born with Joy (2001) and Manfred von Thun
- wiki https://en.wikipedia.org/wiki/Stack-oriented_programming
- no stinking loops http://www.nsl.com/
- https://docs.factorcode.org/content/article-tour-concatenative.html
  - in a world where
    1) every value is a function
    2) the only operation alloed is function composition
  - composition would be implicit "f g", first execute f, then execute g
  - to make incompatible function signatures work,
    functions have to thread the global state,
    passing it to teach other
- wiki https://en.wikipedia.org/wiki/Stack_machine
  - Examples
    - the WASM (WebAssembly) bytecode VM, is a stack machine
    - Ethereum EVM

- music dsp
  - +100 opcodes https://paulbatchelor.github.io/res/soundpipe/docs/
  - HN https://news.ycombinator.com/item?id=21507383
  - home https://paulbatchelor.github.io/proj/sporth.html
  - source https://github.com/PaulBatchelor/Sporth
  - paper https://iclc.toplap.org/2017/cameraReady/sporth.pdf
  - live https://audiomasher.org/learn/recipes_machines_at_work
  - [X] video https://www.youtube.com/watch?v=GFbhK2d1ImM
  - video? https://www.youtube.com/watch?v=jR4tbU63j-E
  - songs
    - source https://paulbatchelor.github.io/sporthlings/011/
    - video https://www.youtube.com/playlist?list=PLgEE92LPHEljTLN9gFZr21ETOBxQueoTQ
  - tuto https://audiomasher.org/learn/about_cookbook
  - tuto https://paulbatchelor.github.io/proj/cook/
  - article https://paulbatchelor.github.io/proj/cook/recipes/bones/
  - article arduino https://pbat.ch/blog/posts/2016-10-07-sporth_arduino.html
  - tool: for pd https://paulbatchelor.github.io/blog/posts/2017-07-01-pdsporth.html
  - tool: for chuck https://ccrma.stanford.edu/~pbatch/220a/fp.html

- list of programming languages https://concatenative.org/wiki/view/Front%20Page
  - postscript (82)
  - cpython    (91)
  - jvm        (95)
  - factor     (03)
- https://github.com/JohnEarnest/Mako
  - language: maker
  - vm

- 12 article http://evincarofautumn.blogspot.com/2012/02/why-concatenative-programming-matters.html
- from [[https://ratfactor.com/forth/the_programming_language_that_writes_itself.html][rafactor.com: forth]]
  - contrast with _applicative_ language (algol-like)
    #+begin_src sh
      eat(bake(prove(mix(ingredients))))
    #+end_src
  - _concatenative_ language
    #+begin_src
      ingredients mix prove bake eat
    #+end_src
    - has us composing functions/verbs simply putting them in sequence
    - no names (unless we want them), just nouns and verbs
