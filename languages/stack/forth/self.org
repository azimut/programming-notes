- home https://www.forth.com/resources/forth-programming-language/
- home https://forth-standard.org/
- wiki https://en.wikipedia.org/wiki/Forth_(programming_language)
  - Author: Charles H. Moore (aka Chuck Moore) https://en.wikipedia.org/wiki/Charles_H._Moore
  - 1970-
  - Used by NASA https://web.archive.org/web/20101024223709/http://forth.gsfc.nasa.gov/


- Implementations
  - https://gforth.org/
  - https://www.forth.com/swiftforth/
  - esp https://github.com/chochain/eforth
    arduino uno https://github.com/chochain/eForth1
  - https://eforth.appspot.com/classic.html
  - https://www.forth.org/eforth.html
  - forth on uxn http://www.call-with-current-continuation.org/uf/uf.html


- OS
  - http://collapseos.org/
    http://collapseos.org/forth.html
  - http://duskos.org/
    - https://www.youtube.com/watch?v=AIZz3MniUT0
    - build a C compiler in forth
  - rpi https://github.com/organix/pijFORTHos


- https://www.btbytes.com/forth.html
- how to write a forth? (in ASM)
  http://git.annexia.org/?p=jonesforth.git;a=blob;f=jonesforth.S
  http://git.annexia.org/?p=jonesforth.git;a=blob;f=jonesforth.f
- https://github.com/ForthHub

* language

- Portability
  - CPU registers change a lot between hardware, but all machines have a "stack"
    https://www.youtube.com/watch?v=faHB4MGQIG8
- everything is separated by a space, new line is considered a space
- Forth programs are made of NUMBERS and WORDS separated by spaces
- NUMBERS
  - are pushed to the data stack
- WORDS
  - are interpreded and executed on the fly
  - consume their arguments, removing them from the stack
  - . and +, are words too
- Booleans
  - true  is -1
    false is  0
  - because they are defined as bitmasks

#+begin_src forth
  : is-5? 5 = if 71 emit then ;
  : is-5? 5 = if 71 emit else 72 emit then ;
  : 6-gs 6 1 do i 71 emit loop ;
#+end_src

** words (default)
T = take
P = put
|--------------+---+---+-------+-------+--------------------------------------------------------------------------------|
|              | T | P | stack | diag  |                                                                                |
|--------------+---+---+-------+-------+--------------------------------------------------------------------------------|
| over         | - | 1 | a b   | a b a | dup top+1 number                                                               |
| dup          | - | 1 | n     | n n   | when you want to use+keep top number                                           |
| 2dup         | - | 2 |       |       | aka "over over" (dup 2 top places)                                             |
|--------------+---+---+-------+-------+--------------------------------------------------------------------------------|
| rot          | - | - | a b c | b c a | pushes up 3rd element to the top                                               |
| -rot         | - | - |       |       | ? aka "rot rot" (push top 2 places below)                                      |
|--------------+---+---+-------+-------+--------------------------------------------------------------------------------|
| nip          | 1 | - | a b   | b     | trashes 2nd to top of the stack                                                |
| drop         | 1 | - | a b   | a     | trashes top of stack                                                           |
| 2drop        | 2 | - |       |       | aka "drop drop"                                                                |
|--------------+---+---+-------+-------+--------------------------------------------------------------------------------|
| swap         | - | - | a b   | b a   | top 2 elements                                                                 |
|--------------+---+---+-------+-------+--------------------------------------------------------------------------------|
| words        | - | - |       |       | shows all available words                                                      |
| .            | 1 | - |       |       | pop & display top as number                                                    |
| .s           | - | - |       |       | shows whole stack                                                              |
| emit         | 1 | - | a     |       | pop & display top as character                                                 |
| bl           | 1 | - |       |       | push the code for space " "                                                    |
| space        | - | - |       |       | aka "bl emit"                                                                  |
| cr           | - | - |       |       | emits a carriare return (aka new line)                                         |
| page         | - | - |       |       | clears screen                                                                  |
| char C       | 1 | - |       |       | puts character code for  "C" into stack                                        |
| at-xy        | - | 2 |       |       | puts cursor at xy position in stack                                            |
| esc[         | - | - |       |       | aka "27 emit 91 emit", for escape control char                                 |
| ." STR"      | - | - |       |       | emits STR                                                                      |
|--------------+---+---+-------+-------+--------------------------------------------------------------------------------|
| mod          | 2 | 1 |       |       | remainder of division                                                          |
| /mod         | 2 | 2 |       |       | quotient and remainder of division                                             |
| negate       | 1 | 1 |       |       |                                                                                |
| max          | 2 | 1 |       |       |                                                                                |
| min          | 2 | 1 |       |       |                                                                                |
|--------------+---+---+-------+-------+--------------------------------------------------------------------------------|
| EXECUTE      |   |   |       |       | gets an address from the stack and runs whatever word is found at that address |
| VARIABLE foo |   |   |       |       | defines "foo" as a new variable                                                |
| foo          |   |   |       |       | leaves it's address on the stack                                               |
| ' bar        |   |   |       |       | gets the address of the word "bar" and puts in on the stack                    |
| !            |   |   |       |       | stores a =value= from the stack at ~address~ on the stack                      |
| @            |   |   |       |       | loads the =value= from the given ~address~ and puts the =value= on the stack   |
|--------------+---+---+-------+-------+--------------------------------------------------------------------------------|
* snippets

- high order functions in Forth https://gist.github.com/adolfopa/64a1a59c28cbd77b71449d68f4c36dc0

|---------------------------+-------------+-----------------------------------------------------|
|                       <r> |         <r> |                                                     |
|---------------------------+-------------+-----------------------------------------------------|
|                    0 10 . |           0 | pop top of stack                                    |
|                     10 20 |       10 20 |                                                     |
|                   50 20 - |          30 |                                                     |
|                   10 20 + |          30 |                                                     |
|            : add10 10 + ; |             | defines a new word "add10"                          |
|                   5 add10 |          15 |                                                     |
|                     2 dup |         2 2 |                                                     |
|                  1 2 swap |         2 1 |                                                     |
|                   10 emit |             | prints ascii of the number on stack                 |
|           10 20 over over | 10 20 10 20 | duplicates the top 2 elements                       |
|             1 2 3 rot rot |       2 1 3 | pushes down top by 2 places                         |
|            1 2 3 swap rot |       3 2 1 | sorts top 3 elements in the order they were entered |
|---------------------------+-------------+-----------------------------------------------------|
|                   27 emit |             | (aka "ESC[") emits the ESC character                |
|           27 emit ." [2J" |             | (aka "PAGE") clears entire screen                   |
| 27 emit ." [5;3H" 42 emit |             | (aka "AT-XY") moves cursor and prints "*" (42)      |
|           esc[ ." 31mFoo" |             | prints in red from now on                           |
|         cr esc[ ." 0mQux" |             | reset all terminal display attributes               |
|---------------------------+-------------+-----------------------------------------------------|
