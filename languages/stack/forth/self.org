- home https://www.forth.com/resources/forth-programming-language/
- home https://forth-standard.org/
- wiki https://en.wikipedia.org/wiki/Forth_(programming_language)
  - Author: Charles H. Moore (aka Chuck Moore) https://en.wikipedia.org/wiki/Charles_H._Moore
  - 1970
  - Used by NASA https://web.archive.org/web/20101024223709/http://forth.gsfc.nasa.gov/


- Implementations
  - https://github.com/gmpalter/cl-forth
  - https://gforth.org/
  - https://www.forth.com/swiftforth/
  - esp https://github.com/chochain/eforth
    arduino uno https://github.com/chochain/eForth1
  - https://eforth.appspot.com/classic.html
  - https://www.forth.org/eforth.html
  - forth on uxn http://www.call-with-current-continuation.org/uf/uf.html
  - r3 (colorForth inspired) https://github.com/phreda4/r3
  - colorForth
    - http://www.merlintec.com/download/color.html
    - https://wiki.c2.com/?ColorForth
    - https://concatenative.org/wiki/view/colorForth
    - https://en.wikipedia.org/wiki/ColorForth
    - https://colorforth.github.io/cf.htm
  - muforth https://muforth.dev/
    - good for microcontrollers


- OS
  - http://collapseos.org/
    http://collapseos.org/forth.html
  - http://duskos.org/
    - https://www.youtube.com/watch?v=AIZz3MniUT0
    - build a C compiler in forth
  - rpi https://github.com/organix/pijFORTHos


- forth strings https://websites.umich.edu/~williams/archive/forth/strings/fstrings/fstrings.txt
- https://www.btbytes.com/forth.html
- how to write a forth? (in ASM)
  http://git.annexia.org/?p=jonesforth.git;a=blob;f=jonesforth.S
  http://git.annexia.org/?p=jonesforth.git;a=blob;f=jonesforth.f
- https://github.com/ForthHub

* language

- Name's origin name likely coming due Chuck used a filesystem with filenames limit of 5 characters
- Portability
  - CPU registers change a lot between hardware, but all machines have a "stack"
    https://www.youtube.com/watch?v=faHB4MGQIG8
- everything is separated by a space, new line is considered a space
- Forth programs are made of NUMBERS and WORDS separated by spaces
- standards
  - fig-Forth (78)
  - FORTH-79
  - FORTH-83
  - ANS FORTH (94)
- char?
  - 'a'
- string?
  - s" foo"
  - leaves the address and length on the stack, not the string itself
- DOUBLE
  - double precision, but not float
  - occupy 2 places in the stack, 2 numbers
  - MSW(more), LSW (less) significant words
  - MSW*2^64+LSW
- NUMBERS
  - are pushed to the data stack
  - can contain underscores
- WORDS
  - are interpreded and executed on the fly
  - consume their arguments, removing them from the stack
  - . and +, are words too
- Booleans
  - TRUE  word is -1
  - FALSE word is  0
  - because they are defined as bitmasks

** comments

they are commands, thus the space

#+begin_src forth
  \ comment line
  .(
     comment block
     also displayed in CLI
  )
  (
    comment
    block
  )
  2 2 + . ( other comment )
#+end_src

** new words

 x any type
 n number
 u unsigned
 d double
ud unsigned double

#+begin_src forth
  : is-5? 5 = if 71 emit then ; ( other comment )
  : is-5? 5 = if 71 emit else 72 emit then ;
  : 6-gs 6 1 do i 71 emit loop ;
#+end_src

** words (default)
- https://forth-standard.org/standard/core
- case insensitive
- T = take
- P = put
|---+--------------+---+-------+-------+--------------------------------------------------------------------------------|
|   |     <c>      |   |   <r> |   <r> |                                                                                |
| T |              | P | stack |  diag |                                                                                |
|---+--------------+---+-------+-------+--------------------------------------------------------------------------------|
| - |     over     | 1 |   a b | a b a | dup top+1 number                                                               |
| - |     dup      | 1 |     n |   n n | when you want to use+keep top number                                           |
| - |     2dup     | 2 |       |       | aka "over over" (dup 2 top places)                                             |
|---+--------------+---+-------+-------+--------------------------------------------------------------------------------|
| - |     rot      | - | a b c | b c a | pushes up 3rd element to the top                                               |
| - |     -rot     | - |       |       | ? aka "rot rot" (push top 2 places below)                                      |
|---+--------------+---+-------+-------+--------------------------------------------------------------------------------|
| 1 |     nip      | - |   a b |     b | trashes 2nd to top of the stack                                                |
| 1 |     drop     | - |   a b |     a | trashes top of stack                                                           |
| 2 |    2drop     | - |       |       | aka "drop drop"                                                                |
|---+--------------+---+-------+-------+--------------------------------------------------------------------------------|
| - |     swap     | - |   a b |   b a | top 2 elements                                                                 |
|---+--------------+---+-------+-------+--------------------------------------------------------------------------------|
| - |    words     | - |       |       | shows all available words                                                      |
| 1 |      .       | - |       |       | pop & display top as number                                                    |
| - |      .s      | - |       |       | shows whole stack, without popping anything                                    |
| 1 |     emit     | - |     a |       | pop & display top as character                                                 |
| 1 |      bl      | - |       |       | push the code for space " "                                                    |
| - |    space     | - |       |       | aka "bl emit"                                                                  |
| - |      cr      | - |       |       | emits a carriare return (aka new line)                                         |
| - |     page     | - |       |       | clears screen                                                                  |
| 1 |    char C    | - |       |       | puts character code for  "C" into stack                                        |
| - |    at-xy     | 2 |       |       | puts cursor at xy position in stack                                            |
| - |     esc[     | - |       |       | aka "27 emit 91 emit", for escape control char                                 |
| - |   ." STR"    | - |       |   n a | emits STR                                                                      |
|---+--------------+---+-------+-------+--------------------------------------------------------------------------------|
| 2 |     mod      | 1 |       |       | remainder of division                                                          |
| 2 |     /mod     | 2 |       |       | quotient and remainder of division                                             |
| 1 |    negate    | 1 |       |       |                                                                                |
| 2 |     max      | 1 |       |       |                                                                                |
| 2 |     min      | 1 |       |       |                                                                                |
|   |   + D+ M+    |   |       |       | add number: single, dpn or mixed                                               |
|---+--------------+---+-------+-------+--------------------------------------------------------------------------------|
| 1 |   EXECUTE    |   |       |       | gets an address from the stack and runs whatever word is found at that address |
|   | VARIABLE foo |   |       |       | defines "foo" as a new variable                                                |
|   |     foo      |   |       |       | leaves it's address on the stack                                               |
|   |    ' bar     |   |       |       | gets the address of the word "bar" and puts in on the stack                    |
| 2 |      !       | - |       |       | stores a =value= from the stack at ~address~ on the stack                      |
| 1 |      @       | 1 |       |       | loads the =value= from the given ~address~ and puts the =value= on the stack   |
|   |      CR      |   |       |       | carriage return                                                                |
|---+--------------+---+-------+-------+--------------------------------------------------------------------------------|
* snippets

- high order functions in Forth https://gist.github.com/adolfopa/64a1a59c28cbd77b71449d68f4c36dc0

|---------------------------+-------------+-----------------------------------------------------|
|                       <r> |         <r> |                                                     |
|---------------------------+-------------+-----------------------------------------------------|
|                    0 10 . |           0 | pop top of stack                                    |
|                     10 20 |       10 20 |                                                     |
|                   50 20 - |          30 |                                                     |
|                   10 20 + |          30 |                                                     |
|            : add10 10 + ; |             | defines a new word "add10"                          |
|                   5 add10 |          15 |                                                     |
|                     2 dup |         2 2 |                                                     |
|                  1 2 swap |         2 1 |                                                     |
|                   10 emit |             | prints ascii of the number on stack                 |
|           10 20 over over | 10 20 10 20 | duplicates the top 2 elements                       |
|             1 2 3 rot rot |       2 1 3 | pushes down top by 2 places                         |
|            1 2 3 swap rot |       3 2 1 | sorts top 3 elements in the order they were entered |
|---------------------------+-------------+-----------------------------------------------------|
|                   27 emit |             | (aka "ESC[") emits the ESC character                |
|           27 emit ." [2J" |             | (aka "PAGE") clears entire screen                   |
| 27 emit ." [5;3H" 42 emit |             | (aka "AT-XY") moves cursor and prints "*" (42)      |
|           esc[ ." 31mFoo" |             | prints in red from now on                           |
|         cr esc[ ." 0mQux" |             | reset all terminal display attributes               |
|---------------------------+-------------+-----------------------------------------------------|

* codebases

- raylib https://github.com/ArnautDaniel/gforth-raylib
  - https://github.com/raysan5/raylib/wiki/Working-on-GNU-Linux
  - https://github.com/ArnautDaniel/bearbit/blob/main/bearbit.f
- simple rogue like mode https://github.com/nrkn/SimpleRL/blob/master/forth/SimpleRL.fs
- SDL Gameboy emulator https://github.com/robertoabraham/forthboy
- r3 SDL gamejam entries
  - https://github.com/phreda4/r3-games/tree/main
  - https://github.com/phreda4/r3-games/blob/main/gamejamd/velocicracia/velocicracia.r3
