- https://google.github.io/comprehensive-rust/welcome.html
* Tutorial: EasyRust
https://github.com/Dhghomon/easy_rust
** Comments

#+begin_src rust
// Comment
/* Comment */
let some_number  /*: i16*/ = 100;
#+end_src

** Types
*** Primitive types
- ~usize~, ~isize~, are architecture dependant i32 or i64
  - usize is used for indexing
- ~as~ used for casting
  - can be used twice
  - *casting* is like "pretend" a value is a type
- ~char~
  - use single quotes for char
  - 4 bytes
  - some characters are 1,2,3 or 4 bytes long
  - .len() gives the size in bytes
  - .chars().count()
** Type inference
#+begin_src rust
  let a = 100_000; // default to i32
  let b = 5.;      // default to f64 ... but depending of context used it might choose f32...
  let c: u8 = 1;
  let d = 1u8;     // uses type u8
#+end_src
*** Floats
- Can't add f32 and f64 directly
- Defaults to f64
- Rust compiler miiiight infer to use f32n
** Printing 'hello, world!'
- ~macros~ have a ~!~ after them
- return and (;)
  #+begin_src rust
  fn beta() -> i32 {
    8 // without a ; it can be used like this, otherwise it would return ()
    // return 8;  // Same but less idiomatic
    // 8;         // It will return ()
  }
  #+end_src
- (->) is called *skinny arrow*, shows the return type of a function
- {} *code blocks* can be def anywhere, and return values from it
** Display and debug
- {} and ~pretty printers~ {:?} {:#?}
- std::i8::MIN
- std::i8::MAX
** Mutability
- let mut x = 10; - ~mutability~, when a variable can be changed
- let x = 2;      - ~shadowing~, if are the same type, although effectively are different variables
  let x = 10;
** The Stack, Heap and Pointers
|-------+---------+---------------------|
|       | Speed   | Size at compilation |
|-------+---------+---------------------|
| Stack | Fastest | yes                 |
| Heap  | Fast    | no                  |
|-------+---------+---------------------|
#+begin_src rust
  let x: isize = 3;
  let b = &x; // b is a REFERENCE to x
              // b BORROWS x
              // b has type &isize
#+end_src
** More about printing
|-------------------------------+-------------------------|
| r#""raw"\tlines\n"#           |                         |
| b"this string of ASCII bytes" |                         |
| \u{D589}                      | unicode printing        |
| {:p}                          | pointer                 |
| {:b} {:x} {:o}                | binary, hexa, and octal |
| {0} {1}                       | order of arguments      |
| {foo} {bar}                   | name of arguments       |
|-------------------------------+-------------------------|
- {variable:padding alignment minimum.maximum}
  - no spaced ({:0^10})
  - can ommit variable name
  - alignment <>^ (left/right/middle)
** Strings
|--------+--------------------------------+-----------+--------+---------|
| type   | initialization                 | ownership | alloc? | speed   |
|--------+--------------------------------+-----------+--------+---------|
| &str   | let a = "hello";               | borrowed  | data?  | fastest |
| String | let a = String::from("hello"); | owned     | heap   | fast    |
|--------+--------------------------------+-----------+--------+---------|
- std::mem::size_of::<String>() = 24bytes
  std::mem::size_of::<i8>()     =  1bytes
  std::mem::size_of_val("abc")  =  3bytes
- ~format!()~ -- like print! but returns the value instead
** const and static
#+begin_src rust
  const NUMBER_OF_MONTHS: u32 = 12;
  static SEASONS: [&str; 4] = ["Spr", "Su", "F", "Win"];
#+end_src
- ~const~ , doesn't change
  ~static~, doesn't change, fixed memory location
- people use const more often
- CAPITALIZED
- outside main
** More on references
- Memory refences live by scope (function, block?)
  - A function cannot return a reference that it created
- While you own *String*, you can't pass around ownership through &String
** Mutable references
- (*) ~dereferencing~ ("I dont't want the value...I want the value behind")
- you have to use &mut instead of &
  - when referencing (&) a mutable
- many   immutable references allowed
  1(one) mutable reference allowed
- Cannot interwine mutable and immutable reference usages
#+begin_src rust
  fn main() {
      let mut my_number = 8;
      let num_ref = &mut my_number; // is a mutable reference to an TYPE
      *num_ref += 10;
  }
#+end_src
*** Shadowing Again
** Giving references to functions
- ~A value can only have one owner~
- Without passing a reference to a function, we pass the ownership along the value.
  - We don't get that back
  - Once we lost the ownership we can't use it or pass it back
  - If the new owner dies (exits) the data is *destroyed*
- A mutable reference, can be modified ofc
- A mutable value    , takes the ownership AND can modify it
** Copy types
- integers, floats, booleans and char
  - always passed a copy to a function (no ownership)
  - stack allocated
- String implements the trait ~Clone~
  - .clone()
  - effectively creates a copy of the String
  - using &String is preffered
- un-initialized variables
  - when we assign it on a sub block of code
** Collection Types
| Type   | init                     | signature   | access | size    | Types     |
|--------+--------------------------+-------------+--------+---------+-----------|
| array  | [1,2] ["A";10]           | [TYPE;SIZE] | a[0]   | fixed   | uniform   |
| vector | Vec::new() .push()       | Vec<TYPE>   | v[0]   | dynamic | uniform   |
|        | Vec<String> = Vec::new() |             |        |         |           |
|        | vec![1,2]                |             |        |         |           |
|        | Vec<_> = [1,2].into()    |             |        |         |           |
| tuples |                          | (T1, T2)    | t.0    | fixed?  | different |
- tuple, an empty one is () and means nothing
       , is used for ~destructuring
- vectors have a ~capacity~, automatically doubled when needed
  - let mut avector = Vec::with_capacity(100)
- array/vector slicing &a[1..2]
               has exclusive index slicing
** DONE Control flow
- both must return the same type
- if
  else if
  else
- match
  - mandatory to cover all, "else" with _
  - each line is called *arm*
    - => separate match and action
    - ,  comma between each line
    - ;  semicolon after the braces to return a value
  - support for guards (if)
  - support tuples, creating it on the argument or on the matches
  - @ can be used to name the match
** DONE Structs
#+begin_src rust
struct AUnit;         // "unit struct"
struct ATuple(i8,i8); // "tuple struct" or "unnamed struct"
struct ANamed {       // "named struct"
    size: u32,
    color: ATuple,
} // DO NOT add a semicolon after, "there is whole block of code after it"
#+end_src
** Enums
- let a = ThingsInsky::Sun; // Assign a *variant*
- each member gets a number from 0 to 10
  - can be given different numbers
#+begin_src rust
enum ThingsInSky {
    Sun,
    Stars,
}
enum ThingsInSky {
    Sun = 10,
    Stars = 100,
}
enum ThingsInSky {
    Sun(String),
    Stars(String),
}
let b = ThingsInSky::Stars("I can see the Sky");
#+end_src
- can destructure (on a match), the content of the enum
- can import (with ~use ENUMNAME::*~) the enum
  (in a function) to avoid writing the ENUMNAME
- each member can have different types
  - can be (mis?)used to return different types, while being that enum
** DONE Loops
- loop {break}
  loop {break RETURNVALUE;}
  'named_loop: loop {break 'named_loop}
- while 1==1 {}
- for n in 1..3 {}
** DONE Implementing (on) structs and enums
- impl
- #[] are attributes
- Methods
  - Regular: take &self(or &mut self), use .methoname() to call them
  - Associated/Static: do NOT take &self, use ::methodname() to cal them
- ~Self~ and ~self~ can be replaced with the literal StructName
   fn new() -> Self
   fn new() -> Animal
   fn change(&mut self)
   fn change(&mut Animal)
   fn change(&self)
   fn change(&Animal)
   #+begin_src rust
   #[derive(Debug)]
   struct Animal {
       age: u8,
       animal_type: AnimalType,
   }
   #[derive(Debug)]
   enum AnimalType {
       Cat,
       Dog,
   }
   impl Animal {
      new() -> Self {
          Self {
            age: 10,
            animal_type: AnimalType::Cat,
          }
      }
   }
   #+end_src
** DONE Destructuring
- a Struct can be destructure on a let
** DONE References and the dot operator
- ~*~ dereferencing happens automatically with the ~.~ operator in struct fields
  - from &i32 to i32
** DONE Generics
- We can make a function to take any type. Usually name T.
  #+begin_src rust
  fn afunction<T>(name: T) -> T {
     T
  }
  #+end_src
- We can also ensure certain traits on it.
  #+begin_src rust
  use std::fmt::Debug;
  fn afunction<T: Debug>(name: T) -> T {
     T
  }
  #+end_src
- We can have multiple types for multiple arguments, with different traits
   #+begin_src rust
   use std::fmt::Display;
   use std::cmp::PartialOrd;
   fn afunction<T: Display, U: Display + PartialOrd>(name: T, num_1: U) -> T {
      T
   }
   // Alternative format
   fn afunction<T,U>(name: T, num_1: U)
   where
       T: Display,
       U: Display + PartialOrd,
   {
       println!("WHAAAT")
   }
   #+end_src
** DONE Option and Result
- Make rust code safer
- ~Panic~ means that the program stopped before a problem happened.
  And the stack has been unwinded.
- ~.unwrap()~ returns the T of Some(T) or panics if None
- ~if let~ do something if matches
  ~while let~ loop while it matches
*** Option<T>
- Internal shape of Option
  #+begin_src rust
  enum Option<T> {
     None,
     Some(T),
  }
  #+end_src
- can use match to destructure with Some(_)
- .is_some()
  .is_none()
*** Result<T,E>
#+begin_src rust
enum Result<T, E> {
    Ok(T),
    Err(E),
}
#+end_src
- .is_ok(), Result<> to a bool
  .is_err()
** DONE Other Collections
   https://doc.rust-lang.org/beta/std/collections/
- all under
  use std::collections::
*** HashMap<T,T> (and BTreeMap)
- .entry() returns an *enum* called *Entry*
#+begin_src rust
enum Entry<K,V> {
    Occupied(OccupiedEntry<K,V>),
    Vacant(VacantEntry<K,V>),
}
#+end_src
- .or_insert(VALUE) inserts it if the Entry is Vacant,
   otherwise returns a *mut* of the entry
*** HashSet
- A HashMap with ONLY keys
- Used to check the existence of a key on a group.
*** BinaryHeap<T>
- .pop()
- A mostly unsorted collection where the front always has the bigger value
  - works with tuples
- Use case: priority queue
*** VecDeque
- A vector that is fast/good for removing things from both sides
- .pop_front() .pop_back()
  .push_front()
** DONE The ? Operator
- Unwraps if *Ok* otherwise, returns *Error* and ends (function)
- .expect() - instead of using a lot of .unwrap() to explain the error
- .unwrap_or() - to provide a default when a normal unwrap fails
- panic!()
  assert!()
  assert_eq!()
  assert_ne!()
** DONE Traits
- Traits about what a struct *can do*
- Once defined a *trait* you can *impl* for a type
  - On the *impl* you can redefine the default implementation
    - You cannot redefine with a new signature
- use std::fmt;
  impl fmt::Display for T {...}
- ~Trait bounds~, where neither the trait or the impl have method
  instead traits are used as *restrictions* for regular functions
- ~From<T>~
  #+begin_src rust
    use std::convert::From
    impl From<T> for S {
      fn from (a: T) -> Self {
          Self { a }
      }
    }
  #+end_src
- ~AsRef~
  - We can use the trait Asref<str> + Display to accept both &str and String on a function
** DONE Chaining methods
- aka functional style
- let new_vec = (1..=10).collect::<Vec<i32>>()
  OR
  let new_vec: Vec<i32> = (1..=10).collect()
- .into_iter()
  .skip()
  .take()
  .collect()
** DONE Iterators
- .iter()      - iterator of references
  .iter_mut()  - iterator of mutable references (a for loop for example)
  .into_iter() - iterator of values (not references) as a result it destroys the values (ownage)
- .map()       - iters over each element and pass it on
  .for_each()  - iters over each element
- An iterator in the backend are calling .next(), which gives an *Option*
- ~Associated Type~ means "a type that goes together"
    they might be required to define for impl (?)
  #+begin_src rust
  // Item is the Assoc. Type
  impl Iterator for T {
    type Item = S;
    fn next(&mut self) -> Option<i32> {
    }
  }
   #+end_src
** DONE Closures (and iterators)
- aka lambdas
- no argument:   ||       println!("This is a closure");
  typed arg:     |x: i32| println!("{}", x);
  unused arg:    |_|      println!("I dont use the argument")
  multiple line: ||       {}
- normal call: my_closure();
- *closures* vs *anonymous functions*: wheter ~||~ encloses external vars or not
  the later gets compiled to the same of a regular function
- Take a closure: .unwrap_or_else() .map() .for_each()
*** Iterators
- Iterators are ~lazy~, you have to collect() them to process them
  #+begin_src rust
  num_vec         //                Vec<i32>
    .iter()       //               Iter<i32>
    .enumerate()  //     Enumerate<Iter<i32>>
    .map()        // Map<Enumerate<Iter<i32>>>
  #+end_src
- There are times where *the type* of collect is NOT needed so these are the same:
  .collect::<HashMap<i32, &str>>();
  .collect::<HashMap<_, _>>();
  .collect();
|--------------------+----------------------------------------|
| .enumerate()       | vec![10,20,30] -> (0,10),(1,20),(2,30) |
| .char_indices()    | for strings                            |
| .match_indices()   | for strings, find substring            |
|--------------------+----------------------------------------|
| .filter()          | takes closure, returns bool            |
| .filter_map()      | takes closure, returns Option          |
|--------------------+----------------------------------------|
| .unwrap()          | Option<> to value if Some or panic!()  |
| .ok()              | Result<> into Option<>                 |
| .ok_or()           | Option<> into Result<>                 |
| .ok_or_else()      | Option<> into Result<>                 |
| .parse::<T>().ok() |                                        |
| .and_then()        | Option<> into Option<>, "safe" unwrap  |
| .and()             | ?????                                  |
| .any()             | Take a boolean closure                 |
| .all()             | Take a boolean closure                 |
|--------------------+----------------------------------------|
| .find()            | return and Option<>                    |
| .position()        | return and Option<>                    |
|--------------------+----------------------------------------|
| .rev()             | iterator inversed                      |
| .skip()            |                                        |
| .take()            |                                        |
|--------------------+----------------------------------------|
| .fold()            |                                        |
| .sum()             |                                        |
|--------------------+----------------------------------------|
| .cycle()           | makes and infinite iterator            |
| .chars()           | makes and iterator from a string       |
| .peekable()        | a .next() .peek() able iterator        |
|--------------------+----------------------------------------|
| .take_while()      |                                        |
| .skip_while()      |                                        |
| .map_whilte()      |                                        |
| .cloned()          | reference into value                   |
| .by_ref()          | reference into iterator                |
| .chunks()          |                                        |
| .windows()         |                                        |
** DONE The dbg! macro and .inspect
- dbg!() can print variables OR expressions
- .inspect() is like map (!?)
** DONE Types of &str
- Literals: they last the whole program, are ~&'static str~
- Borrowed: a String being referenced (&)
** DONE Lifetimes
- Can be provided on a struct or a field, as a requirement
  struct Name<'a> {
    name: &'a str,
  }
- &'static - if lives for the whole program
  &'a      - if lives as long as
  &'_      - anonymous lifetime, used by impl <'_>
             to indicate that a reference is being used
- avoid lifetimes by staying with "owned types", "cloning"m
- avoid &str in favor or String on structs
** DONE Interior Mutability
|                    | Define     | New               | Set                          |
|--------------------+------------+-------------------+------------------------------|
| std::cell::Cell    | Cell<T>    | Cell::new(VAL)    | .set(VAL)                    |
| std::cell::RefCell | RefCell<T> | RefCell::new(VAL) | .replace(VAL)                |
|                    |            |                   | .replace_with(CLOSURE)       |
| std::sync::Mutex   |            | Mutex::new(VAL)   | *mutex.lock().unwrap() = VAL |
| std::sync::RwLock  |            | RwLock::new(VAL)  | .write().unwrap();           |
|                    |            |                   | *writer = VAL;               |
*** RefCell
- .borrow()
  .borrow_mut()
- Checks borrows at *runtime* not compilation time
- Borrowing:
  1) Many borrows are fine
  2) 1 Mutable borrows is fine
  3) mutable AND immutable are not fine
*** Mutex (Mutual Exclusion)
- .try_lock()
- chan = mutex.lock().unwrap();
  *chan = VAL;
- Locks lasts until the scope is finished
- Unlock manually
  std::mem::drop(mutex_changer)
*** RwLock
- .try_read() .try_write()
- Unlock with std::mem::drop
- Adquires writers/readers same as RefCell
- .read().unwrap()
  let mut writer = .write().unwrap(); *writer = VAL; drop(writer);
** Cow (Clone On Write)
** DONE Type Aliases
- It does NOT create a new type.
  #+begin_src rust
  type CharacterVec = Vec<char>;
  use std::iter::{Take, Skip};
  use std::slice::Iter;
  type SkipFourTakeFive<'a> = Take<Skip<Iter<'a, char>>>
  #+end_src
- If you want the type to be *seen* by the compiler...
  An accepted hack is wrap it on a struct.
- Can use *as* to alias an import
** DONE The todo! macro
- same as ~unimplemented!()~
- Put it inside some function implementation, to silence compiler
** DONE Rc (Reference Counter)
use std::rc::Rc
Rc<T>
Rc::new(t)
Rc::clone(&t) or just t.clone()
Rc::strong_count(&t)
- Reminder: a variable can only have ONE owner
- With *Rc*, a variable can have more then 1(one) owner
- When you CANNOT .clone()
  - Too much data
  - Is inside a struct that can't be clone
- Weak references??!?!?!??!?!?! TODO
** DONE Multiple threads
- std::thread::spawn() -> JoinHandle<T>
  - we can .join() the JoinHandle to wait for the thread to finish
- Closures, by what type of argument they take...
  | FnOnce | the whole value     |
  | FnMut  | a mutable reference |
  | Fn     | a reference         |
- To use an external value in a closure, even by reference. We need to *move||* the closure.
  Since the variable can, for example die before the closure ends.
** DONE Closures in functions (...arguments)
- A closure is always a generic because every time it is a different type
  - We still need to define the "closure type" and what returns.
** DONE impl Trait
- Almost the same as *generics*
- Used in function arguments,
  Instead of:
    fn function<T: Display>(one: T)
  Is:
    fn function(T: impl std::fmt::Display)
- Or in return values, let us return closures (because their function signature are traits)
    fn function() -> impl FnMut(T1) -> T2
** DONE Arc (Atomic Reference Counter)
use std::sync::Arc
Arc<Mutex<T>>
Arc::new(Mutex::new(0))
Arc::clone()
- If you want a *Rc* for a thread, you need this
  - wrapping a *Mutex*
  - cloned
  - *move ||* it into the thread
- Tip: make a constructor
** DONE Channels
std::sync::mpsc || mpsc = Multiple Producer, Single Consumer
fn channel<T>() -> (Sender<T>, Receiver<T>)
.send(T) -> Result<(),SendError<i32>>
.recv()  -> Result<i32, RecvError>
.clone()
.try_recv()
- Can clone it and send/move it to other threads (like Arc)
** Reading Rust documentation
** DONE Attributes #[]
#[] is for the next line
#![] is for the whole file
#[allow(dead_code)]
#[allow(unused_variables)]
#[derive(Trait)]
#[cfg(test)]
#[cfg(target_os = "windows")]
#![no_std]
https://doc.rust-lang.org/reference/attributes.html
** DONE Box
- Box<T>, wraps a type
- Box::new(), creates the Box<T> instance
- AKA ~smart pointer~
  - Can use * operator with Box, just like with an &
  - *heap* stored, instead of the *stack*
- Has not Copy, you need to .clone() it
- Can be used to create *recursive structs* not allowed by default
** DONE Box around traits
- Box can be used to return Traits from functions
  Otherwise the compiler won't allow return something of size unknown.
  JustATrait
  to
  Box<dyn JustATrait>
- Seen often as
  Box<dyn Error>
- Creating an Error
#+begin_src rust
use std::error::Error;
use std::fmt;

#[derive(Debug)]
struct ErrorOne
impl Error for ErrorOne{} // ONE
impl fmt::Display for ErrorOne { // TWO
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "You got the first error!")
    }
}
fn returns_errors(input: u8) -> Result<String, Box<dyn Error>> {
    Err(Box::new(ErrorOne))
}
#+end_src
** DONE Default and the builder pattern
- impl Default for T {
     fn default() -> Self
  }
- let char = T::default();
- The so called *builder pattern* comes into picture with methods that take ownership
  impl Character {
      fn name(mut self, name: &str) -> Self {
          self.name = name.to_string();
          self
      }
  }
  Which can be called like
  let char = T::default().name("WILLY");
- Sanity validations can happen on a method, that is called last on the creation.
  By creating a boolean field on the struct and
    - TRUE on new() and build()
    - FALSE on any other builder method
  fn build(mut self) -> Result<Character, String>
** DONE Deref and DerefMut
- We can implement it for our struct, called "smart pointer"
  - In fact, only limit it to that use case
*** std::ops::Deref
Deref is a Trait that allows you to use *
 - implement deref()
   #+begin_src rust
   use std::ops::Deref;
   struct HoldsANumber(u8);
   impl Deref for HoldsANumber {
       type Target = u8;
       fn deref(&self) -> &Self::Target {
         &self.0
       }
   }
   #+end_src
 - We can also access the methods of:
   - the deferenced struct, without actually dereferencing
   - new methods you define for the struct
*** std::ops::DerefMut
DerefMut, allows to modify with *
  - requires to have implemented Deref
#+begin_src rust
impl DerefMut for HoldsANumber {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
#+end_src
** DONE Crates and modules
- crate>mod
  std::collections::HashMap
       ^ module

- *fn* inside a *mod* are ~private~ by default
  - they can't be imported/use either
  - *pub* on fn, struct (on each item), enum, trait, mod

- Create module
  #+begin_src rust
  mod print_things {
    use std::fmt::Display;
    fn prints_one_thing<T: Display>(input: T) {
      println!("{}", input)
    }
  }
  #+end_src
- You can nest *mod* (a child mod), can *use* anything from the parent mod
  - When we are inside a module we can use *super* to bring in items from above.
** DONE Testing
- #[test] Anotate a function with this
  #[should_panic]
- assert_eq!()
- cargo test
- Usually on a separate module
  - under #[cfg(test)]
  - using super::* on the module
- test functions usually have a descriptive long names
- Writting "just enough" code for the tests to pass first is recommended
** DONE External Crates
- Cargo.toml on root dir
  - code into src/main.rs by default
  - cargo run
- *rand* to generate random numbers,
  within a range with .gen_range()
  use rand::{thread_rng, Rng}
- *rayon* (like cl-parallel),
  it provides parallel alternatives to .iter() methods, like:
  .par_iter()
  .par_iter_mut()
  .par_into_iter()
  .par_chars()
  use rayon::prelude::*;
- *serde*, to convert from/to JSON/YAML
  add Serialize and Deserialize traits to a struct #[]
  Then you can call methods to serialize the struct.
- *regex*
- *chrono* functions for time outside stdlib
** A Tour of the Standard Library
- Arrays:
  - don't have an iterator, but can be .iter() or borrowed (&)
  - Can be destructured
- Char
  - char::from(u8)
    char::try_from(u32)
- Integer
  - .checked_add() .checked_sub() .checked_mul() .checked_div()  
** Writing Macros
** DONE cargo
- cargo>crate
- cargo build/run/check/new/clean
- --release
  longer to compile
  runs faster
- generics take longer to compile, because it needs
  to figure them out, and make it concrete.
** DONE Taking user input
- use std::io
   bandcamp
io::stdin().read_line(&mut something).unwrap()
- .trim()
  .clear()
- std::env::args()
  can be turned into_iter() or just *for*
- std::env::vars()
  for environment variables
  - These do the same
    option_env!()
    env!()
** TODO Using Files
- ? needs to be used on a function that returns Result
- main can return result
  - Ok(())                   // on last time
  - Result<(),ParseIntError> // return value for main()
- special Result for files
  std::io::Result
  which is
  type Result<T> = Result<T,Error>
- std::fs // Where all the functions for files are at
  std::io::Write
- fs::File::create("myfile.txt")?
      .write_all(b"These are bytes written to the file")?
  - same functionality of
  std::fs::write
- std::fs::File::open()
  .read_to_string()
** cargo doc
** The end?
* Tutorial: Rust by Example
https://doc.rust-lang.org/stable/rust-by-example/
** 8 Flow of Control
*** 8.5 Match
**** 8.5.1 Pointers/ref

- Dereferencing uses *

- Destructuring uses &, ref, and ref mut
#+begin_src rust
  let reference = &4;
  match reference {
    &val => println!("{:?}", val),
  }
  // Alternatively, you can dereference before matching
  match *reference {
    val => println!("{:?}", val),
  }
#+end_src

- ref modifies the assignment so that a reference is created for the element
#+begin_src rust
  let ref _is_a_reference = 3;
  match value {
    ref r => println!("{:?}", r),
  }
  match mut_value {
     ref mut m => {
       ,*m += 10; // gotta dereference before we can use it
       println!("{:?}", m);
     },
  }
#+end_src

**** 8.5.2 Guards

You must use the _ pattern at the end.
As the compiler won't check aribitrary expressions for completeness.

**** 8.5.3 Binding @

It can also be used with enum's like Option
#+begin_src rust
  fn age() -> u32 {
    15
  }
  fn main() {
    println!("Tell me what type of person you are");
    match age() {
      0 => println!("I haven't celebrated my birthday yet"),
      n @ 1 ..= 12 => println!("I'm a child of age {:?}", n),
      n @ 13 ..= 19 => println!("I'm a teen of age {:?}", n),
      n => println!("I'm an old person of age {:?}", n),
    }
  }
#+end_src

*** 8.6 if let

Also works with binding
#+begin_src rust
  if let Foo::(value @ 100) = c {
    println!("c is one hundred");
  }
#+end_src

Also works with enums that don't implement PartialEq
#+begin_src rust
  if let Foo::Bar == a {
      println!("a is foobar");
  }
#+end_src

*** 8.7 while let

Alternative to loop+match
#+begin_src rust
  let mut optional = Some(0);
  while let Some(i) = optional {
    if i > 9 {
      println!("Greater than 9, quit!");
      optional = None;
    } else {
      println!("{}", i);
      optional = Some(i + 1);
    }
  }
#+end_src

** 9 Functions
*** 9.1 Methods
- Associated methods are called using ~::~ double colons
- Methods are called using the ~.~ dot operator
|-----------+-----------------|
|       <r> |                 |
|           | sugar for       |
|-----------+-----------------|
|      self | self: Self      |
|     &self | self: &Self     |
| &mut self | self: &mut Self |
|-----------+-----------------|
*** 9.2 Closures

- I/O arguments type is infered, {} enclosure is optional
- Capture the environment
  - (about ownership) They will do what the closure requires without anotation.
- Can explicitly use ~move~ to take ownership of captured variables
  #+begin_src rust
  let haystack = vec![1, 2, 3];
  let contains = move |needle| haystack.contains(needle);
  println!("{}", contains(&1));
  println!("{}", contains(&4));
  #+end_src
- They MUST be annotated when used as function arguments.
  Using generics and picking one of:
  * Fn     -     &T
  * FnMut  - &mut T
  * FnOnce -      T

** 10 Modules
*** 10.2 Structures

- Can have Generic type fields
#+begin_src rust
  mod my {
    pub struct OpenBox<T> {
      pub contents: T,
    }

    pub struct ClosedBox<T> {
      contents: T,
    }

    impl<T> ClosedBox<T> {
      pub fn new(contents: T) -> ClosedBox<T> {
        ClosedBox {
          contents: contents,
        }
      }
    }
  }
#+end_src
