* 22 | Rust Sampler
- Edition
  - 2015 - Rust version 1.0-
  - 2018 - Rust version 1.3-
- Editions are supported at the MIR level
- Source Code -> MIR (Mid-Level Intermediate Representation)
- Editions won't make a major change to Rust, like removing the borrow checker.
* 22 | Command-Line Rust (OReilly)
source: https://github.com/kyclark/command-line-rust
** 1
- cargo.toml, add test and benchark only dependencies
  [dev-dependencies]
  assert_cmd = "1"
- .rs file in bin directory
  src/bin/true.rs
  cargo run --quiet --bin true
- std::process::exit(1)
  std::process::abort()
* 21 | Rust In Action (Manning)
** DONE Preface & About

- Despite being a systems programming book, every example works on Windows.
- Rust =2018= edition
- Book Projects:
  - grep (2)
  - database (7)
  - hexdump (7)
  - CPU emulator (5)
  - http client (8)
  - ntp client (9)
  - memory scanner (6)
  - operative system kernel
  - generative art (6)
  - turtle graphics (10)
  - parallel parser (10)
  - bootleader/kernel (11)

** DONE 1 Introducing Rust

- Not all security bugs can be solved with rust
  1) Hearthbleed: buffer reutilization bug
  2) goto fail: extra goto, variable initialized with success

- println!() exists as a macro since it does a bunch of type detection

- Integer overflow checks on debug mode

** DONE 2 Language Foundations
- Words: lifetime elision, hygienic macros, algebraic datatypes
  Crates: clap, for cli tools
- ->, "dagger" or "thin arrow"
- {:b} 0b11 {:x} 0xff {:o} 0o11
- floats have special values for:
  infinity
  negative infinity
  not a number
- fn add<T: Add<Output = T>>(i: T, j: T)
  - Type T should have the *trait* Add and the Output should be of type T
- ~lifetime elision~, happens when we explicitly provide the lifetime of some variables
  - The use of references is neccesary when using lifetimes, as lifetimes are not required for normal arguments
- u8.saturating_sub() is substraction that returns 0 on integer underflow
- String.lines()
        .contains()
        .truncate(0) // shrink back to 0
- cargo doc
  generates html documentation for all crates used by this project
- rustup doc
  opens local stdlib html doc
- .lines() iterator for files
- io::stdin()
  io::stdin().lock()
*** String vs str
  - str is not copied
    - Usually seen as &str, aka string slice
  - String is an owned type
*** Array, fixed size
  - Type: [T; 3]
  - Taking an reference of an Array, returns a slice (support iteration without .iter())
  - Stack allocated
*** Slices
  - Dynamic size: not specified at compile time
  - Type: [T]
  - Both slices and references to slices are called slices
  - Easier to implement Traits than Arrays
  - Made from two u8, an pointer and a length
*** Vector, dynamic size
  - Type: Vec<T>
  - Vec::with_capacity(N) size allocation hint
* 20 | Practial Rust Projects (Apress)
** 5 Physical Computing in Rust
Crate: rust_gpiozero
*** Hardware
Raspberry Pi 3+
- /dev/gpiomem virtual memory mapping of pins
  You can call mmap() on that device you can map it to the designated virtual memory addresses
    ptr::write_volatile() or std::mem::transmute()
  You can also access it through /dev/mem (!) but that requires root
- /sys/class/gpio/* virtual fs mapping of pins
                 /export
                 /gpio2/direction
                 /gpio2/value
- Pins
  - Power supply (5v and 3V3)
  - GND
  - GPIO (on the BCM order) 3.3v
    - BCM: Broadcom SOC Channel, pinout order of the CPU
    - Some Configurable to work as PWM, SPI, I2C, Serial
- LED: Anode(+), Cathode(-)
*** rust_gpiozero
crate: rust_gpiozero (build on top of rppal crate)
- std::thread::sleep;
  std::time::Duration;  Duration::from_secs()
                                ::new(1,0)
  std::time::Instant;   Instant::now().elapsed()
**** Output
- let mut led LED::new(PIN);
          led.on();
             .off()
             .toggle()
             .blink(1.0,1.0)
             .wait()
  sleep(Duration::from_secs(1));
**** Input
- let mut button = Button::new(4) // pull-up
                // Button::new_with_pulldown(4)
          button.wait_for_press(TIMEOUT)
- By default input gpio voltage fluctuates between 0-3v
- Internal pull up/down resistors can be enabled
- Pull down resistor: default 0v
  Pull-up   resistor: default 3V3
- Input can be *debounced* by measuring how long has passed since the last click
  Instant::now().elapsed()
*** Cross-compile
- Install the rust target compiler:
  > rustup target add armv7-unkown-linux-gnueabihf
- install the gcc linker
  On debian is: gcc-5-multilib-arm-linux-gnuebihf
- Let cargo know the linker name
  On ~/.cargo/config
  #+begin_src
  [target.armv7-unknown-linux-gnueabihf]
  linker = "arm-linux-gnuebihf-gcc-5"
  #+end_src
- build against the target
  > cargo build --target=armv7-unknown-linux-gnuebihf
- execute
  On: target/armv7-unknown-linux-gnueabihf/debug/NAMEHERE

** 6 Artificial Intelligence and Machine Learning
Crate: rusty-machine (rulinalg)
- An example of AI can be an "expert system" when WE define all the rules.
    Like Prolog. But it cannot be called ML.
- Supervised vs Unsupervised learning (aka use of labeled vs unlabeled data)
  - Other: Reinforced Learning, Semi-supervised Learning
*** Unsupervised (K-Means)
**** K-Means
Used when categorization is needed aka *clustering*
Consists on keep updating nth "centroids" until they can't be moved
1) Randomly assign k points as the centroids
2) Assign each point to a nearest centroid
3) Update centroids, find the mean point of all points of the group
4) repeat 2 and 3 until 3 doesn't move the centroid (they *converge*)

**** K-Means++
Extra: https://www.youtube.com/watch?v=HatwtJSsj5Q
Randomly picking the initial centroids have issues:
- Too long to end the algorithm
- A poor result (aka local optimum)
Solved by picking far apart centrids.
1) Pick 1 random centroid
2) For each point, calculate the distance to his nearest centroid as D(x)
3) Pick a new centroid from all the other points, weighted random
   where the probability is D(x)^2
4) repeat 2 and 3 until we selected the amount of centroid we desire
Then, we will run K-Means

**** Generating (Fake) Data
Crates: rusty-machine, rand, rand_distr, csv
use rand::thread_rng                   function
use rand::distributions::Distribution  for using .sample()
use rand_distr::Normal                 ::new(floor, max)
- src/bin/some.rs
  > cargo run --bin some
let mut writer = csv::Writer::from_writer()
       writer.write_record()
             .serialize()
*** Supervised (Neural Network)
* 19 | The Rust Programming Language (nostarch)
** 10 Generic Types, Traits, and lifetimes
impl Type
impl Trait for Type
*** Generics
Generics are abstract stand-ins for concrete types
- Generic arguments (trait restricted)
- Generics in struct/enums definitions
  #+begin_src rust
    struct Point<T> {
        x: T,
        y: T,
    }
  #+end_src
  - TIP: When you need a lot of generic types in your code,
         it could indicate that your code needs restructuring
         into smaller pieces.
- Generics in Method Definition (+struct)
  #+begin_src rust
    impl<T> Point<T> {
       fn x(&self) -> &T {
           &self.x
       }
    }
  #+end_src
Speed is guaranteed, as Rust compiler does "Monomorphization" of the code used
by generics to the concrete for the type.
*** Traits: Defining Shared Behavior
  #+begin_src rust
  pub trait Summary { // pub as it will be imported elsewhere
    fn summarize(&self) -> String;
  }
  #+end_src
- Similar to a feature often called *interfaces* in other languages.
  We can define a default implementation of the functions
  We can impl functions for a type with different trait requirements (on different impl blocks)
  We CANNOT implement external traits on external types (coherence property, aka orphan rule)
  We CANNOT call the default implementation if we override the default one
- Implementing for a Type
  #+begin_src rust
  impl Summary for Type {
    fn summarize(&self) -> String {
      format!("{}", self.fieldnamehere)
    }
  }
  impl Summary for OtherType {}; // If default implementation was provided
  impl<T: Display> ToString for T {..} // Conditionally create a trait
  #+end_src
- Traits as Parameters
  - Syntatic sugar way (allows for any type)
     #+begin_src rust
     pub fn notify(item: impl Summary) {
       println!("Breaking news! {}", item.summarize())
     }
     #+end_src
  - Using Trait Bounds (enforce type to be T)
    #+begin_src rust
    pub fn notify<T: Summary>(item: T) {
      println!("Breaking news! {}", item.summarize());
    }
    #+end_src
- Returning Types that implement a trait, ONLY if it is the same type
  #+begin_src rust
  fn returns_summarizable() -> impl Summary {
    Tweet { .. }
  }
  #+end_src

*** Lifetimes: Validating references with it
* 18 | Rust Programming By Example (PACKT)
** 2 Starting with SDL
- You need to import a Trait to use his methods
- io::Result definition
  type Result<T> = Result<T, Error>;
- Ok(()) is the Rust equivalet to *void*
- Equivalent:
  - try!()
  - match of Ok() and Err()
  - ? operator
- collect() calls next()
** 3 Events and Basic Game Mechanisms
- Game:
  - Tetrimino: A tetris piece, all are 4 blocks
  - Grid: 16 height and 10 width
- match _ branch can use *unreachable!()* macro
- *static* variables, don't die when the scope dies
  - changing the value of it is an *unsafe{}* operation
- Tetramino: impl and traits
  #+begin_src rust
  struct Tetrimino {..}

  // trait, struct, impl..for
  trait TeGenerator {
    fn new() -> Tetrimino;
  }
  struct TeI;
  impl TeGenerator for TeI {
    fn new() -> Tetrimino {..}
  }

  // Random function
  fn create_random_tetrimino() -> Tetrimino {..}

  // Method
  impl Tetrimino {
    fn rotate(&mut self) {..}
  }
  #+end_src
- When you send a non-mutable reference over a vector
  Vec<T> is deferenced into a &[T]
- Tetris: impl and structs
  #+begin_src rust
  struct Tetris {..}
  impl Tetris {
    fn new() -> Tetris {..}
    fn check_lines(&mut self) {..}
    fn make_permanent(&mut self) {..}
  }
  #+end_src
- An example on *borrow* and *ownership*
  On: for line in self.game_map
  game_map is non-mutably borrowed by *for* and we cannot mutate it in the loop.
- ref sidetrack https://doc.rust-lang.org/rust-by-example/scope/borrow/ref.html
  - same on the left side of = as & on the right side
  - can be pared with *mut* to take mutable references *ref mut*
  - used on let or destruring
- Another example of *ownership*:
  if an element of a type(struct) is borrowed the parent is also borrowed
** Implementing the engine for the music player
- Trait bounds can be added to a type as well than as a generic param of a function
