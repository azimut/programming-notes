#+TITLE: Rust
#+DATE: <2020-01-01 miÃ©>

|----------+-----------------------------------------------------------|
| home     | https://www.rust-lang.org/                                |
| wiki     | https://en.wikipedia.org/wiki/Rust_(programming_language) |
| research | https://research.mozilla.org/rust/                        |
| gitorg   | https://github.com/Rust-Lang                              |
| packages | https://crates.io/                                        |
|----------+-----------------------------------------------------------|

* Language

- todo!()
- unreachable!()
- Rust, use range for loops
  - 0..10
  - 0..=10
- [[https://doc.rust-lang.org/nightly/edition-guide/introduction.html][Editions]]
  |------+------|
  | 2015 | 1.00 |
  | 2018 | 1.31 |
  | 2021 | 1.56 |
  | 2024 | 1.85 |
  |------+------|

** variables

#+begin_src rust
  let x: u8 = 1;
  let mut x = 10; // ~mutability~, when a variable can be changed
  let x = 2;  //    - ~shadowing~, if are the same type, although effectively are different variables
  let x = 10;
#+end_src

** import / export

#+begin_src rust
  use supper:**; // import all files on project
#+end_src

** format
|-------------------------------+-------------------------|
|                           <r> |                         |
|                 format string | description             |
|-------------------------------+-------------------------|
|           r#""raw"\tlines\n"# |                         |
| b"this string of ASCII bytes" |                         |
|                      \u{D589} | unicode printing        |
|                          {:p} | pointer                 |
|                {:b} {:x} {:o} | binary, hexa, and octal |
|                       {0} {1} | order of arguments      |
|                   {foo} {bar} | name of arguments       |
|                 {} {:?} {:#?} | pretty printer          |
|       {var:pad align min.max} |                         |
|-------------------------------+-------------------------|
** operator
|----+---------------------------------|
| -> | skinny arrow, on fn definitions |
| {} | code blocks, return a value     |
| !  | denote macro names              |
| ?  | try operator                    |
|----+---------------------------------|
** attributes #[]
- derive(Debug)
** functions (;)

#+begin_src rust
  fn beta(MyStruct {y,z,..}: MyStruct) -> i32 // struct destructuring
  fn beta() -> i32 {
    8 // without a ";" returns "8"
    // return 8;  // Same but less idiomatic
    // 8;         // with the ";" it will return ()
  }
#+end_src

** Style
https://github.com/rust-lang/rust/tree/HEAD/src/doc/style-guide/src
- 4 spaces of identation
|----------------+----------------+------------+-----------|
|                | UpperCamelCase | snake_case | lowercase |
|----------------+----------------+------------+-----------|
| Implementation | YES            |            |           |
| Struct         | YES            |            |           |
| Enum           | YES            |            |           |
| Variables      |                | YES        |           |
| Functions      |                | YES        |           |
| Native Types   |                |            | YES       |
|----------------+----------------+------------+-----------|
** Types
*** struct

#+begin_src rust
struct AUnit;         // "unit struct"
struct ATuple(i8,i8); // "tuple struct" or "unnamed struct"
struct ANamed {       // "named struct"
    size: u32,
    color: ATuple,
} // DO NOT add a semicolon after, "there is whole block of code after it"
#+end_src

*** enum

- each member gets a number from 0 to 10 (can be given different numbers)
- can be imported with ~use ENUMNAME::*~

#+begin_src rust
  enum ThingsInSky {
      Sun,
      Stars,
  }
  enum ThingsInSky {
      Sun = 10,
      Stars = 100,
  }
  enum ThingsInSky {
      Sun(String),
      Stars(String),
  }
#+end_src

*** Primitive
- =as= used for casting
- std::i8::MIN
- std::i8::MAX
|-------+-------+-----------------------------|
|   <r> |   <r> |                             |
|       |       | size                        |
|-------+-------+-----------------------------|
|    u8 |   1u8 |                             |
|   uNN |       |                             |
|   i32 | 1_000 | default literal             |
|   i64 |     ? |                             |
|   f32 |     ? |                             |
|   f64 |    5. | default literal             |
| isize |    10 | arch dep                    |
| usize |    10 | arch dep, used for indexing |
|  char |   'a' | up to 4 bytes               |
|-------+-------+-----------------------------|
*** Compound
|---------+------------------+-------------+--------------+-------------------|
|     <r> |              <r> |             |          <r> |                   |
|    name |           create | access      |        match | insert            |
|---------+------------------+-------------+--------------+-------------------|
|   Tuple |            (5,2) | .0          |       (a,_b) |                   |
|  struct |     SName{a: 10} | .FIELD      | SName{a, ..} |                   |
|    enum |                  |             | ENUM::Val(a) |                   |
| HashMap |   HashMap::new() | .get(key)   |    (key,val) | .insert(key, val) |
|  Vector |           vec![] | [0] .get(0) |              | .push(23)         |
|   Array |               [] |             |              |                   |
|  String | String::from("") |             |              |                   |
|    &str |          "asdas" |             |              |                   |
|---------+------------------+-------------+--------------+-------------------|

- String
  - heap allocated
  - mutable
  - has: prt, len, cap
- &str
  - points to a squence of UTF-8 chars (a view into a String)
  - immutable
  - analogous to &[u8]
  - has: ptr, len

** control flow

#+begin_src rust
  while let Some(i) = optional {..} // alternative to loop+match
  if let MyStruct { x, .. } = foostruct {..} // if-let, non exhaustive
  loop{} // for infinite loop
  match ptr {
      Some(ptr) => ptr.g(),
      None      => {}
  }
#+end_src

** struct + impl(ementation)

|-----------+-----------------|
|       <r> |                 |
|           | is sugar for... |
|-----------+-----------------|
|      self | self: Self      |
|     &self | self: &Self     |
| &mut self | self: &mut Self |
|-----------+-----------------|

#+begin_src rust
  struct Foo {
        x: usize
    pub y: usize
  }
  impl Foo {
          fn this()         //        static
      pub fn this()         // public static
          fn this(&self)    // instance method
          fn this(&mut self)
      pub fn this(self)     // takes the self itself
  }
  #+end_src

** struct + impl + generic

#+begin_src rust
  struct MyVect<T> {
      contents: T,
  }
  impl<T> MyVect<T> {
      pub fn find<P>(&self, predicate: P) -> Option<&T>
      where P: Fn(&T) -> bool {
          for v in self {
              if predicate(v) {
                  return Some(v);
              }
          }
          None
      }
  }
#+end_src

**  trait + impl

a common method for multiple types

#+begin_src rust
  trait Foo { // like an interface
      fn method(&self) -> retType;
  }
  impl Foo for MyStruct {
      fn method(&self) -> retType {...}
  }
#+end_src

** Standard Library

https://doc.rust-lang.org/std/#modules

#+begin_src rust
  enum Option<T> {
    Some(T),
    None,
  }
#+end_src

#+begin_src rust
  enum Result<T,E> {
    Ok(T),
    Err(E),
  }
#+end_src


* Codebases
- https://github.com/pop-os/system76-power
* Learn
- https://github.com/sger/RustBooks
- https://github.com/mre/idiomatic-rust
- https://rams3s.github.io/rust-ebookshelf/
- https://github.com/ctjhoa/rust-learning
- examples https://github.com/rust-lang/rust-by-example
           https://doc.rust-lang.org/stable/rust-by-example/
- examples https://github.com/rust-lang-nursery/rust-cookbook
** Medium
- https://doc.rust-lang.org/nightly/nomicon/
- https://rust-unofficial.github.io/too-many-lists/
- https://os.phil-opp.com/
- https://github.com/dtolnay/proc-macro-workshop
** Algorithms
- Common data structures and algorithms in Rust
  https://github.com/EbTech/rust-algorithms
- Small exercises to get you used to reading and writing Rust code!
  https://github.com/rust-lang/rustlings
- Implementing Rosetta Code problems in Rust.
  https://github.com/rust-rosetta/rust-rosetta
