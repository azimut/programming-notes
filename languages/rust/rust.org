#+TITLE: Rust
#+DATE: <2020-01-01 miÃ©>

|----------+-----------------------------------------------------------|
| home     | https://www.rust-lang.org/                                |
| wiki     | https://en.wikipedia.org/wiki/Rust_(programming_language) |
| research | https://research.mozilla.org/rust/                        |
| gitorg   | https://github.com/Rust-Lang                              |
| packages | https://crates.io/                                        |
|----------+-----------------------------------------------------------|

* Language

#+begin_src rust
  fn main() {
      println!("Hello, World!");
  }
#+end_src

- multiple pass compiler
- there is no ~truthiness~ in Rust, only booleans
- panic!() - an unrecoverable error
- todo!()
- unreachable!()
- Rust, use range for loops
  - 0..10
  - 0..=10
- [[https://doc.rust-lang.org/nightly/edition-guide/introduction.html][Editions]]
  |------+------|
  | 2015 | 1.00 |
  | 2018 | 1.31 |
  | 2021 | 1.56 |
  | 2024 | 1.85 |
  |------+------|

** variables

#+begin_src rust
  let x: u8 = 1;
  let mut x = 10; // ~mutability~, when a variable can be changed
  let x = 2;  //    - ~shadowing~, if are the same type, although effectively are different variables
  let x = 10;
#+end_src

** import / export

#+begin_src rust
  use supper:**; // import all files on project
#+end_src

** string interpolation format
see: println!() format!() panic!()
|-------------------------------+-------------------------|
|                           <r> |                         |
|                 format string | description             |
|-------------------------------+-------------------------|
|           r#""raw"\tlines\n"# |                         |
| b"this string of ASCII bytes" |                         |
|                      \u{D589} | unicode printing        |
|                          {:p} | pointer                 |
|                {:b} {:x} {:o} | binary, hexa, and octal |
|                       {0} {1} | order of arguments      |
|                   {foo} {bar} | name of arguments       |
|                 {} {:?} {:#?} | pretty printer          |
|       {var:pad align min.max} |                         |
|-------------------------------+-------------------------|
** operator
|-----+---------------------------------|
| <c> |                                 |
|-----+---------------------------------|
| ->  | skinny arrow, on fn definitions |
| {}  | code blocks, return a value     |
|  !  | denote macro names              |
|  ?  | try operator                    |
| ==  | structural equality             |
|-----+---------------------------------|
** attributes #[]
- derive(Debug)
** functions

Expressions = something that evaluates to a value
Statement = does NOT evaluate to a value end with a (;)

#+begin_src rust
  fn beta(MyStruct {y,z,..}: MyStruct) -> i32 // struct destructuring
  fn beta() -> i32 {
    8 // expression
    // return 8;  // statement, same but less idiomatic
    // 8;         // with the ";" it will return "()"
  }
#+end_src

** Style
https://github.com/rust-lang/rust/tree/HEAD/src/doc/style-guide/src
- 4 spaces of identation
|----------------+----------------+------------+-----------|
|                | UpperCamelCase | snake_case | lowercase |
|----------------+----------------+------------+-----------|
| Implementation | YES            |            |           |
| Struct         | YES            |            |           |
| Enum           | YES            |            |           |
| Variables      |                | YES        |           |
| Functions      |                | YES        |           |
| Native Types   |                |            | YES       |
|----------------+----------------+------------+-----------|
** Types
*** Option & Result

#+begin_src rust
  enum Option<T> {
    Some(T),
    None,
  }
#+end_src

#+begin_src rust
  enum Result<T,E> {
    Ok(T),
    Err(E),
  }
#+end_src

*** Primitive
- =as= is used for casting (compiler allows demotion)
  - true as u8 // = 1
- division by zero
  - integers = panic!
  - floats = infinity
- ~std::i8::MIN~ or ~i8::MIN~
- ~std::i8::MAX~ or ~i8::MAX~
|---------+---------------------+----------------------------------|
|     <r> |         <c>         |                                  |
|    TYPE |         EX          | DESCRIPTION                      |
|---------+---------------------+----------------------------------|
| i/u[NN] |                     | where NN is 8,16,32,64,128       |
|      u8 |         1u8         |                                  |
|     i32 |        1_000        | default literal                  |
|     i64 |          ?          |                                  |
|---------+---------------------+----------------------------------|
|     f32 |          ?          |                                  |
|     f64 |         5.          | default literal                  |
|---------+---------------------+----------------------------------|
|   isize |         10          | arch dep size                    |
|   usize |         10          | arch dep size, used for indexing |
|    char |         'a'         | up to 4 bytes, same as u32       |
|    bool |     true false      | implemented as an u8             |
|  String | String::from("foo") | .pop()                           |
|    &str |        "foo"        |                                  |
|---------+---------------------+----------------------------------|
- String
  - heap allocated
  - mutable
  - has: prt, len, cap
- &str
  - points to a squence of UTF-8 chars (a view into a String)
  - immutable
  - analogous to &[u8]
  - has: ptr, len
*** Compound
|--------------+-----------------+-------------+--------------+-------------------+--------------------|
|          <r> |       <c>       |     <c>     |     <c>      |        <c>        |        <c>         |
|         name |     create      |   access    | destructure  |      insert       |        type        |
|--------------+-----------------+-------------+--------------+-------------------+--------------------|
|         unit | (any statement) |     NO      |      ()      |        NO         |         ()         |
|        tuple |      (5,2)      |     .0      |    (a,_b)    |        NO         |     (i64,i64)      |
|  unit struct |      SName      |     NO      |      NO      |        NO         |     struct SN      |
| tuple struct |   SName(1,2)    |     .0      |  SName(a,b)  |        NO         |  struct SN(i8,i8)  |
| named struct |  SName{a: 10}   |   .FIELD    | SName{a, ..} |        NO         | struct SN {x: i64} |
|        array |      [1,2]      |     [0]     |   [a,_,_]    |        NO         |    [i32;LENGTH]    |
|          Vec |    vec![1,2]    | [0] .get(0) |              |     .push(23)     |      Vec<i32>      |
|      HashMap | HashMap::new()  |  .get(key)  |  (key,val)   | .insert(key, val) |                    |
|--------------+-----------------+-------------+--------------+-------------------+--------------------|
- structs
  - support punning on creation
- no memory overhead for tuple/array/struct
- unit
  - a special case of an empty tuple
  - come up for functions that return no values
  - aka "void" in c
  - sometimes used as Err(())
*** enum
- can be imported with ~use ENUMNAME::*~
- each member gets a number from 0 to 10 (can be given different numbers)
- they can optionally have a payload in the form of a record or a tuple
|----------------------------------------+----------------------------+----------------------|
|                                        |            <c>             |         <c>          |
| type                                   |           create           |        match         |
|----------------------------------------+----------------------------+----------------------|
| enum Color { Green, Red, Blue }        |        Color::Green        |      Color::Red      |
| enum Color { Green = 10, Blue = 20 }   |        Color::Green        |                      |
| enum Color { Red, Custom{ r:u8,g:u8 }} | Color::Custom {r: 8, g: 2} | Color::Custom {r, g} |
| enum Color { Red, Custom(u8,u8) }      |    Color::Custom(10,20)    |  Color::Custom(a,b)  |
|----------------------------------------+----------------------------+----------------------|
** control flow

#+begin_src rust
  while let Some(i) = optional {..} // alternative to loop+match
  if foo > 1 {} else if foo < 0 {} else {} // expression
  if let MyStruct { x, .. } = foostruct {..} // if-let, non exhaustive
  loop{} // for infinite loop
  match ptr {
      Some(ptr) => ptr.g(),
      None      => {}
      // _ => println!("catch all pattern")
  }
#+end_src

** struct + impl(ementation) (aka methods)

|-----------+-----------------|
|       <r> |                 |
|           | is sugar for... |
|-----------+-----------------|
|      self | self: Self      |
|     &self | self: &Self     |
| &mut self | self: &mut Self |
|-----------+-----------------|

#+begin_src rust
  struct Foo { // can be an enum
        x: usize
    pub y: usize
  }
  impl Foo {
          fn new0(x: usize) -> Self // static method
          fn this()         //        static method
      pub fn this()         // public static method
          fn this(&self)    //      instance method
          fn this(&mut self)
      pub fn this(self)     // takes the self itself
  }
  #+end_src

** struct + impl + generic

#+begin_src rust
  struct MyVect<T> {
      contents: T,
  }
  impl<T> MyVect<T> {
      pub fn find<P>(&self, predicate: P) -> Option<&T>
      where P: Fn(&T) -> bool {
          for v in self {
              if predicate(v) {
                  return Some(v);
              }
          }
          None
      }
  }
#+end_src

**  trait + impl

a common method for multiple types

#+begin_src rust
  trait Foo { // like an interface
      fn method(&self) -> retType;
  }
  impl Foo for MyStruct {
      fn method(&self) -> retType {...}
  }
#+end_src

** Standard Library
https://doc.rust-lang.org/std/#modules
|-------------+-----------------------------------------------------------------------------------------------------------------|
|         <r> |                                                                                                                 |
|      MODULE | DESCRIPTION                                                                                                     |
|-------------+-----------------------------------------------------------------------------------------------------------------|
|       [[https://doc.rust-lang.org/std/array/index.html][array]] | Utilities for the array primitive type.                                                                         |
|        [[https://doc.rust-lang.org/std/char/index.html][char]] | Utilities for the char primitive type.                                                                          |
|         [[https://doc.rust-lang.org/std/f32/index.html][f32]] | Constants for the f32 single-precision floating point type.                                                     |
|         [[https://doc.rust-lang.org/std/f64/index.html][f64]] | Constants for the f64 double-precision floating point type.                                                     |
|       [[https://doc.rust-lang.org/std/slice/index.html][slice]] | Utilities for the slice primitive type.                                                                         |
|         [[https://doc.rust-lang.org/std/str/index.html][str]] | Utilities for the str primitive type.                                                                           |
|      [[https://doc.rust-lang.org/std/string/index.html][string]] | A UTF-8âencoded, growable string.                                                                               |
|-------------+-----------------------------------------------------------------------------------------------------------------|
|       [[https://doc.rust-lang.org/std/alloc/index.html][alloc]] | Memory allocation APIs.                                                                                         |
|         [[https://doc.rust-lang.org/std/any/index.html][any]] | Utilities for dynamic typing or type ~reflection.~                                                              |
|        [[https://doc.rust-lang.org/std/arch/index.html][arch]] | ~SIMD~ and vendor intrinsics module.                                                                            |
|       [[https://doc.rust-lang.org/std/ascii/index.html][ascii]] | Operations on ASCII strings and characters.                                                                     |
|   [[https://doc.rust-lang.org/std/backtrace/index.html][backtrace]] | Support for capturing a stack backtrace of an OS thread                                                         |
|      [[https://doc.rust-lang.org/std/borrow/index.html][borrow]] | A module for working with borrowed data.                                                                        |
|       [[https://doc.rust-lang.org/std/boxed/index.html][boxed]] | The Box<T> type for heap allocation.                                                                            |
|        [[https://doc.rust-lang.org/std/cell/index.html][cell]] | Shareable mutable containers.                                                                                   |
|       [[https://doc.rust-lang.org/std/clone/index.html][clone]] | The Clone trait for types that cannot be âimplicitly copiedâ.                                                   |
|         [[https://doc.rust-lang.org/std/cmp/index.html][cmp]] | Utilities for comparing and ordering values.                                                                    |
| [[https://doc.rust-lang.org/std/collections/index.html][collections]] | Collection types.                                                                                               |
|     [[https://doc.rust-lang.org/std/convert/index.html][convert]] | Traits for conversions between types.                                                                           |
|     [[https://doc.rust-lang.org/std/default/index.html][default]] | The Default trait for types with a default value.                                                               |
|         [[https://doc.rust-lang.org/std/env/index.html][env]] | Inspection and manipulation of the processâs environment.                                                       |
|       [[https://doc.rust-lang.org/std/error/index.html][error]] | Interfaces for working with Errors.                                                                             |
|         [[https://doc.rust-lang.org/std/ffi/index.html][ffi]] | Utilities related to FFI bindings.                                                                              |
|         [[https://doc.rust-lang.org/std/fmt/index.html][fmt]] | Utilities for formatting and printing Strings.                                                                  |
|          [[https://doc.rust-lang.org/std/fs/index.html][fs]] | Filesystem manipulation operations.                                                                             |
|      [[https://doc.rust-lang.org/std/future/index.html][future]] | Asynchronous basic functionality.                                                                               |
|        [[https://doc.rust-lang.org/std/hash/index.html][hash]] | Generic hashing support.                                                                                        |
|        [[https://doc.rust-lang.org/std/hint/index.html][hint]] | Hints to compiler that affects how code should be emitted or optimized. Hints may be compile time or runtime.   |
|          [[https://doc.rust-lang.org/std/io/index.html][io]] | Traits, helpers, and type definitions for core I/O functionality.                                               |
|        [[https://doc.rust-lang.org/std/iter/index.html][iter]] | Composable external iteration.                                                                                  |
|      [[https://doc.rust-lang.org/std/marker/index.html][marker]] | Primitive traits and types representing basic properties of types.                                              |
|         [[https://doc.rust-lang.org/std/mem/index.html][mem]] | Basic functions for dealing with memory.                                                                        |
|         [[https://doc.rust-lang.org/std/net/index.html][net]] | Networking primitives for TCP/UDP communication.                                                                |
|         [[https://doc.rust-lang.org/std/num/index.html][num]] | Additional functionality for numerics.                                                                          |
|         [[https://doc.rust-lang.org/std/ops/index.html][ops]] | Overloadable operators.                                                                                         |
|      [[https://doc.rust-lang.org/std/option/index.html][option]] | Optional values.                                                                                                |
|          [[https://doc.rust-lang.org/std/os/index.html][os]] | OS-specific functionality.                                                                                      |
|       [[https://doc.rust-lang.org/std/panic/index.html][panic]] | Panic support in the standard library.                                                                          |
|        [[https://doc.rust-lang.org/std/path/index.html][path]] | Cross-platform path manipulation.                                                                               |
|         [[https://doc.rust-lang.org/std/pin/index.html][pin]] | Types that pin data to a location in memory.                                                                    |
|     [[https://doc.rust-lang.org/std/prelude/index.html][prelude]] | The Rust Prelude                                                                                                |
|   [[https://doc.rust-lang.org/std/primitive/index.html][primitive]] | This module reexports the primitive types to allow usage that is not possibly shadowed by other declared types. |
|     [[https://doc.rust-lang.org/std/process/index.html][process]] | A module for working with processes.                                                                            |
|         [[https://doc.rust-lang.org/std/ptr/index.html][ptr]] | Manually manage memory through raw pointers.                                                                    |
|          [[https://doc.rust-lang.org/std/rc/index.html][rc]] | Single-threaded reference-counting pointers. âRcâ stands for âReference Countedâ.                               |
|      [[https://doc.rust-lang.org/std/result/index.html][result]] | Error handling with the Result type.                                                                            |
|        [[https://doc.rust-lang.org/std/sync/index.html][sync]] | Useful synchronization primitives.                                                                              |
|        [[https://doc.rust-lang.org/std/task/index.html][task]] | Types and Traits for working with asynchronous tasks.                                                           |
|      [[https://doc.rust-lang.org/std/thread/index.html][thread]] | Native threads.                                                                                                 |
|        [[https://doc.rust-lang.org/std/time/index.html][time]] | Temporal quantification.                                                                                        |
|         [[https://doc.rust-lang.org/std/vec/index.html][vec]] | A contiguous growable array type with heap-allocated contents, written Vec<T>.                                  |
|-------------+-----------------------------------------------------------------------------------------------------------------|
** Experimental Modules
|----------------+---------------------------------------------------------------|
| assert_matches | Unstable module containing the unstable assert_matches macro. |
| async_iter     | Composable asynchronous iteration.                            |
| f16            | Constants for the f16 double-precision floating point type.   |
| f128           | Constants for the f128 double-precision floating point type.  |
| intrinsics     | Compiler intrinsics.                                          |
| pat            | Helper module for exporting the pattern_type macro            |
| simd           | Portable SIMD module.                                         |
|----------------+---------------------------------------------------------------|

* Codebases
- https://github.com/pop-os/system76-power
