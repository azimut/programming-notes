- https://typehero.dev/
- https://devblogs.microsoft.com/typescript/announcing-typescript-5-0/
- challenges https://github.com/type-challenges/type-challenges
- https://www.youtube.com/watch?v=MbZoQlmQaWQ
- Tutorial: https://github.com/gibbok/typescript-book

* Language
** Primitive Types
|-----------+------------------------------------------------+----------------------------------------------------------------------|
| any       |                                                | the default type given by the *compiler* (everything needs a type)   |
| unknown   | === && ! ? ==                                  | when *YOU* don't know the type ahead of type                         |
| boolean   | === && ! ? ==                                  | true/false                                                           |
| number    | + - % <                                        | integers, floats, positives, negatives, Infinity, NaN                |
| bigint    | + - * / <                                      | ended with "n" like "100n", can be bigger than >2^53                 |
| string    | + .slice                                       | between simple comma (')                                             |
| null      |                                                | represent the absent of something, absence of a value                |
| undefined |                                                | represent the absent of something, something hasn't been defined yet |
| void      |                                                | return type of a function that retuns nothing                        |
| never     |                                                | return type of a function that never returns, bottom-type            |
|-----------+------------------------------------------------+----------------------------------------------------------------------|
| symbol    | Symbol('a')                                    | unique and NOT equal to other instance                               |
|           |                                                | const f: unique symbol = Symbol('f') // type of f                    |
|-----------+------------------------------------------------+----------------------------------------------------------------------|
| enum      | enum Language { English, Spanish }             | stay away from them....enum to numbers, splittable                   |
|           | enum Color { Red = '#c10000', Pink = 0xc10050} | to strings                                                           |
|           | const enum Language { English, Spanish }       | access by dot(.) or bracket [], const enforces (.) only              |
|-----------+------------------------------------------------+----------------------------------------------------------------------|
| Function  |                                                | catch-all type for functions, you don't want to use it               |
|-----------+------------------------------------------------+----------------------------------------------------------------------|
** Complex Types
|--------+-------------------------------------------+-------------------------------------------------------------------|
| object |                                           | not much more narrow than *any*, mutable fields even when *const* |
|        |                                           | let a: {readonly b: number; c?: string; [key: number]: boolean }  |
|--------+-------------------------------------------+-------------------------------------------------------------------|
| Arrays | let c: string[] = ['a']                   | can be heterogeneous, implicitly typed                            |
|        | let bs: readonly number[] = c.concat(5)   | no-mutable/readonly/Readonly<>/ReadonlyArray<>                    |
|        | .push                                     | mutable                                                           |
|--------+-------------------------------------------+-------------------------------------------------------------------|
| Tuples | let b: [string, string, n] =              | fixed length, known type at each index, explicitly typed          |
|        | let fares: [number, number?][] =          | optional field supported                                          |
|        | let list: [number, boolea, ...string[]] = | reset elements support                                            |
|--------+-------------------------------------------+-------------------------------------------------------------------|
** functions

|----+---------------------+---------------------------------------------------------|
| ?  | optional parameters | function log(message: string, userId?: string)          |
| =  | default  parameters | function log(message: string, userId = 'Not signed in') |
| [] | rest     parameters | function sum(numbers: number[]): number                 |
|----+---------------------+---------------------------------------------------------|
