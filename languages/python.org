- Article: https://www.scrapingbee.com/blog/web-scraping-101-with-python/
- %.format() https://pyformat.info/
- f-string https://fstring.help/
- PEP - Python Enhancement Proposals
- Tutorial https://github.com/pro1code1hack/Senior-Dev-Roadmap
- 2023 https://lukeplant.me.uk/blog/posts/pythons-disappointing-superpowers/
- 2023 https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/
  https://lobste.rs/s/gzi3vk/how_improve_python_packaging_why_14_tools
- python -> c compiler https://mypyc.readthedocs.io/en/latest/
  https://glyph.twistedmatrix.com/2022/04/you-should-compile-your-python-and-heres-why.html
- https://dropbox.tech/application/our-journey-to-type-checking-4-million-lines-of-python
- https://gto76.github.io/python-cheatsheet/
- https://news.ycombinator.com/item?id=29582437
- James Powell: So you want to be a Python expert? | PyData Seattle 2017
  https://www.youtube.com/watch?v=cKPlPJyQrt4
- https://docs.python-guide.org/
- https://github.com/realpython/python-guide
- https://github.com/sfermigier/awesome-functional-python
- https://github.com/Suor/funcy
- https://www.youtube.com/channel/UCuiPVmvqC0IBpOFhzSG7f8Q
- https://github.com/crista/exercises-in-programming-style
- Style
  https://google.github.io/styleguide/pyguide.html
  https://peps.python.org/pep-0008/
- Modules Index https://docs.python.org/3/py-modindex.html
- Type Hints
  - PEP 484 – Type Hints https://peps.python.org/pep-0484/
  - PEP 483 – The Theory of Type Hints https://peps.python.org/pep-0483/
  - PEP 482 – Literature Overview for Type Hints https://peps.python.org/pep-0482/
* Standard Library
- https://docs.python.org/3/library/
** Text Processing Services

| string      | Common string operations             |
| re          | Regular expression operations        |
| difflib     | Helpers for computing deltas         |
| textwrap    | Text wrapping and filling            |
| unicodedata | Unicode Database                     |
| stringprep  | Internet String Preparation          |
| readline    | GNU readline interface               |
| rlcompleter | Completion function for GNU readline |

** Binary Data Services

| struct | Interpret bytes as packed binary data |
| codecs | Codec registry and base classes       |

** Data Types

| datetime        | Basic date and time types                           |
| zoneinfo        | IANA time zone support                              |
| calendar        | General calendar-related functions                  |
| collections     | Container datatypes                                 |
| collections.abc | Abstract Base Classes for Containers                |
| heapq           | Heap queue algorithm                                |
| bisect          | Array bisection algorithm                           |
| array           | Efficient arrays of numeric values                  |
| weakref         | Weak references                                     |
| types           | Dynamic type creation and names for built-in types  |
| copy            | Shallow and deep copy operations                    |
| pprint          | Data pretty printer                                 |
| reprlib         | Alternate repr() implementation                     |
| enum            | Support for enumerations                            |
| graphlib        | Functionality to operate with graph-like structures |

** Numeric and Mathematical Modules

| numbers    | Numeric abstract base classes                     |
| math       | Mathematical functions                            |
| cmath      | Mathematical functions for complex numbers        |
| decimal    | Decimal fixed point and floating point arithmetic |
| fractions  | Rational numbers                                  |
| random     | Generate pseudo-random numbers                    |
| statistics | Mathematical statistics functions                 |

** Functional Programming Modules

| itertools | Functions creating iterators for efficient looping        |
| functools | Higher-order functions and operations on callable objects |
| operator  | Standard operators as functions                           |

** File and Directory Access

| pathlib   | Object-oriented filesystem paths               |
| os.path   | Common pathname manipulations                  |
| fileinput | Iterate over lines from multiple input streams |
| stat      | Interpreting stat() results                    |
| filecmp   | File and Directory Comparisons                 |
| tempfile  | Generate temporary files and directories       |
| glob      | Unix style pathname pattern expansion          |
| fnmatch   | Unix filename pattern matching                 |
| linecache | Random access to text lines                    |
| shutil    | High-level file operations                     |

** Data Persistence

| pickle  | Python object serialization               |
| copyreg | Register pickle support functions         |
| shelve  | Python object persistence                 |
| marshal | Internal Python object serialization      |
| dbm     | Interfaces to Unix “databases”            |
| sqlite3 | DB-API 2.0 interface for SQLite databases |

** Data Compression and Archiving

| zlib    | Compression compatible with gzip     |
| gzip    | Support for gzip files               |
| bz2     | Support for bzip2 compression        |
| lzma    | Compression using the LZMA algorithm |
| zipfile | Work with ZIP archives               |
| tarfile | Read and write tar archive files     |

** File Formats

| csv          | CSV File Reading and Writing          |
| configparser | Configuration file parser             |
| tomllib      | Parse TOML files                      |
| netrc        | netrc file processing                 |
| plistlib     | Generate and parse Apple .plist files |

** Cryptographic Services

| hashlib | Secure hashes and message digests                   |
| hmac    | Keyed-Hashing for Message Authentication            |
| secrets | Generate secure random numbers for managing secrets |

** Generic Operating System Services

| os               | Miscellaneous operating system interfaces                   |
| io               | Core tools for working with streams                         |
| time             | Time access and conversions                                 |
| argparse         | Parser for command-line options, arguments and sub-commands |
| getopt           | C-style parser for command line options                     |
| logging          | Logging facility for Python                                 |
| logging.config   | Logging configuration                                       |
| logging.handlers | Logging handlers                                            |
| getpass          | Portable password input                                     |
| curses           | Terminal handling for character-cell displays               |
| curses.textpad   | Text input widget for curses programs                       |
| curses.ascii     | Utilities for ASCII characters                              |
| curses.panel     | A panel stack extension for curses                          |
| platform         | Access to underlying platform’s identifying data            |
| errno            | Standard errno system symbols                               |
| ctypes           | A foreign function library for Python                       |

** Concurrent Execution

| threading                     | Thread-based parallelism                         |
| multiprocessing               | Process-based parallelism                        |
| multiprocessing.shared_memory | Shared memory for direct access across processes |
| concurrent                    | The concurrent package                           |
| concurrent.futures            | Launching parallel tasks                         |
| subprocess                    | Subprocess management                            |
| sched                         | Event scheduler                                  |
| queue                         | A synchronized queue class                       |
| contextvars                   | Context Variables                                |
| _thread                       | Low-level threading API                          |

** Networking and Interprocess Communication

| asyncio   | Asynchronous I/O                     |
| socket    | Low-level networking interface       |
| ssl       | TLS/SSL wrapper for socket objects   |
| select    | Waiting for I/O completion           |
| selectors | High-level I/O multiplexing          |
| signal    | Set handlers for asynchronous events |
| mmap      | Memory-mapped file support           |

** Internet Data Handling

| email     | An email and MIME handling package            |
| json      | JSON encoder and decoder                      |
| mailbox   | Manipulate mailboxes in various formats       |
| mimetypes | Map filenames to MIME types                   |
| base64    | Base16, Base32, Base64, Base85 Data Encodings |
| binascii  | Convert between binary and ASCII              |
| quopri    | Encode and decode MIME quoted-printable data  |

** Structured Markup Processing Tools

| html                  | HyperText Markup Language support      |
| html.parser           | Simple HTML and XHTML parser           |
| html.entities         | Definitions of HTML general entities   |
| xml.etree.ElementTree | The ElementTree XML API                |
| xml.dom               | The Document Object Model API          |
| xml.dom.minidom       | Minimal DOM implementation             |
| xml.dom.pulldom       | Support for building partial DOM trees |
| xml.sax               | Support for SAX2 parsers               |
| xml.sax.handler       | Base classes for SAX handlers          |
| xml.sax.saxutils      | SAX Utilities                          |
| xml.sax.xmlreader     | Interface for XML parsers              |
| xml.parsers.expat     | Fast XML parsing using Expat           |

** Internet Protocols and Support

| webbrowser         | Convenient web-browser controller           |
| wsgiref            | WSGI Utilities and Reference Implementation |
| urllib             | URL handling modules                        |
| urllib.request     | Extensible library for opening URLs         |
| urllib.response    | Response classes used by urllib             |
| urllib.parse       | Parse URLs into components                  |
| urllib.error       | Exception classes raised by urllib.request  |
| urllib.robotparser | Parser for robots.txt                       |
| http               | HTTP modules                                |
| http.client        | HTTP protocol client                        |
| ftplib             | FTP protocol client                         |
| poplib             | POP3 protocol client                        |
| imaplib            | IMAP4 protocol client                       |
| smtplib            | SMTP protocol client                        |
| uuid               | UUID objects according to RFC 4122          |
| socketserver       | A framework for network servers             |
| http.server        | HTTP servers                                |
| http.cookies       | HTTP state management                       |
| http.cookiejar     | Cookie handling for HTTP clients            |
| xmlrpc             | XMLRPC server and client modules            |
| xmlrpc.client      | XML-RPC client access                       |
| xmlrpc.server      | Basic XML-RPC servers                       |
| ipaddress          | IPv4/IPv6 manipulation library              |

** Multimedia Services

| wave     | Read and write WAV files          |
| colorsys | Conversions between color systems |

** Internationalization

| gettext | Multilingual internationalization services |
| locale  | Internationalization services              |

** Program Frameworks

| turtle | Turtle graphics                                |
| cmd    | Support for line-oriented command interpreters |
| shlex  | Simple lexical analysis                        |

** Graphical User Interfaces with Tk

| tkinter              | Python interface to Tcl/Tk |
| tkinter.colorchooser | Color choosing dialog      |
| tkinter.font         | Tkinter font wrapper       |
| tkinter.messagebox   | Tkinter message prompts    |
| tkinter.scrolledtext | Scrolled Text Widget       |
| tkinter.dnd          | Drag and drop support      |
| tkinter.ttk          | Tk themed widgets          |
| tkinter.tix          | Extension widgets for Tk   |

** Development Tools

| typing                        | Support for type hints                                |
| pydoc                         | Documentation generator and online help system        |
| doctest                       | Test interactive Python examples                      |
| unittest                      | Unit testing framework                                |
| unittest.mock                 | mock object library                                   |
| unittest.mock                 | getting started                                       |
| 2to3                          | Automated Python 2 to 3 code translation              |
| test                          | Regression tests package for Python                   |
| test.support                  | Utilities for the Python test suite                   |
| test.support.socket_helper    | Utilities for socket tests                            |
| test.support.script_helper    | Utilities for the Python execution tests              |
| test.support.bytecode_helper  | Support tools for testing correct bytecode generation |
| test.support.threading_helper | Utilities for threading tests                         |
| test.support.os_helper        | Utilities for os tests                                |
| test.support.import_helper    | Utilities for import tests                            |
| test.support.warnings_helper  | Utilities for warnings tests                          |

** Debugging and Profiling

| bdb          | Debugger framework                            |
| faulthandler | Dump the Python traceback                     |
| pdb          | The Python Debugger                           |
| timeit       | Measure execution time of small code snippets |
| trace        | Trace or track Python statement execution     |
| tracemalloc  | Trace memory allocations                      |

** Software Packaging and Distribution

| distutils | Building and installing Python modules |
| ensurepip | Bootstrapping the pip installer        |
| venv      | Creation of virtual environments       |
| zipapp    | Manage executable Python zip archives  |

** Python Runtime Services

| sys         | System-specific parameters and functions             |
| sysconfig   | Provide access to Python’s configuration information |
| builtins    | Built-in objects                                     |
| __main__    | Top-level code environment                           |
| warnings    | Warning control                                      |
| dataclasses | Data Classes                                         |
| contextlib  | Utilities for with-statement contexts                |
| abc         | Abstract Base Classes                                |
| atexit      | Exit handlers                                        |
| traceback   | Print or retrieve a stack traceback                  |
| __future__  | Future statement definitions                         |
| gc          | Garbage Collector interface                          |
| inspect     | Inspect live objects                                 |
| site        | Site-specific configuration hook                     |

** Custom Python Interpreters

| code   | Interpreter base classes |
| codeop | Compile Python code      |

** Importing Modules

| zipimport    | Import modules from Zip archives      |
| pkgutil      | Package extension utility             |
| modulefinder | Find modules used by a script         |
| runpy        | Locating and executing Python modules |
| importlib    | The implementation of import          |

** Python Language Services

| ast         | Abstract Syntax Trees                  |
| symtable    | Access to the compiler’s symbol tables |
| token       | Constants used with Python parse trees |
| keyword     | Testing for Python keywords            |
| tokenize    | Tokenizer for Python source            |
| tabnanny    | Detection of ambiguous indentation     |
| pyclbr      | Python module browser support          |
| py_compile  | Compile Python source files            |
| compileall  | Byte-compile Python libraries          |
| dis         | Disassembler for Python bytecode       |
| pickletools | Tools for pickle developers            |

** MS Windows Specific Services

| msvcrt   | Useful routines from the MS VC++ runtime |
| winreg   | Windows registry access                  |
| winsound | Sound-playing interface for Windows      |

** Unix Specific Services

| posix    | The most common POSIX system calls |
| pwd      | The password database              |
| grp      | The group database                 |
| termios  | POSIX style tty control            |
| tty      | Terminal control functions         |
| pty      | Pseudo-terminal utilities          |
| fcntl    | The fcntl and ioctl system calls   |
| resource | Resource usage information         |
| syslog   | Unix syslog library routines       |

** Superseded Modules

| aifc        | Read and write AIFF and AIFC files           |
| asynchat    | Asynchronous socket command/response handler |
| asyncore    | Asynchronous socket handler                  |
| audioop     | Manipulate raw audio data                    |
| cgi         | Common Gateway Interface support             |
| cgitb       | Traceback manager for CGI scripts            |
| chunk       | Read IFF chunked data                        |
| crypt       | Function to check Unix passwords             |
| imghdr      | Determine the type of an image               |
| imp         | Access the import internals                  |
| mailcap     | Mailcap file handling                        |
| msilib      | Read and write Microsoft Installer files     |
| nis         | Interface to Sun’s NIS (Yellow Pages)        |
| nntplib     | NNTP protocol client                         |
| optparse    | Parser for command line options              |
| ossaudiodev | Access to OSS-compatible audio devices       |
| pipes       | Interface to shell pipelines                 |
| smtpd       | SMTP Server                                  |
| sndhdr      | Determine type of sound file                 |
| spwd        | The shadow password database                 |
| sunau       | Read and write Sun AU files                  |
| telnetlib   | Telnet client                                |
| uu          | Encode and decode uuencode files             |
| xdrlib      | Encode and decode XDR data                   |

* Decorators (@)
 | @classmethod | def   |
 | @dataclass   | class |
* Special Methods
 | len(a)                     | __len__()      |
 | a[n]                       | __getitem__(n) |
 | constructor                | __init__(self) |
 |----------------------------+----------------|
 | unambiguous representation | __repr__(self) |
 | readable representation    | __str__(self)  |
 |----------------------------+----------------|
 | iterator                   | __iter__(self) |
 | iterator                   | __next__(self) |
* Anna Nicanorova: Optimizing Life Everyday Problems Solved with Linear Programing in Python
  https://www.youtube.com/watch?v=7yZ5xxdkTb8
  - Uses Pulp
  - A linear programming problem consists of:
    - An objective (min/max/...)
    - Variables
    - Constrains
* Book: 21 | Python Distilled
** TODO 7 Classes and Object-Oriented Programming
#+begin_src python
  class Account:
      '''
      OPTIONAL documentation string
      '''
      owner: string   # OPTIONAL: type hint
      balance: string # OPTIONAL: type hint
      def __init__(self, owner, balance):
          self.owner = owner
          self.balance = balance

      def __repr__(self):
          return f'Account({self.owner!r}, {self.balance!r)'

      def deposit(self, amount):
          self.balance += amount

      def withdraw(self, amount):
          self.balance -= amount

      def inquiry(self):
          return self.balance
#+end_src
- an essential feature of each object it is that usually has some kind of *state*
  as well as *methods* that operate on that state
- __init__ and __repr__ are known as special or =magic methods=
- have an associated *type*
  #+begin_src python
    type(a) # <class 'Account'>
    a = Account('Guido', 1000.0) # calls... Account.__init__(a, 'Guido', 1000.0)
    a.deposit(100.0)             # calls... Account.deposit(a, 100.0)
    a.deposit # <bound method Account.deposit of Account('Guido', 1100.0)>
    type(a).deposit  # <function Account.deposit 0x10a31f..>
  #+end_src
- if you are writing a lot of single-method classes, consider using functions instead
  (premature abstraction is often not a good thing)
  eg : by passing the make_record function
  #+begin_src python
    def parse_data(lines, make_record):
        records = []
        for line in lines:
            row = line.split(',')
            record = make_record(row)
            records.append(record)
        return records

    def make_dict(row):
        return {
            'name': row[0],
            'shares': int(row[1]),
            'price': float(row[2])
        }

    data = parse_data(open('portfolio.csv'), make_dict)
  #+end_src
- =dynamic binding= is the /runtime/ mechanism that Python uses to find the attributes of objects.
  - when you make a look up like ~obj.name~ it will work if it has the /name/ attribute
    this is referred as =duck typing=
  - this allows to use objects that /act like another/ without being related/inherit from them
- Inheriting from *build-in types* invites danger, as they aren't implemented in C. Instead use:
  - collections.UserDict
  - collections.UserList
  - collections.UserString
- if you prefix methods with 2(two) underscores (_)
  __name is automatically renamed into __Classname__name
  to ensure that private names used in superclass won't be overwritten by identical names in a child class
  not necessarily for hiding
- view ~multiple inheritance~ as a highly specialized tool for:
  - organization & code reuse
  - as opposed to a general purpose programming technique
  - eg: try NOT to take a collection of arbitrary unrelated classes and combine it together
*** Attributes
- You can view =instance variables= with ~vars()~
  #+begin_src python
    vars(a) # {'owner': 'Guido', 'balance': 1000.0}
  #+end_src
- You can del(ete) an attribute with "del a.balance"
  You can add a new attribute "a.nickname = 'leo'"
- getattr(OBJ,ANAME)
  setattr(OBJ,ANAME,10)
  delattr(OBJ,ANAME)
  hasattr(OBJ,ANAME)
  getattr(OBJ,FNAME)(100) # method call
  getattr(OBJ,ANAME,DEFAULT)
- There is no class-level =scope=, which differs from C++ or Java
- special methods
*** Inheritance
- a class will inherit from =object.object= if none is provided
- a subclass method can call the =super().originalmethod()= original method overwritten
- a subclass can add a attribute (less common)
  #+begin_src python
    class EvilAccount(Account):
        def __init__(self, owner, balance, factor):
            super().__init__(owner, balance)
            self.factor = factor
        def inquiry(self):
        if random.randint(0,4) == 1:
            return self.factor * super().inquiry()
        else:
            return super().inquiry()
  #+end_src
- replace __repr__ to use type specific string in case of inherit
  #+begin_src python
    def __repr__(self):
        return f'{type(self).__name__}({self.owner!r}, {self.balance!r})'
  #+end_src
- any child class will type-check as the parent class (with isinstance()
*** Composition
- a problem with inheritance is know as ~implementation inheritance~
  aka when you get extra functionality (methods) that are not needed for your class when inheriting
  eg: inheriting from "list" to implement a stack
- Example: stack with inheritance
  #+begin_src python
    class Stack(list):
        def push(self, item):
            self.appen(item)
  #+end_src
- Example: stack with an independent class
  #+begin_src python
    class Stack:
        def __init__(self):
            self._items = list()
        def push(self, item):
            self._items.append(item)
        def pop(self):
            return self._items.pop()
        def __len__(self):
            return len(self._items)
  #+end_src
- Example: you could accept the internal "list" class as an optional argument (aka ~dependency injection~)
  #+begin_src python
    def __init__(self, *, container=None):
        if container is None:
            container = list()
        self._items = container
  #+end_src
*** Python supports =class variables=. Not associated with the instance. Can be override at inherit.
  class.Account/num_account = 0
  class.Account/__init__/Account.num_account += 1
*** @classmethod  - Python supports =class methods= aka methods applied to the class itself not instances.
  The 1st argument is always the class itself.
  On the same ~namespace~ as instance methods. They can still be invoked on the instance.
  eg: alternate instance constructors, often prefix with "from_"
  #+begin_src python
    class Account:
        def __init__(self, owner, balance):
            self.owner = owner
            self.balance = balance
        @classmethod
        def from_xml(cls, data):
            from.xmletree.ElementTree import XML
            doc = XML(data)
            return cls(doc.findtext('owner'), float(dock.findtext('amount')))

     a = Account.from_xml(data)
  #+end_src
*** @staticmethod
**** Example 1: Using the class for the namespace
- You do NOT normally create instances of such a class.
- Instead, call the functions directly through the class.
- They do NOT take extra /self/ or /cls/ argument.
  An ordinary function defined inside the class namespace.
  #+begin_src python
    class Ops:
        @staticmethod
        def add(x, y):
            return x + y
        @staticmethod
        def sub(x, y):
            return x - y
  #+end_src
**** Example 2: implement /swappable/ or /configurable/ behavior
- To organize a bundle of methods, NOT to store additional instance data that's related to Account.
- Something tha loosely mimics the behavior of an import module.
- Instead of inherit and overwrite methods in Account/EvilAccount we can provide a Policy class
  #+begin_src python
    class StandardPolicy:
        @staticmethod
        def deposit(account, amount):
            account.balance += amount
        @staticmethod
        def withdraw(account, amount):
            account.balance -= amount
        @staticmethod
        def inquiry(account):
            return account.balance

    class EvilPolicy(StandardPolicy):
        @staticmethod
        def deposit(account, amount):
            account.balance += 0.95*amount
        @staticmethod
        def inquiry(account):
            if random.randint(0,4) == 1:
                return 1.10 * account.balance
            else:
                return account.balance

    class Account:
        def __init__(self, owner, balance, *, policy=StandardPolicy):
            self.owner = owner
            self.balance = balance
            self.policy = policy
        def deposit(self, amount):
            self.policy.deposit(self, amount)
        def withdraw(self, amount):
            self.policy.withdraw(self, amount)
        def inquiry(self):
            return self.policy.inquiry(self)
    #+end_src
- Usage
  #+begin_src
    >>> a = Account('Guido', 1000.0)

    >>> a.policy
    <class 'StandardPolicy>

    >>> a.deposit(500)
    >>> a.inquiry()
    1500.0

    >>> a.policy = EvilPolicy
    >>> a.deposit(500)
    >>> a.inquiry()
    1975.0
  #+end_src
**** Example 3: we can drop the @staticmethod for inheritance of policy
- a = Account('Guido', 1000.0, policy=EvilPolicy(0.95, 1.10))
#+begin_src python
  class EvilPolicy(StandardPolicy):
      def __init__(self, deposit_fact, inquiry_factor):
          self.deposit_factor = deposit_factor
          self.inquiry_factor = inquiry_factor
      def deposit(self, account, amount):
          account.balance += self.deposit_factor * amount
      def inquiry(self, account):
          if random.randint(0,4) == 1:
              return self.inquiry_factor * account.balance
          else:
              return account.balance
#+end_src
*** @property and =@???.setter= and =@???.deleter=
- a special kind of attribute that:
  1) intercepts attribute access
  2) handles access it via user-defined methods
- it's common to use properties for implementing read-only computed data attributes
  which is a /more uniform "inteface"/ than using a method (which would have empty parenthesis)
#+begin_src python
  import string
  class Account:
      def __init__(self, owner, balance):
          self.owner = owner  # using the .owner version !!!!!
          self._balance = balance
      @property
      def owner(self):
          return self._owner # using the ._owner version
      @owner.setter
      def owner(self, value):
          if not isinstance(value, str):
              raise TypeError('Expected str')
          if not all(a in string.ascii_uppercase for c in value):
              raise ValueError('Must be uppercase ASCII')
          if len(value) > 10:
              raise ValueError('Must be 10 characters or less')
          self._owner = value





#+end_src
*** programming ~interfaces~ in python (isinstance/NotImplementedError/TypeError)
- isinstance(obj, cls)
  issubclass(cls1, cls2)
- have other classes inherit from Stream, and implement the methods themselves
- without an specific constructor, just using class typing relations
  #+begin_src python
    class Stream:
        def receive(self):
            raise NotImplementedError()
        def send(self, msg):
            raise NotImplementedError()
        def close(self):
            raise NotImplementedError()

    def send_request(stream, request):
        if not isinstance(stream, Stream):
            raise TypeError('Expected a Stream')
        stream.send(request)
        return stream.receive
  #+end_src
*** programming ~interfaces~ in python ABC/@abstractmethod
- if you try to create an instance, you'll get an error
- will error if a subclass has missing methods, at instancing
- it can still define methods and properties for use in subclasses
  eg: super().receive() from a subclass
#+begin_src python
  from abc import ABC, abstractmethod
  class Stream(ABC):
    @abstractmethod
    def receive(self):
      pass
    @abstractmethod
    def send(self, msg):
      pass
    @abstractmethod
    def close(self):
      pass
#+end_src
* Book: 22 | The Python Workshop | Corey Wade
source https://github.com/PacktPublishing/The-Python-Workshop-Second-Edition/
** TODO 07 Becoming Pythonic
- PEP 0020 "The Zen of Python"
  https://peps.python.org/pep-0020/
- "There should be one - and preferably only one - obvious way to do it"
*** {} Set
  - Is an unordered collection
  - you can see what elements are in a set
  - you cannot index into a set
  - you cannot set or insert an object at a particular location
  - { x for x in .. }
*** {} Dictionary
  - a collection of pairs of objects, a key and the value
  - comprehension is often used to build an index
  - { key:value for key in ... }
*** defaultdict
  #+begin_src python
    from collections import defaultdict
    john = {'first_name': 'John', 'surname': 'Cleese'}
     # 1st: type constructor, aka any callable, eg: a lambda
     #      aka default_factory
     #      "str" would mean an empty string
     # 2nd: optional, or a dictionary
    safe_john = defaultdict(str, john)
  #+end_src
*** custom iterators
- supporting iterators in your classes opens them up for the use in
  - comprehensions
  - for...in loops
- ~class~ must implement a method called *__iter__()* which returns the =iterator=
- the =iterator= must provide a single method *__next__()*
  - returns the next value in the collection
  - when reaches the end, should raise ~StopIteration~
    python is not dogmatic about exceptions
**** Example: a class that controls access to its collection, using that collection iterator
  this effectively provides an """interface""" which you can change the implementation details (eg: sql backed)
  #+begin_src python
    class Interrogator:
        def __init__(self, questions):
            self.questions = questions
        def __iter__(self):
            return self.questions.__iter__()

    questions = ["foo?", "bar?"]
    awkward_person = Interrogator(questions)

    for question in awkward_persion:
        print(question)
  #+end_src
**** Example: a custom iterator - sieve of eratostenes
- by implementing an iterative algorithm as a python =iterator=,
  you can treat it like a ~collection~.
#+begin_src python
  class PrimesBelow:
    def __init__(self, bound):
        self.candidate_numbers = list(range(2,bound))
    def __iter__(self):
        return self
    def __next__(self):
      if len(self.candidate_numbers) == 0:
        raise StopIteration
      next_prime = self.candidate_numbers[0]
      self.candidate_numbers = [ x for x in self.candate_numbers if x % next_prime != 0]
      return next_prime

    primes_to_a_hundred = [ prime for prime in PrimesBelow(1000)]
    print(primes_to_a_hundred)
#+end_src

** 13 The Evolution of Python
|------+------+--------------------------------------------------+------+----------------------------------------------|
| 2015 | [[https://docs.python.org/3/whatsnew/3.5.html][3.5]]  | typing package                                   | 0484 | type hints                                   |
|      |      | zipapp package                                   | 0441 | .pyz a way to package source code            |
|      |      | mat1 @ mat2                                      | 0465 | matrix multiplication                        |
|      |      | async/await                                      | 0492 | coroutines with async and await syntax       |
|      |      | *[1, 2]             => 1, 2                      | 0448 | additional *unpacking generalizations*       |
|      |      | **{'a': 1, 'c': 3}  => a=1, c=3                  |      |                                              |
|------+------+--------------------------------------------------+------+----------------------------------------------|
| 2016 | [[https://docs.python.org/3/whatsnew/3.6.html][3.6]]  | f"hello {name}"                                  | 0498 | formatted string literals                    |
|      |      | 1_000_000                                        | 0515 | underscores in numeric literals              |
|      |      | captain: string                                  | 0526 | type annotations(aka hints) for variables    |
|      |      | can use await and yield on 1 async function      | 0525 | asynchronous generators                      |
|      |      | [ i async for i in aiter() if i % 2]             | 0530 | asynchronous comprehensions                  |
|      |      | [await fun() for fun in functs if await cond()]  |      |                                              |
|      |      | secrets package                                  | 0506 |                                              |
|------+------+--------------------------------------------------+------+----------------------------------------------|
| 2018 | [[https://docs.python.org/3/whatsnew/3.7.html][3.7]]  | breakpoint()                                     |      |                                              |
|      |      | __getattr__                                      | 0562 |                                              |
|      |      | _ns                                              | 0564 |                                              |
|      |      | dicts remember insertion                         |      |                                              |
|      |      | @dataclass                                       | 0567 |                                              |
|      |      | importlib.resources                              |      |                                              |
|------+------+--------------------------------------------------+------+----------------------------------------------|
| 2019 | [[https://docs.python.org/3/whatsnew/3.8.html][3.8]]  | (:=) "walrus operator"                           | 0572 | assignment as an expression                  |
|      |      | @functor.cached_property                         |      |                                              |
|      |      | importlib.metadata                               |      |                                              |
|      |      | typing.TypedDict                                 |      | specify the keys                             |
|      |      | typing.Final                                     |      | mark as a constant                           |
|      |      | typing.Literal                                   |      |                                              |
|      |      | f'{name=}'                                       |      | print the name and value                     |
|      |      | (, /) positional only parameters                 | 0570 | forbids explicitly passing the name          |
|------+------+--------------------------------------------------+------+----------------------------------------------|
| 2020 | [[https://docs.python.org/3/whatsnew/3.9.html][3.9]]  | parser from LLI to PEG                           | 0617 |                                              |
|      |      | zoneinfo package                                 |      |                                              |
|      |      | ¦  dictionary merge                              |      |                                              |
|      |      | ¦= dictionary update                             |      |                                              |
|      |      | str.removesuffix()                               |      |                                              |
|      |      | str.removeprefix()                               |      |                                              |
|      |      | generic typing.Dict as dict                      | 0585 |                                              |
|      |      | generic typing.List as list                      |      |                                              |
|------+------+--------------------------------------------------+------+----------------------------------------------|
| 2021 | [[https://docs.python.org/3/whatsnew/3.10.html][3.10]] | match/case                                       | 0634 | a sort of "switch"                           |
|      |      | with (ctx1() as e1, ctx2() as e2):               |      | parentheses on with context managers         |
|      |      | (int ¦ float) instead of typing.Union[int,float] | 0604 | type union operator                          |
|      |      | statistics.(covariance/correlation/lregression)  |      |                                              |
|------+------+--------------------------------------------------+------+----------------------------------------------|
| 2022 | [[https://docs.python.org/3/whatsnew/3.11.html][3.11]] | tomllib package                                  |      | to read toml files, like pyproject.toml      |
|      |      | x: NotRequired[str]                              | 0655 | for potentially missing keys on a TypedDict  |
|      |      | x: Required[str]                                 |      |                                              |
|      |      | LiteralString type                               | 0675 | raises and error if the string is not static |
|      |      | .add_not() to all exceptions                     | 0678 | to enrich exceptions without *raise* another |
|------+------+--------------------------------------------------+------+----------------------------------------------|
*** match/case
- specification https://peps.python.org/pep-0634/
- motivation https://peps.python.org/pep-0635/
- tutorial https://peps.python.org/pep-0636/
#+begin_src python
  match x:
      case {"warning": value}:
          print("warning passed with value:", value)
      case ["error", value] | ["err", value]:
          print("Error array passed with value", value)
      case _:
          print("something else....")
#+end_src
* Book
** Authors
- Micha Gorelick, Fast Forward Labs | Innovation Day 2016
  https://www.youtube.com/watch?v=vE7fWPAwY-M
  word2vec > recurrent neural networks
- Tools for High Performance Python - Ian Ozsvald | ODSC Europe 2019
  https://www.youtube.com/watch?v=I1xyjc-JgGM
  - linear regression with sckt learn and also with numpy directly
  - %timeit
  - line_profiler
  - using:
    - a for loop
    - " "   " with df.iterrows()
    - df.apply()
    - df.apply(raw=True)
    - df.swifter (runs over dask module)
    - @numba.jit(nopython=True) // when raw=True due it works with numpy not pandas code (atm)
