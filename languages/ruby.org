- docs https://docs.ruby-lang.org/en/
- home https://www.ruby-lang.org/en/
- https://en.wikibooks.org/wiki/Ruby_Programming
- https://en.wikipedia.org/wiki/Ruby_on_Rails
- https://en.wikipedia.org/wiki/Ruby_(programming_language)
  - Author: Yukihiro Matsumoto (matz)
  - 1995-
  - Written in C
  - Author wanted an OO language.
    Didn't like Python, because it wasn't true OO.

- #!/usr/bin/env ruby

- implementations
  - mobile http://www.rubymotion.com/
  - java https://www.jruby.org
  - speed? https://github.com/oracle/truffleruby

- books https://github.com/manjunath5496/Ruby-Programming-Books
- book: https://learnbyexample.github.io/learn_ruby_oneliners/
- video Advent of Code 2019/6 https://vimeo.com/378152632
- video https://brightonruby.com/2016/the-point-of-objects-john-cinnamond/?utm_source=rubyweekly&utm_medium=email

- libraries
  - https://rubygems.org/
  - docs 3rd party libs https://rubydoc.info/

- tool: ri (Ruby API reference frontend)
- tool: version managers
  - https://github.com/rbenv/rbenv
    - /.ruby-version
    - ~/.rbenv/versions/
    - commands
      - rbenv init
      - eval "$(rbenv init - zsh)"
      - rbenv install -l
      - rbenv install 3.3.0
      - rbenv versions
      - rbenv rehash
  - https://rvm.io/
  - https://github.com/postmodern/chruby

- tool https://github.com/JoshCheek/seeing_is_believing
  emacs https://github.com/jcinnamond/seeing-is-believing

- codebases
  - http://ratfactor.com/repos/
    - static site generator http://ratfactor.com/repos/reporat/
    - crawler http://ratfactor.com/repos/chklnks.rb/
    - http://ratfactor.com/repos/rubylit/
    - vim+bookmarks
      - http://ratfactor.com/repos/rat-tools/html/new-book.html
      - http://ratfactor.com/cards/interactive-vim

* Language

- Typing: duck, dynamic, strong
- Everything is an object (including primitive data types)
- Optional () on function calls
- puts = short for "outPUT String"
- operators
  - + works for sum /numbers/ and concatenate /strings/

** Style

- tool: linter/formatter https://github.com/standardrb/standard
- tool: linter/formatter https://github.com/rubocop/rubocop/

- variable
- CONSTANT
- $global

** Changelog

https://rubyreferences.github.io/rubychanges/evolution.html

*** 1.0 - 1996

- 1.6   2000
- 1.8   2003-2013
- 1.9.3 2011
  - block local variables
  - additional lambda syntax (->(){})
  - additional hash literal syntax (colons after the symbol)
  - per string encoding
  - new socket api
  - require_relative

*** 2.0 - 2013

- 2.0
  - compatible with 1.9.3
  - method keyword arguments
  - new method "Module#prepend" to extend a class
  - new literal to create array of symbols
  - new api for lazy eval of Enumerables
  - new convention of using "#to_h" for object to hash conversion

*** 3.0 - 2020

- 3.0
  - "3x faster than 2"
  - introduces MJIT/YJIT
  - new concurrency utils: Fibre, Scheduler, Ractor
  - introduces RBS, for typed ruby
- 3.1   2021
- 3.2   2022
  - WASM compatible via WASI
- 3.3   2023
  - new parser: Prism
  - introduces RJIT

** Types

- Variables
  - nouns of Ruby
  - global if they begin with ($)
  - instance variables with (@) (think "at"-ttribute)
  - class variables with (@@)

- Strings
  - Both single and double quotes are used to create strings

- Symbols
  - start with a colon
  - like lightweight strings
  - used when you need a string but you won't be printing it

- Constants
  - capitalized
  - proper nouns of Ruby

- Methods (.)
  - the verbs of ybru
  - attached at the end of variables with by a dot
  - some methods (such as =print=) are kernel methods, won't use the dot

- Class Methods (::)
  - attached after variables and constants by a double colon

** stdlib

- new format https://ruby-doc.org/3.0.4/standard_library_rdoc.html#label-Default+gems
- old format https://ruby-doc.org/stdlib-3.0.4/

* Book: Programming Ruby 3.3

- Authors:
  - Dave Thomas
  - Andy Hunt
  - Chad Fowler
  - Noel Rappin

- home https://pragprog.com/titles/ruby5/programming-ruby-3-3-5th-edition/
- errata https://devtalk.com/books/programming-ruby-3-2-5th-edition/

** 2

- Ruby is an OOP, in programming terms, an object is
  a thing that combines data with the logic that
  manipulates that data.

* Book: why's (poignant) guide to Ruby

** 3 A Quick Ride Through Ruby

http://poignant.guide/book/chapter-3.html

- ="My conscience won't let me call Ruby a computer language. That would imply that the language works primarily on the computer's terms."=

- Read the following aloud to yourself.
  - Punctuation silent.
  - "Punctuation adds meaning to words, helps give cues as to waht the author intended by a sentence."
  #+begin_src ruby
    5.times { print "0delay!" }
    exit unless "restaurant".include? "aura"
  #+end_src

- This one reads more like "shorter english"
  #+begin_src ruby
    ['toast', 'cheese', 'wine'].each { |food| print food.capitalize }
  #+end_src

- ="Ruby is built from sentences. They aren't exactly English sentences. They are short collections of words and punctuation which emcompass a single thought. These sentences can form books. They can form pages. They can form entire novels, when trung together. Novels that can be read by humans, but also by computers."=

- "Punctuation and capitalization will help your brain to see bits of code and feel intense recognition."

* Snippets

#+begin_src ruby
  width, height = `xrandr`.scan(/current (\d+) x (\d+)/)
                    .flatten
                    .map(&:to_i)
#+end_src
