- GHC(i) Manual
  https://downloads.haskell.org/ghc/latest/docs/users_guide/
  https://downloads.haskell.org/ghc/latest/docs/users_guide/index.html
  https://downloads.haskell.org/ghc/latest/docs/users_guide/ghci.html

- GHCI https://wiki.haskell.org/GHC/GHCi

- -I0
  -Iw
  +RTS -I0 -RTS
  -rtsopts to ghc-options in .cabal

- use ":{" and ":}" for multi-line blocks on ghci
  :?
  :show languag
  :quit
  :(m)odule ModuleName
  :(t)ype mean
  :doc fn
  :(i)nfo fn

* usage

|-----------+-------------------------------------------|
| in .cabal | library\nghc-options: -fdefer-typed-holes |
| in repl   | :set -fdefer-typed-holes                  |
| in source | {-# OPTIONS_GHC -fdefer-typed-hols #-}    |
|-----------+-------------------------------------------|

- in command: ghc -Wincomplete-patterns Main.hs
- in repl:   :set -Wincomplete-patterns
             :set -Wno-incomplete-patterns

* flags

- Flag reference
  https://downloads.haskell.org/ghc/latest/docs/users_guide/flags.html
- Warnings and sanity-checking
  https://downloads.haskell.org/~ghc/7.8.3/docs/html/users_guide/options-sanity.html

|----------------------------+----------------------------------------------------------------------|
| -Wall                      | enables more common warnings (including missing case branch)         |
| -Weverything               | enables EVERY warning                                                |
| -Werror                    | turns warning into errors                                            |
|----------------------------+----------------------------------------------------------------------|
| -fno-warn-type-defaults    | ommit warning when using numeric constants on polymorphics functions |
| -fwarn-incomplete-patterns | on incomplete pattern matches                                        |
| -prof                      | enables profiling information, needs P.I. from each lib              |
| -fdefer-typed-holes        | allows ~typed holes~, aka to type (_) in place of an expression      |
| -fforce-recomp             |                                                                      |
|----------------------------+----------------------------------------------------------------------|
* language extensions

old https://downloads.haskell.org/~ghc/8.6.1/docs/html/libraries/Cabal-2.4.0.1/Language-Haskell-Extension.html
https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts.html
https://github.com/i-am-tom/haskell-exercises

- NOTE: some extensions are better enabled globally or prohibited altogether
  enabling some extensions on a module-by-module basis
  can end up causing maintenance burden on the application long term
  since applciations that use it ned to be careful.

- in cabal: by adding it to *default-extensions* enables it across the target
- in repl: *:set -XTypeApplications* or :seti to enable it only for interactive code
- in source: using a ~language pragma~
   *{-# LANGUAGE TypeApplications, QuasiQuotes #-}*

|-----------------+-----------------------------------------------------------------------------------------------+----+---|
|                 |                                                                                               | 21 | R |
|-----------------+-----------------------------------------------------------------------------------------------+----+---|
| [[https://downloads.haskell.org/~ghc/latest/docs/users_guide/exts/record_wildcards.html][RecordWildCards]] | RecName {..} automatically captures each field by the name, OR creates a new record           | -  | x |
| [[https://downloads.haskell.org/~ghc/latest/docs/users_guide/exts/record_puns.html][NamedFieldPuns]]  | Rec1Name { fieldname1 = Rec2Name { fieldname2 } }                                             | -  | x |
|-----------------+-----------------------------------------------------------------------------------------------+----+---|
| BlockArguments  | use just (do) in places where you would use ($ do)                                            |    | - |
| LambdaCase      | (\case PAT1 -> RET1)                                                                          |    | x |
| PatternSynonyms |                                                                                               |    | - |
| QuasiQuotes     | alternate form of string literal                                                              |    | - |
| TemplateHaskell |                                                                                               |    | - |
| ViewPatterns    | (f -> PATTERN) applies "f" to value and then matches the result, on function pattern matching |    | x |
|-----------------+-----------------------------------------------------------------------------------------------+----+---|


|----------------------------+-------------------------------------------------------------------------------------------------------+-----+---|
|                            |                                                                                                       | 21  | R |
|----------------------------+-------------------------------------------------------------------------------------------------------+-----+---|
| AllowAmbiguousTypes        |                                                                                                       | -   | - |
| BangPatterns               | makes pattern matching and let bindings strict, instead of lazy, by adding a (!) before the varname   | yes | x |
| ConstraintKinds            |                                                                                                       | yes | x |
| DataKinds                  |                                                                                                       | -   | x |
| DefaultSignatures          | allow us to add a *type signature* to the default implementation of function in a type class          | -   | x |
| DeriveAnyClass             | to use any typeclass (with no methods), to be used on a "derive", it will create the no-body instance | -   | - |
| DerivingStrategies         | helps resolve conflicts when different derivings extension are enabled stock/anyclass/newtype         | -   | - |
| DerivingVia                | to use newtype's as a template for how to define a typeclass for other types                          | -   | - |
| ExistentialQuantification  |                                                                                                       | yes | x |
| ExplicitForAll             | allows us to make explicit use of *forall*                                                            | yes | - |
| FlexibleContexts           |                                                                                                       | yes | x |
| FlexibleInstances          |                                                                                                       | yes | x |
| FunctionalDependencies     |                                                                                                       | -   | x |
| GADTs                      |                                                                                                       | -   | x |
| GeneralizedNewtypeDeriving | to derive typeclass instance based on the underlying type                                             | yes | x |
| KindSignatures             | allows us to write the kind signatures for types in our type annotations                              | yes | x |
| MultiParamTypeClasses      |                                                                                                       | yes | x |
| OverloadedStrings          | replaces every string litearal, with a call to ~fromString~ on that literal                           | -   | x |
| PolyKinds                  |                                                                                                       | yes | x |
| QuantifiedConstraints      |                                                                                                       | -   | - |
| RankNTypes                 |                                                                                                       | yes | x |
| ScopedTypeVariables        | allows type applications to refer to type variables rather that ONLY the concrete type                | yes | x |
| TupleSections              |                                                                                                       | yes | x |
| TypeApplications           | (@TYPE) to specify a type argument for polymorphic functions                                          | yes | - |
| TypeFamilies               |                                                                                                       | -   | x |
| TypeOperators              |                                                                                                       | yes | - |
| UndecidableInstances       |                                                                                                       | -   | - |
| NoStarIsType               |                                                                                                       | -   | - |
| StandaloneDeriving         | allows us to write stand-alone "deriving instance Read? SomeType" declarations, useful for GHCI       | yes | x |
| ApplicativeDo              | allows us to use "do notation" for non Monads and use it for Applicative                              | ?   | - |
| NoImplicitPrelude          | signals we would not be making use of the standard ~Prelude~ module from the ~base~ package           |     | x |
| +AutoDeriveTypeable+       |                                                                                                       |     | x |
| BinaryLiterals             | using "0b110100101" will be desugared in "fromInteger 201"                                            | yes | x |
| DeriveDataTypeable         |                                                                                                       |     | x |
| DeriveFoldable             |                                                                                                       |     | x |
| DeriveFunctor              |                                                                                                       |     | x |
| DeriveGeneric              |                                                                                                       |     | x |
| DeriveTraversable          |                                                                                                       |     | x |
| DoAndIfThenElse            |                                                                                                       |     | x |
| EmptyDataDecls             |                                                                                                       |     | x |
| InstanceSigs               |                                                                                                       |     | x |
| MonadFailDesugaring        |                                                                                                       |     | x |
| MultiWayIf                 |                                                                                                       |     | x |
| PartialTypeSignatures      |                                                                                                       |     | x |
| PatternGuards              |                                                                                                       |     | x |
| TypeSynonymInstances       |                                                                                                       |     | x |
|----------------------------+-------------------------------------------------------------------------------------------------------+-----+---|

- "21?" column stands for GHC2021 and means,
  if the extension is enabled by default on that version of Haskell (aka GHC 9.4)
