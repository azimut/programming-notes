- Livestreams Learning Haskell https://www.youtube.com/@JohnCinnamond/streams
- Haskell Adventures - A Calculator
  https://www.youtube.com/playlist?list=PL_xuff3BkASMOzBr0hKVKLuSnU4UIinKx
- The Haskell Unfolder
  - Episode 1: unfoldr  https://www.youtube.com/watch?v=S_HSt6jEtWM
- Streamer https://www.youtube.com/c/cvladfp/videos
- Streamer https://www.youtube.com/@EdwardKmett1/videos
- Channel https://www.youtube.com/@impurepics/videos
- Haskell Projects Playlist https://www.youtube.com/watch?v=qbDQdXfcaO8&list=PLyQXlWxYAh8_9_Q-XeyIF4CmQbE9b0Oc0
- Streamers https://github.com/chiroptical/declarative-programming-streams
- https://github.com/hzlmn/haskell-must-watch
- https://github.com/hellerve/programming-talks#haskell
- Making Algorithmic Music
  Compose NYC 2019
  Speaker: Donya Quick
  https://www.youtube.com/watch?v=9Fg54XAr044
- Berlin function programming https://www.youtube.com/channel/UCNp-DVb8cQRIOo32sZhWgNg
- Talks by kowainik https://www.youtube.com/playlist?list=PL6EBWxwzgPKOHz4OQlyVHeae0EUqL6Prt
- Functional Parsing - Computerphile https://www.youtube.com/watch?v=dDtZLm7HIJs
* Backend Web Programming in Haskell - Tsoding
https://www.twitch.tv/videos/743607386
https://github.com/tsoding/tsoken/blob/master/src/Main.hs
* Videos
** Tsoding
- Haskell AMA https://www.twitch.tv/videos/736842835
- Haskell > JavaScript https://www.twitch.tv/videos/750508584
- Functional Programming in Production https://www.twitch.tv/videos/757306194
- [Discord + Twitch] Double Platform ... https://www.twitch.tv/videos/764093623
- Backend Web Programming in Haskell https://www.twitch.tv/videos/743607386
** Courses
   - https://github.com/hzlmn/haskell-must-watch
   - Functional Programming in Haskell: Professor Graham Hutton from the University of Nottingham.
     https://www.youtube.com/playlist?list=PLF1Z-APd9zK7usPMx3LGMZEHrECUGodd3
   - Haskell for imperative programmers
     https://www.youtube.com/channel/UC3xdLFFsqG701QAyGJIPT1g/videos
   - Haskell Summer Course
     https://www.youtube.com/playlist?list=PLaAHmR4OoQXcrQl7kgkraWQAgQ-8FpEmS
   - 2018 Haskell School in the Networked Imagination Laboratory
     https://www.youtube.com/playlist?list=PLyEzdf4cdMMHGqVnAzLV8eDXn6Ajj46JA
   - Haskell : Learn You a Haskell for Great Good
     https://www.youtube.com/playlist?list=PLS6urCrsYES24Fwzg5-Uga1QEbNm9kiU_
   - Haskell for Imperative Programmers
     https://www.youtube.com/playlist?list=PLe7Ei6viL6jGp1Rfu0dil1JH1SHk9bgDV
   - Haskell - Functional Programming Fundamentals (Dr. Erik Meijer)
     https://www.youtube.com/playlist?list=PLoJC20gNfC2gpI7Dl6fg8uj1a-wfnWTH8
   - Programming with Categories
     http://brendanfong.com/programmingcats.html
     https://www.youtube.com/playlist?list=PLhgq-BqyZ7i7MTGhUROZy3BOICnVixETS (category theory)
** Livecoding
   - Barry (haskell book) https://www.youtube.com/channel/UCndlCtPeYygdGZ9UUKdehbw

** other
  - https://www.youtube.com/c/tweag/videos
  - ZÃ¼rich Friends of Haskell
    https://www.youtube.com/channel/UC2zfPMH_srjxUN5EYrfIhCw
  - Jappie Klooster
    https://www.youtube.com/channel/UCQxmXSQEYyCeBC6urMWRPVw/videos
  - HaskellRank (tsoding)
    https://www.youtube.com/playlist?list=PLguYJK7ydFE4aS8fq4D6DqjF6qsysxTnx
  - lenses
    https://www.youtube.com/watch?v=cefnmjtAolY
    https://docs.google.com/file/d/0ByK3AAy5ubqady1YczU2UEYzODQ/edit
  - Jeremy Gibbons: Algorithm Design with Haskell
    https://www.youtube.com/watch?v=JJv74IJUp4E
  - NYC Haskell User's Group
    https://www.youtube.com/channel/UCzNYHE7Kj6pBqq5h8LG9Zcg
* @rae's Thoughts on Haskell on tweag
https://www.youtube.com/playlist?list=PLyzwHTVJlRc9QcF_tdqc9RdxJED8Mvyh1
** Jun 21 | Avoid boilerplate instances with DerivingVia

- Example: given an enum of levels of alert
  #+begin_src haskell
    data DangerLevel =
      = AllOk
      | NotGreat
      | UhOh
      | RealProblemHere
      | Catastrophe
      deriving (Eq, Ord)
  #+end_src

- I want to *combine* them so I could get the highest level of alert from the given
  For that i will need to implement Monoid and Semigroup
  #+begin_src haskell
    instance Semigroup DangerLevel where
      (<>) = max
    instance Monoid DangerLevel where
      mempty = AllOk
  #+end_src

- If I have the same problem repeated, eg: I have an enum of "MovieRating".

- I could use DerivingVia.
  First by defining a ~newtype~, as a *simple wrapper* over some type "a"
  That implements/instances both Semigroup and Monoid

  #+begin_src haskell
    newtype Supremum a = MkS a
      deriving (Eq, Ord, Bounded)

    instance Ord a => Semigroup (Supremum a) where
      (<>) = max
    instance (Ord a, Bounded a) => Monoid (Supremum a) where
      mempty = minBound
  #+end_src

- We could then use ~DeriveVia~ with the newtype to automatically write the instances for us.

  #+begin_src haskell
    {-# LANGUAGE DerivingStrategies #-}
    {-# LANGUAGE DerivingVia #-}
    -- <--- Supremum newtype and instances go here
    data DangerLevel =
      = AllOk
      | NotGreat
      | UhOh
      | RealProblemHere
      | Catastrophe
      deriving (Eq, Ord, Bounded)
      deriving (Semigroup, Monoid) via (Supremum DangerLevel)
  #+end_src

- Since the relationship between "Supreme DangerLevel" and "DangerLevel" is just a *newtype*
  We can coerce from one type to another.
  It's like we were writting this code.
  #+begin_src haskell
    import Data.Coerce
    instance Semigroup DangerLevel where
      (<>) = coerce ((<>) @(Supremum DangerLevel))
  #+end_src

- We could also use it to get a inverse order, right on the *via*
  ~Down~ is a *type wrapper* that flips the orientation of Ord and Bounded instances.

  #+begin_src haskell
    {-# LANGUAGE DerivingStrategies #-}
    {-# LANGUAGE DerivingVia #-}
    {-# LANGUAGE GeneralisedNewtypeDeriving #-}
    import Data.Ord -- for Down
    newtype FloodLevel = MkFL Int
      deriving stock Show
      deriving newtype (Ord, Eq, Bounded)
      deriving (Semigroup, Monoid) via (Supremum (Down FloodLevel))
  #+end_src

- ~newtype~ deriving is a specialization of doing DV

  #+begin_src haskell
      deriving newtype (Ord, Eq, Bounded) -- would have been the same that doing the next line
      deriving (Ord, Eq, Bounded) via Int
  #+end_src

** Nov 21 | All about `deriving` in GHC

- basic usage
  #+begin_src haskell
    module Deriving where
    data T = MkT Int Bool
      deriving (Show, Eq) -- instance Show T where show = ...
  #+end_src

- using a *newtype* Age,
  we would want to "derive" other typeclasses like Num,
  in order to use arithmethic operation from that class

- =GeneralizedNewtypeDeriving=
  "if we are deriving an instance for a class,
   that is NOT one of the built in one,
   and we are doing it for a newtype
   just copy all the definition from the representation type"
  #+begin_src haskell
    {-# LANGUAGE GeneralizedNewtypeDeriving #-}
    newtype Age = MkAge Int
      deriving (Show, Eq, Num) -- this would ERROR due Num without GeneralizedNewtypeDeriving
  #+end_src

- =DeriveAnyClass= to derive from an empty typeclass aka with NO METHODS
  #+begin_src haskell
    {-# LANGUAGE DeriveAnyClass #-}
    class C a
    data T = MkT Int Bool
      deriving (Show, Eq, C) -- instance C T
  #+end_src

- =DerivingStrategies= to disambiguate deriving
  =DeriveGeneric=
  #+begin_src haskell
    {-# LANGUAGE DerivingStrategies #-}
    {-# LANGUAGE DeriveGeneric #-}
    import Data.Aeson
    import GHC.Generics -- for FromJSON to work
    newtype Age = MkAge Int
      deriving stock (Show, Eq, Generic) -- altenative way of derive with
      deriving newtype Num
      deriving anyclass FromJSON
  #+end_src

- there's a difference whether you derive ~Show~ with stock or newtype
  - stock - will show "constructor value"
  - newtype - will show "value"

- =DerivingVia=
  a direct generalization of DerivingNewtype
  DN copies all the implementations
  DV, for any type that his representation is the same, I can do the copying

  #+begin_src haskell
    import Data.Ord -- for Down
    newtype Age = MkAge Int
      deriving Ord via (Down Int) -- take the instance of "Down Int" and copy all the methodsover to work Ord for Age
      deriving newtype (Show, Num) -- this
      deriving (Show, Num) via Int -- is the same of this
  #+end_src

**        | Not all bangs in patterns are BangPatterns
#+begin_src haskell
  {-# LANGUAGE BangPatterns #-}
#+end_src

- /case,let and where/ are lazy by default

#+begin_src haskell
z = case undefined of  x -> 'y' -- y
z = case ()        of !x -> 'y' -- y
z = case undefined of !x -> 'y' -- ERROR
z = let  y = undefined in () -- ()
z = let !y = 5 in ()         -- ()
z = let !y = undefined in () -- ERROR - is NOT a BangPattern
#+end_src

- It makes the binding strict, but it is NOT a BangPattern

#+begin_src haskell
  z = let False = True in () -- ()
  z = let !False = True in () -- runtime ERROR
  z = !(Just x) = Just undefined in () -- ()
  z = !(Just !x) = Just undefined in () -- runtime ERROR, !x it IS a BangPattern
#+end_src

* TODO 07 | A History of Haskell                  | Simon Peyton Jones

https://www.microsoft.com/en-us/research/publication/a-history-of-haskell-being-lazy-with-class/
https://www.youtube.com/watch?v=06x8Wf2r2Mc

- Haskell kickoff in '87, first release in '90

- Lazyness keeps you pure

- "do notation"
  - is syntactic sugar for bind (>>=)
  - deliberately imperative look and feel

- 50%

* TODO 10 | Data Parallel Haskell                 | Simon Peyton Jones

- DSL for GPU https://www.cs.drexel.edu/~gbm26/files/mainland10nikola.pdf

- 3(three) forms of concurrency
  1) explicit threads: non-deterministic by design, monadic =forkIO= and =STM=
     #+begin_src haskell
       main :: IO ()
       main =
         do
           ch <- newChan
           forkIO (ioManager ch)
           forkIO (worker 1 ch)
          -- ...
     #+end_src
  2) semi-explicit: determinisitic, pure (~par~ and ~seq~)
     #+begin_src haskell
       f :: Int -> Int
       f x = a `par` b `seq` a + b
         where
           a = f (x-1)
           b = f (x-2)
     #+end_src
  3) data parallel: deteministic, pure (parallel arrays), shared memory initially, distributed memory eventually

- Data parallelism types

  1) Flat Data Parallelism
     - apply _sequential_ operations on bulk data
     - does not create a thread for every op, it groups them in bulks
     - Limited applicability: dense matris, map/reduce

  2) Nested Data Parallelism
     - apply _parallel_ operations on bulk data
     - allows for each work to be further paralleised (branching)
     - Wider applicability: sparse matrix, graph algorithms
     - easier for the programmer, harder to implement locallity

- It is possible to write a "compiler" that "flattens" a program written
  in the "nested data parallelism" style into a "flat data parallism" algorithm.
  aka flattening or vectorization

- NESL, a parallel programming language released in 1993
  Based on "Nested Data Parallelism".
  https://en.wikipedia.org/wiki/NESL

- 50:00 vectorization...

** Flat Data Paralleism Examples

- Array comprehensions

  #+begin_src haskell
    -- [:Float:] is the type of parallel arrays of Float
    vecMul :: [:Float:] -> [:FLoat:] -> Float
    vecMul v1 v2 = sumP [: f1*f2 | f1 <- v1 | f2 <- v2 :]
  #+end_src

- Sparse vector multiplicatin

  #+begin_src haskell
    svMul :: [:(Int,Float):] -> [:Float:] -> Float
    svMul sv v = sumP [: f*(v!i) | (i,f) <- sv :]
  #+end_src

- Sparse matrix
  #+begin_src haskell
    smMul :: [:[:(Int,Float):]:] -> [:Float:] -> Float
    smMul sm v = sumP [: svMul sv v | sv <- sm :]
  #+end_src

* 10 | AwesomePrelude - Liberating Haskell from data types!
https://vimeo.com/9351844
TODO 05:00
** Example: Encoding a simple addition and sum
#+begin_src haskell
data Expr where
  Con :: Int -> Expr
  Add :: Expr -> Expr -> Expr
  Mul :: Expr -> Expr -> Expr
-- To use the operators
instance Num Expr where
  fromInteger x = Con (fromIntegral x)
  x + y         = Add x y
  x * y         = Mul x y
-- evaluator
eval :: Expr -> Int
eval (Con x)   = x
eval (Add x y) = eval x + eval y
eval (Mul x y) = eval x * eval y
#+end_src
** Example: Encoding with (==)
Prelude's (==) returns Bool, which we cannot override
AwesomePrelude, provides a more generic (==)
* 11 | Haskell Amuse-Bouche                  | Mark Lentczner

source/slides https://github.com/mzero/haskell-amuse-bouche

- shell pipes and (some) commands, are functional, pure, and lazy (as soon as they able output)
  $ cat poem | tr a-z a-Z | sed -e 's/$/!!!/'

- shell pipes-like written in Haskell
  #+begin_src haskell
    main :: IO ()
    main = readFile "poem" >>= putStr . process

    process :: String -> String
    process = unlines . sort . lines
  #+end_src

** functions

- we can factor it out the pattern of working with lines
  #+begin_src haskell
    byLines f = unlines . f . lines
  #+end_src

- examples
  #+begin_src haskell
    sortLines     = byLines sort
    reverseLines  = byLines reverse
    firstTwoLines = byLines (take 2)
  #+end_src

- in order to work with each string with ~map~
  #+begin_src haskell
    indentEachLine :: String -> String
    indentEachLine = byLines (map indent)
  #+end_src

- we factor it out again
  #+begin_src haskell
    eachLine :: (String -> String) -> String -> String
    eachLine f = unlines . map f . lines

    indentEachLine :: String -> String
    indentEachLine = eachLine indent
  #+end_src

- The turning or ~indent~ function, which only works with =String=
  to a version of ~indent~ that works with =[String]=
  we call that /lifting up/.

- We can keep going and work on each "word" on each "line"
  #+begin_src haskell
    eachWordOnEachLine :: (String -> String) -> String -> String
    eachWordOnEachLine f = eachLine (eachWord f)

    yellEachWordOnEachLine :: String -> String
    yellEachWordOnEachLine = eachWord yell
  #+end_src

** Example: defining a new ~data~ type for List

#+begin_src haskell
  data List a
    = EndOfLIst
    | Link a (List a)

  empty = EndOfList
  oneWord = Link "apple" EndOfList
  twoWords = Link "banana" (Link "cantaloupe" EndOfList)
  mystery3 = Link "pineapple" mystery3 -- infinite list, haskell is fine with this
#+end_src

** power Alternatives <|>

#+begin_src haskell
  (<|>) :: Alternative f => f a -> f a -> f a
#+end_src

- instances: Maybe, []

- short-circuit evaluation based on =Maybe=
  returns the first =Just= it gets or =Nothing=
  #+begin_src haskell
    pickShow :: Person -> Maybe String
    pickShow p =
      favoriteShow (name p)     -- String -> Maybe String
      <|> showWithName (name p) -- String -> Maybe String
      <|> showForYear (year p)  -- Int -> Maybe String
  #+end_src

* 13 | Sed implementation in Haskell | nixcasts
playlist https://www.youtube.com/playlist?list=PLUQzXLQ6jvHL_k3QOMKXehVoZdk-sKtHd
source https://github.com/connermcd/sed
** 1

#+begin_src haskell
  module Sed where

  import qualified Data.Text as T
  import qualified Data.Text.IO. as TIO

  sed :: T.Text -> T.Text
  sed t = t

  main :: IO ()
  main = TIO.interact sed
#+end_src

** 2
* TODO 12 | Lens, Folds, and Traversals           | Edward Kmett

video https://www.youtube.com/watch?v=cefnmjtAolY
slides http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf
scala version https://www.youtube.com/watch?v=efv0SQNde5Q

10:00

** What is a lens?

- "Costate Comonad Coalgebra is equivalent of Java's
   member variable update tech in for Haskell"

- lens it's getters and setters

- (made up) simplest form of a lens we could make
  #+begin_src haskell
    data Lens s a = Lens { set  :: s -> a -> s
                         , view :: s -> a
                         }
    view :: Lens s a -> s -> a
    set  :: Lens s a -> s -> a -> s
  #+end_src

- Laws
  #+begin_src haskell
    -- if i get something and I put it back, is the same as i did nothing
    1> set  l (view l s) s  = s
    -- if I put something in, I should be able to get it back out
    2> view l (set l s a)   = a
    -- if i did 2 different sets, only the last set is relevant
    3> set  l (set l s a) b = set l s b
  #+end_src

- Our made up definition, using costate/comonad
  #+begin_src haskell
    data Lens s a = Lens (s -> (a -> s, a))

    data Store s a = Store (s -> a) s -- Comonad/CoAlgebra
    data Lens s a = Lens (s -> Store a s)
  #+end_src

- ?
  #+begin_src haskell
    newtype Lens s a = Lens (s -> Store a s)
    data Store s a = Store (s -> a ) s
    instance Category Lens where
      id = Lens (Store id)
      Lens f . Lens g = Lens $ \r -> case g r of
        Store sr s -> case f s of
          Store ts t -> Store (sr . ts) t
  #+end_src

** "The power is in the dot"

- reference to a Erik Meijer talk
- the composition function

** Semantic editor combinations

#+begin_src haskell
  type SEC s t a b = (a -> b) -> s -> t
#+end_src

** Setters
** Traversals
** Folds
** Lenses
** Getters
** Overloading Application
** Uniplate
** Zippers

* 13 | Running a Startup with Haskell        | Bryan O'Sullivan
https://www.youtube.com/watch?v=ZR3Jirqk6W8

- 3 person startup
  - Backend on Haskell
  - GUI in C# (he likes the language)
  - riak for database

- Author of Oreilly's "Real World Haskell"

- http webservers
  - yesod
  - snap (presentator uses this)

- wrote more memory efficient json parser

- recommends "property based testing"

- wrote http benchmark https://github.com/bos/pronk

- C# complains
  - limited type inference
  - concurrency (locks/mutexes/semaphores)
  - some seemengly good ideas that make you write code that looks like shit
    - properties
      - foo.a   , a is a property
      - foo.a.b , a ends up being a function

* 13 | Adventure with Types                  | Simon Peyton
  - Simon Peyton Jones Compiling without continuations
    https://www.youtube.com/watch?v=qx5NZmrFnvs
  - https://www.cs.uoregon.edu/research/summerschool/summer13/lectures/FC_in_GHC_July13.pdf
  - https://www.cs.uoregon.edu/research/summerschool/summer13/lectures/Kinds_and_GADTs.pdf
  - https://www.cs.uoregon.edu/research/summerschool/summer13/lectures/Type_inference.pdf
  - https://www.cs.uoregon.edu/research/summerschool/summer13/lectures/FunWithTypeFuns.pdf
** 1 https://www.youtube.com/watch?v=6COvD8oynmI
  slides https://www.cs.uoregon.edu/research/summerschool/summer13/lectures/ClassesJimOPLSS.pdf
- 18:40 When we declare a function with a type class (constraint?)
  - the compiler "adds an extra argument" to the function, the arg is kind of like a "vtable/read-table"
    - like a implicit argument passing
    - a record with the instance declarations functions for the typeclass
- A *class* declaration turns into a *data* declaration
- *instance* declarations turns into a record with the function instances
- Constants are also overloaded, "1" is "(fromInteger d 1)"
- [[file:///home/sendai/disk2/videos/Programming/haskell/Simon_Peyton_Jones/Adventure%20with%20Types%20in%20Haskell%20-%20Simon%20Peyton%20Jones%20(Lecture%201)%20%5B6COvD8oynmI%5D.webm][00:47:14]] differences between haskell class and OO interface
  1) NO problem with *multiple constraints*
     #+begin_src haskell
     f :: (Num a, Show a) => a ->
     #+end_src
  2) Existing types can _retroactively_ be made instances of new type classes
     #+begin_src haskell
     class Wibble a where
       wib :: a -> Bool
     instance Wibble Int where
       wib n = n+1
      #+end_src
- [[file:///home/sendai/disk2/videos/Programming/haskell/Simon_Peyton_Jones/Adventure%20with%20Types%20in%20Haskell%20-%20Simon%20Peyton%20Jones%20(Lecture%201)%20%5B6COvD8oynmI%5D.webm][00:49:05]] Haskell has type based dispatch, is NOT value-based dispatch
  We do NOT have a vtable attached to the value.
- [[file:///home/sendai/disk2/videos/Programming/haskell/Simon_Peyton_Jones/Adventure%20with%20Types%20in%20Haskell%20-%20Simon%20Peyton%20Jones%20(Lecture%201)%20%5B6COvD8oynmI%5D.webm][01:00:40]] Two approaches to polymorphism
  Polymorphism: same code works on a variety of different argument types.
  1) SubTyping (subclassing) from the OO world
     On OO you can _retroactively_ subclass
  2) Parametric polymorphism (generics) from the ML world.
     You need to _anticipate_ the need to act on arguments of various types.
- [[file:///home/sendai/disk2/videos/Programming/haskell/Simon_Peyton_Jones/Adventure%20with%20Types%20in%20Haskell%20-%20Simon%20Peyton%20Jones%20(Lecture%201)%20%5B6COvD8oynmI%5D.webm][01:09:55]] java and c# support *constrained generics*
  #+begin_src csharp
    A inc<A>(A x)
        where A:Inum {
        // ...
    }
  #+end_src
  - Which is like
    #+begin_src haskell
      inc :: Num a => a -> a
    #+end_Src
- [[file:///home/sendai/disk2/videos/Programming/haskell/Simon_Peyton_Jones/Adventure%20with%20Types%20in%20Haskell%20-%20Simon%20Peyton%20Jones%20(Lecture%201)%20%5B6COvD8oynmI%5D.webm][01:09:20]] OO languages also adopted *variants*
  #+begin_src csharp
    interface IEnumerator<out T> {
        T Current;
        bool MoveNext();
    }
    //...
    m ( IEnumerator<Control> )
    IEnumerator<Button> b
  #+end_src
- [[file:///home/sendai/disk2/videos/Programming/haskell/Simon_Peyton_Jones/Adventure%20with%20Types%20in%20Haskell%20-%20Simon%20Peyton%20Jones%20(Lecture%201)%20%5B6COvD8oynmI%5D.webm][01:13:22]] the combination of parametric polymorphism and sub-typing is hard
- [[file:///home/sendai/disk2/videos/Programming/haskell/Simon_Peyton_Jones/Adventure%20with%20Types%20in%20Haskell%20-%20Simon%20Peyton%20Jones%20(Lecture%201)%20%5B6COvD8oynmI%5D.webm][01:21:32]] "Language design is all about the balance between, intellectual, compiler and programmer complexity.
  Against the expresiveness and naturalness of the programming language."
- [[file:///home/sendai/disk2/videos/Programming/haskell/Simon_Peyton_Jones/Adventure%20with%20Types%20in%20Haskell%20-%20Simon%20Peyton%20Jones%20(Lecture%201)%20%5B6COvD8oynmI%5D.webm][01:29:04]] "finding type classes is simply a weak proof search"
** 2
- [[file:///home/sendai/disk2/videos/Programming/haskell/Simon_Peyton_Jones/Adventure%20with%20Types%20in%20Haskell%20-%20Simon%20Peyton%20Jones%20(Lecture%202)%20%5BbrE_dyedGm0%5D.webm][00:02:54]] the joy of types
  1) Types guarantee the absence of ceratin classes of errors
     - True + 'c'
     - segfaults
  2) The static type of a function is a *partial (machine checked) specification*
  3) Types are a design language. The UML of Haskell.
  4) Types massively support interactive program development.
  5) Their support for software maintenance
- [[file:///home/sendai/disk2/videos/Programming/haskell/Simon_Peyton_Jones/Adventure%20with%20Types%20in%20Haskell%20-%20Simon%20Peyton%20Jones%20(Lecture%202)%20%5BbrE_dyedGm0%5D.webm][00:16:12]] GADT (generalized algebraic data types)
  #+begin_src haskell
    data Maybe a = Nothing | Just a
      -- OLD
    data Maybe a where
      Just :: a -> Maybe a
      Nothing :: Maybe a
  #+end_src
- [[file:///home/sendai/disk2/videos/Programming/haskell/Simon_Peyton_Jones/Adventure%20with%20Types%20in%20Haskell%20-%20Simon%20Peyton%20Jones%20(Lecture%202)%20%5BbrE_dyedGm0%5D.webm][00:34:33]] Higher Kinds
  - Sometimes you need a kind system that does for types what types does for terms.
  - Kinds are way to classify types
  - Abstracting types out of types
    (a for type, f for type constructor)
    #+begin_src haskell
      data Tree f a = Leaf a
                    | Node (f (Tree f a))

      type RoseTree a = Tree [] a
      type BinTree  a = Tree Pair a
      type AnnTree  a = Tree AnnPair a

      data Pair a    = P a a
      data AnnPair a = AP String a a
    #+end_src
* 14 | Writtin a game in Haskell             | Elise Huard

code https://github.com/elisehuard/game-talk-code

- openGL
  #+begin_src haskell
    initGL width height = do
      clearColor $= Color4 1 1 1 1
      viewport $= (Position 0 0,
                   Size (fromIntegral width)
                        (fromIntegral height))
      ortho 0 (fromIntegral width)
            0 (fromIntegral height) (-1) 1
  #+end_src

- glfw https://github.com/bsl/GLFW-b
  #+begin_src haskell
    main = do
      withWindow width height "Game-Demo" $ \win -> do
        initGL width height -- ...
  #+end_src

- main loop
  #+begin_src haskell
    initialState = State { x = 200, y = 200 }

    loop window state = do
      threadDelay 20000 -- wait
      pollEvents
      (left, right, up, down) <- getInputKeys window
      let newState = movePlayer (left,right,up,down) state
      renderFrame newState window
      if k
        then return ()
        else loop window newState
  #+end_src

- Used FRP (functional reactive programming)
  Meaning that instead of having a *state* struct
  You have "signals" over time

- using ~elerea~ as a FRP library https://github.com/cobbpg/elerea
  #+begin_src haskell
    (directionKey, directionKeySink) <-
      external (False, False, False, False)

    network <- start $ do
      state <- transfer initialState movePlayer directionKey
      return $ renderFrame win <$> state

    fix $ \loop -> do
      readKeys win directionKeySink
      join network
      threadDelay 20000
      esc <- keyIsPressed win Key'Escape
      when (not esc) loop
  #+end_src

- FRP and levels
  on a game we would want to have some data to die when level changes

- sound with OpenAL, not thread safe
  #+begin_src haskell
    playSound path = do
      withProgNameAndArgs runALUT $ \progName args -> do
        buf <- createBuffer (File path)
        source <- genObjectName
        buffer source $= Just buf
        play [source]
        err <- getalErrors
        unless (null errs) $ do
          hPutStrLn stderr (concat (intersperse "," [ d | ALError _ d <- errs ]))
        return ()
  #+end_src

- updated FRP loop definitions with audio
  #+begin_src haskell
    outputFunction levelState soundSignals = (renderFrame levelState) >> (playSounds soundSignals)
    -- from
    network <- start $ do
      state <- transfer initialState movePlayer directionKey
      return $ renderFrame <$> state
    -- to
    network <- start $ do
      state <- transfer initialState movePlayer directionKey
      return $ outputFunction <$> state <*> soundState
  #+end_src

- strict (eager) when possible

* 17 | What is a Monad?                      | Computerphile
https://www.youtube.com/watch?v=t1e8gqXLbsU
  - Maybe, >>=, do, return
  - A way to handle failure and """unwrap""" a series of Maybe operations
  - "A monad is some kind of type constructor like Maybe or ... together with 2 functions (return, >>=)"
  - Works with other "effects"
* 18 | HaskellRank                           | tsoding
  playlist: https://www.youtube.com/playlist?list=PLguYJK7ydFE4aS8fq4D6DqjF6qsysxTnx
** DONE HackerRank in Haskell
- We go from an expression that we can use on the repl to a function. By replacing ($) with (.)
- Functions: ($) (.) interact words read map sum show tail
#+begin_src haskell
  interact :: (String -> String) -> IO ()
  main = interact $ show . sum . map read . words
  main = interact $ show . sum . map read . tail . words
#+end_src
** DONE Grading Students
- (``) , guards, where, unlines
#+begin_src haskell
round5 :: Int -> Int
round5 x
    | x >= 38 && (m5 - x) < 3 = m5
    | otherwise               = x
    where m5 = x + (5 - x `mod` 5)

solve :: [Int] -> [Int]
solve xs = map round5 xs

main = interact $ unlines . map show . solve . map read . tail . words
#+end_src
** DONE Apples and Oranges
- take, drop, filter
#+begin_src haskell
let (x1:x2:xs) = [1,2,3,4,5,6,7] -- Pattern Matching
-- lambdas
map (\x -> x + 3) [0,1,2] -- => [3,4,5]
map (+ 3)         [0,1,2] -- => [3,4,5]
#+end_src
** DONE Code Warrior
- undefined :: t -- can be assigned to any type, useful to know if code just compiles
- !!
- div  :: Integral a => a -> a -> a
- even :: Integral a => a -> Bool
- odd  :: Integral a => a -> Bool
** DONE Between Two Sets

- foldl1, gcd, lcm, takeWhile
- [1 .. 4]
  [1 ..]

- Imperatively writing in Haskell

#+begin_src haskell
solve :: [Int] -> [Int] -> Int
solve = undefined

readIntList :: IO [Int]
readIntList = do line <- getLine
                 return $ map read $ words line

main = do [n, m] <- readIntList
          as     <- readIntList
          bs     <- readIntList
          putStrLn $ show $ solve as bs
#+end_src

** DONE Fold
- "Neutral element" on fold
#+begin_src haskell
import Prelude hiding (foldl) -- Hide!!!

foldl :: (a -> b -> a) -> a -> [b] -> a
foldl f base []     = base
foldl f base (x:xs) = foldl f (f base x) xs

foldl1 :: (a -> a -> a) -> [a] -> a
foldl1 f []     = error "basaodka" -- errors on an empty list !!!
foldl1 f (x:xs) = foldl f x xs
#+end_src
** DONE Playing Basketball with Kangaroo
- maximum, minimum, inits, group
#+begin_src haskell
import Data.List
inits :: [a] -> [[a]]

Î»> inits [1 .. 5]
[[],[1],[1,2],[1,2,3],[1,2,3,4],[1,2,3,4,5]]

Î»> map maximum $ tail $ inits [10,5, 20, 4 ,5,2,25,1]
[10,10,20,20,20,20,25,25]

Î»> group $ map maximum $ tail $ inits [10,5, 20, 4 ,5,2,25,1]
[[10,10],[20,20,20,20],[25,25]]
#+end_src
** DONE Purely Functional Solutions to Imperative Problems
*** 1
- zip
- List comprehension
#+begin_src haskell
[i     | i <- [1 .. 10]] -- [1,2,3,4,5,6,7,8,9,10]
[(i,j) | i <- [1 .. 10], j <- [1 .. 10]] -- cartesian product [(1,1),(1,2),(1,3)...]
[(i,j) | i <- [1 .. 10], j <- [1 .. 10], i /= 1] -- filter
---
-- Uses undefined as elements of an array, can also use ()
solve :: [Int] -> Int
solve (k:xs) =
  length [ undefined | (i, xi) <- zip [0 ..] xs,
                       (j, xj) <- zip [0 ..] xs,
                       i < j,
                       (xi + xj) `mod` k == 0]
#+end_src
*** 2
- group, sort, sortBy, on, compare, reverse, flip
- Ordening is the type that has 3 constructors: LT, EQ, GT
- You can compare numbers, or lists. But for special orders.
  compare :: Ord a => a -> a -> Ordering
  map compare [1,3,4]
- ~on~ basically adapts the first func with the second
  on :: (b -> b -> c) -> (a -> b) -> a -> a -> c
#+begin_src haskell
  -- :m + Data.List
  import Data.List     -- For sort
  import Data.Function -- For on

  sortBy (\x y -> compare (length x) (length y)) [[1,2,3,4],[2,2],[0,0,0,0,0,0,0]]
  sortBy (compare `on` length)                   [[1,2,3,4],[2,2],[0,0,0,0,0,0,0]]
  -- => [[2,2],[1,2,3,4],[0,0,0,0,0,0,0]]
  sortBy (compare `on` length) $ group $ sort [1,4,4,4,5,5,5,3]
  reverse $ sortBy (compare `on` length) $ group $ sort [1,4,4,4,5,5,5,3]
    sortBy (flip compare `on` length) $ group $ sort [1,4,4,4,5,5,5,3]
  -- => [[1],[3],[4,4,4],[5,5,5]]
#+end_src
** DONE Solving Russian Calendar Problems in Haskell
- sum, printf (alternative to ++)
- ~eta conversion~ of \x -> abs being equal to abs
#+begin_src haskell
import Text.Printf

leapDay :: Int -> String
leapDay = printf "12.09.%d"

normDay :: Int -> String
normDay = printf "13.09.%d"
#+end_src
** DONE The Usefulness of Maybe monad
- splitAt, maybe, replicateM, read
- a type called ~Maybe~ (Just, Nothing)
  a function ~maybe~ to unwrap it
- replicateM to perform a task Nth times and return in an array
  #+begin_src haskell
import Control.Monad -- for replicateM

excludeNth :: Int -> [a] -> [a]
excludeNth n xs = left ++ tail right
    where (left, right) = splitAt n xs
-- excludeNth 5 [1..10]
-- => [1,2,3,4,5,7,8,9,10]

getList :: Read a -> IO [a] -- read any type of input
getList = do
  line <- getLine
  return $ map read $ words line
-- getList :: IO [Int]
-- 1 2 3 4
-- => [1,2,3,4]

solve :: Int -> [Int] -> Int -> Maybe Int
solve k bill b
    | b > actualPrice = Just (b - actualPrice)
    | otherwise = Nothing
    where actualPrice = (sum $ excludeNth k bill) `div` 2

main :: IO ()
main = do
  [[_, k], bill, [b]] <- replicateM 3 getList
  putStrLn $ maybe "Bon appetit" show $ solve k bill b
#+end_src
** DONE Tracking Hikes with Haskell
*** Hiking
- scanl, groupBy (Data.List), filter, all
- scanl (+) 0 [1 .. 4]
  => [0,1,3,6,10,15]
- groupBy (\x y -> x /= 0 && y /= 0) [0,1,2,3,4]
  groupBy, will iterate over the list by 2 elements at the time
           when the function returns false, it separates that group
- filter (all (< 0))
*** Drawing Book
- interact $ show . resolve . map read . words
** DONE Treating Lists as Monads
- fromMaybe, sortBy, listToMaybe, liftM2
- fromMaybe - Takes a default and a maybe
  fromMaybe 5 Nothing  => 5
  fromMaybe 5 $ Just 6 => 6
- sortBy (Data.List)
- listToMaybe (Data.Maybe) -- returns Nothing or Just of the head
- liftM2 (Control.Monad)
  let keyboards = [3,1]
  let drives = [5,2,8]
  liftM2 (,) keyboards drives
- ^ generates the same than list comprehension
  AKA the ~cartesian product~
- Changing to (+) instead adds then directly
  liftM2 (+) keyboards drives
- map read . words <$> getLine -- Threat the result of getLine as a functor
** Solving Magic Square using Functional Programming
#+begin_src haskell
type Square = [[Int]]
magic :: Square
magic = [[8,1,6],
         [3,5,7],
         [4,9,2]]

rot90 :: Square -> Square
rot90 = map reverse

pp :: Square -> IO ()
pp = putStrLn . unlines . map (unwords . map show)

#+end_src
** Brute-forcing all Magic Squares
** CodeWars Strikes Again
* 19 | From Haskell to Rust?                 | Michael Snoyman

https://www.youtube.com/watch?v=HKXmEFvsi6M

- Creator of Yesod/Stack
- VP at "FP Complete"
- Moved away from GHCjs
  - Purescript/Halogen
- Rust, has recently has async/await (it was "callback hell")
- Monads reinventions??: promises (js), scala (futures)
- "GO says, we don't trust the developers. Or I don't wanna bother the programmers with stuff"
  - Like overload of operators
- TALK ABOUT MONADS????
- RESUME 20:00

* TODO 23 | How to make a Haskell Program 5x Fast | Lexi Lambda

- ~ghc-core~ is 1(one) of the intermediary represntations,
  used when compiling a haskell program.
  explicitly typed
  written in a intermediate language

- file: cabal.project.local
  #+begin_src
    package dynamical
      optimization: 1
      ghc-options:
        -ddump-to-file # dumps ~ghc-core~ to file
        -ddump-simp    # simplified output
        -dsuppress-coercion          # removes stuff showed on ghc-core
        -dsuppress-module-prefixes   # ditto
        -dsuppress-type-applications # ditto
  #+end_src

- 00:11:30

* TODO 23 | Delimited Continuations | Lexi Lambda
- native, first-class, delimited continuations
- =continuations=: is a concept NOT a language feature
  #+begin_src
  (1+2) * (3+4)
  (1+2) <------- redex
        * (3+4) <-------- continuation
  3     * (3+4)
  #+end_src
  redex: expression being reduced
  continuation: aka the evaluation context, can be empty.
                Where the redex is evaluated.
                The rest of the program.
  Some operators, explicitly exist to manipulate the continuation.
  - exit(), throws the continuation away
  - throw(exn), discards the inner continuation, while keeping the outer
    catch{body, handler}
    <- outer  <-- inner
    1 + catch{2 * throw(5), (n) -> 3 * n}
- =first-class=
  is a continuation reified as a function
- call_cc, call with current continuation
- 22:00
