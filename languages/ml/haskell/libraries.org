- https://evanrelf.com/haskell-libraries-i-love
- https://www.mmhaskell.com/production-checklist
- ascii https://hackage.haskell.org/package/ascii
  - provides a quasi-quote (compile time literal strings check)
- utils
  - safe: prelude safe variants
    - https://github.com/ndmitchell/safe#readme
    - https://hackage.haskell.org/package/safe
    - headMay headDef
  - split
    - https://github.com/byorgey/split
    - https://hackage.haskell.org/package/split
    - divvy
  - extra
    - https://github.com/ndmitchell/extra
    - https://hackage.haskell.org/package/extra
    - takeEnd dropEnd breakEnd
- network-simple for servers
  - https://hackage.haskell.org/package/network-simple
  - https://github.com/k0001/network-simple
- regex
  - regex-base: the common-api of each implementation
  - regex-tdfa https://www.williamyaoh.com/posts/2019-04-11-cheatsheet-to-regexes-in-haskell.html
  - regex-pcre
  - regex-parsec
- temporary: Portable temporary file and directory support https://hackage.haskell.org/package/temporary
- time https://www.williamyaoh.com/posts/2019-09-16-time-cheatsheet.html
- generics https://markkarpov.com/tutorial/generics
- exceptions https://markkarpov.com/tutorial/exceptions
  - safe-exceptions https://hackage.haskell.org/package/safe-exceptions
  - unliftio https://hackage.haskell.org/package/unliftio
- template haskell https://markkarpov.com/tutorial/th.html
- megaparsec https://markkarpov.com/tutorial/megaparsec

- terminfo https://github.com/tanakh/cless/blob/master/src/Main.hs
- euterpea
  - example http://donyaquick.com/interesting-music-in-four-lines-of-code/
  - quickstart https://github.com/madjestic/nu/blob/02eb3957f9ba5d0f0fbac7cd260f7142227a7008/Projects/blogs/turtlesturtlesturtles/posts/2018-11-29-a-quick-start-with-Euterpea.md
  - Interactive-Haskell with Literate-Haskell https://github.com/lfborjas/distractions/blob/a6b6bcd09270fa73233b05f3afb1800b977da9c3/haskell_school_of_music/README.md
- https://hackage.haskell.org/package/turtle-1.5.21/docs/Turtle-Tutorial.html
- conduit: is a framework for dealing with streaming data, such as reading raw bytes from a file, parsing a CSV response body from an HTTP request, or performing an action on all files in a directory tree.
- parsec: It is defined as a monad transformer that can be stacked on arbitrary monads, and it is also parametric in the input stream type.
- State of the Haskell ecosystem https://github.com/Gabriella439/post-rfc/blob/main/sotu.md https://github.com/Gabriel439/post-rfc/blob/main/sotu.md

|        <r> |    |     |                                                  |                                                |
|------------+----+-----+--------------------------------------------------+------------------------------------------------|
|       lens | 23 | 1.9 | Lenses, Folds and Traversals                     | https://github.com/ekmett/lens/                |
| singletons | 24 | 0.3 | Fake dependent types in Haskell using singletons | https://github.com/goldfirere/singletons       |
|     vector | 23 | 349 | indexed arrays                                   | https://github.com/haskell/vector              |
| containers | 23 | 0.3 | data types                                       | https://github.com/haskell/containers          |
|        mtl | 23 | 0.3 | monad transformer                                | https://github.com/haskell/mtl                 |
| accelerate | 24 | 0.9 | array processing (GPU)                           | https://github.com/AccelerateHS/accelerate/    |
|     frames | 23 | 0.3 | data frames                                      | https://github.com/acowley/Frames              |
|------------+----+-----+--------------------------------------------------+------------------------------------------------|
|   haskellR | 24 | 0.6 | R bindings                                       | https://github.com/tweag/HaskellR              |
|    cassava | 24 | 0.2 | CSV parsing                                      | https://github.com/haskell-hvr/cassava         |
|     parsec | 23 | 0.8 | Parser lib                                       | https://github.com/haskell/parsec              |
| attoparsec | 24 | 0.5 | ByteString parser                                | https://github.com/haskell/attoparsec          |
|     cereal | 22 | 0.0 | binary serialization                             | https://github.com/GaloisInc/cereal            |
|    network | 23 | 0.2 | low level network lib                            | https://github.com/haskell/network             |
|        hip | 23 | 0.1 | image processing                                 | https://github.com/lehins/hip                  |
|   amazonka | 24 | 0.6 | amazon SDK                                       | https://github.com/brendanhay/amazonka         |
|------------+----+-----+--------------------------------------------------+------------------------------------------------|
|      async | 23 | 0.3 | for concurrent programming                       | https://github.com/simonmar/async              |
| validation | 21 | 0.1 | Like Either but acc Applicative                  | https://github.com/system-f/validation         |
|  streaming | 23 | 0.1 | streaming                                        | https://github.com/haskell-streaming/streaming |
|    conduit | 22 | 0.8 | Streaming data lib                               | https://github.com/snoyberg/conduit            |
|  resourcet |  * |   * | alloc and free of scarce resources               | *                                              |
|    managed |    |     | alloc and free of scarce resources               | https://github.com/Gabriella439/managed        |
|------------+----+-----+--------------------------------------------------+------------------------------------------------|
* prelude
|----------------+-----+-----------------------------|
|            <r> |     |                             |
|            [[https://github.com/commercialhaskell/rio][rio]] | 0.8 |                             |
|         [[https://github.com/kowainik/relude][relude]] | 0.6 | focus on type-safety        |
|      [[https://github.com/protolude/protolude][protolude]] | 0.4 | light and useful            |
| [[https://github.com/snoyberg/mono-traversable/tree/master/classy-prelude#readme][classy-prelude]] | 0.1 | adds additional typeclasses |
|----------------+-----+-----------------------------|
- rio https://www.fpcomplete.com/haskell/library/rio/
- relude
  - provides MonadIO variants of many of Prelude functions.
    - Making it more convenient for users of mtl. since they won't need to liftIO it later.
    - can weaken type inference, requiring type annotations/applications
    - can introduce more complicated error messages
* random

- https://github.com/haskell/random
  https://hackage.haskell.org/package/random
  https://hackage.haskell.org/package/random-1.2.1.2/docs/System-Random.html

- heavily revised on 2020

- =RandomGen= type class, for describing pure random-number generators, in =System.Random=
- =StatefulGen= type class, for describing stateful random-number generators, in =System.Random.Stateful=
- =StdGen= type, a standard random-number generator, implements =RandomGen=

* text/cli
|-------------+----+-----+------------------------------------|
| [[https://github.com/pcapriotti/optparse-applicative][optparse]]    | 22 | 0.8 | parses CLI options                 |
| [[https://github.com/cdornan/fmt][fmt]]         | 21 | 0.0 | text formatting (text-format fast) |
| [[https://github.com/haskell/text-format][text-format]] | 23 | 0.0 | text formatting (fastest)          |
| [[https://github.com/tibbe/template][template]]    | 18 | 0.0 | text formatting                    |
| [[https://github.com/AJChapman/formatting][formatting]]  | 22 | 0.2 | text formatting                    |
| [[https://hackage.haskell.org/package/base-4.19.1.0/docs/Text-Printf.html][printf]]      |    |     | text formatting (slow)             |
|-------------+----+-----+------------------------------------|
- optparse https://github.com/pcapriotti/optparse-applicative/blob/master/README.md
- readline https://hackage.haskell.org/package/readline
* database
|-----------------+----+-----+--------------------+-------------------------------------------------|
| opaleye         | 24 | 0.6 | postgres SQL's DSL | https://github.com/tomjaguarpaw/haskell-opaleye |
| hasql           | 24 | 0.5 | postgres driver    | https://github.com/nikita-volkov/hasql          |
| postgres-simple | 23 | 0.1 | postgres driver    | https://github.com/haskellari/postgresql-simple |
| hdbc            | 22 | 0.1 | generic DBI        | https://github.com/hdbc/hdbc                    |
| esqueleto       | 24 | 0.4 | generic SQL's DSL  | https://github.com/bitemyapp/esqueleto          |
| persistent      |    |     | ??                 | https://www.yesodweb.com/book/persistent        |
|-----------------+----+-----+--------------------+-------------------------------------------------|
* graphics
- reanimate-svg
  - source https://github.com/reanimate/reanimate
  - home https://reanimate.github.io/
  - package https://hackage.haskell.org/package/reanimate-1.1.6.0/docs/Reanimate.html
  - 20 https://www.williamyaoh.com/posts/2020-05-10-reanimate-an-experience-report.html
    - source https://gitlab.com/williamyaoh/nqueens
      - https://gitlab.com/williamyaoh/nqueens/-/blob/master/src/bin/nqueens.hs
      - https://gitlab.com/williamyaoh/nqueens/-/blob/master/src/bin/anim.hs
    - The (1, 1) vector goes UP and to the RIGHT, not down and to the right.
    - rotation in degrees
    - 16x9 canvas
      - ( 0, 0)   CENTER
      - ( 8, 4.5) TR
      - (-8,-4.5) BL
  - 20 https://www.williamyaoh.com/posts/2020-05-31-reanimate-nqueens-tutorial.html
    - Time goes from 0 to 1
- opengl https://lokathor.gitbooks.io/using-haskell/content/opengl/
- opengl https://github.com/madjestic/Haskell-OpenGL-Tutorial
- gtk autogenerated https://hackage.haskell.org/package/gi-gtk
- glfw
  - https://github.com/bsl/GLFW-b
    https://ginthub.com/bsl/GLFW-b-demo
* dev tools
|--------------+----+-----+-----------------------------------+-------------------------------------------------|
| criterion    | 24 | 0.5 | benchmarking framework            | https://github.com/haskell/criterion            |
| hedgehog     | 24 | 0.7 | Property Testing                  | https://github.com/hedgehogqa/haskell-hedgehog  |
| hspec        | 24 | 0.7 | Testing framework                 | https://github.com/hspec/hspec                  |
| tasty        | 24 | 0.6 | Testing framework                 | https://github.com/UnkindPartition/tasty        |
| tasty-golden | 20 | 0.0 | "golden test" support for haskell | https://github.com/UnkindPartition/tasty-golden |
| doctest      | 23 | 0.4 | "doctest" for haskell             | https://github.com/sol/doctest                  |
|--------------+----+-----+-----------------------------------+-------------------------------------------------|
* web related
- https://www.williamyaoh.com/posts/2019-11-16-a-dead-simple-web-stack.html
- REST - A family of combinators for defining webservices APIs and serving them
  https://hackage.haskell.org/package/servant
- Spock
  - talk
    - https://www.youtube.com/watch?v=GobPiGL9jJ4
    - code+mongodb https://gist.github.com/jasonzoladz/2c266c03571485a8479d
- A fast, light-weight web server for WAI applications.
  https://hackage.haskell.org/package/warp
  https://hackage.haskell.org/package/wai
|-------------------+----+-----+-----------------------+----------------------------------------------|
|               <r> |    |     |                       |                                              |
|              feed | 23 | 0.0 | RSS parser, generator | https://github.com/haskell-party/feed        |
| base64-bytestring | 23 |  45 | base64 de/encoding    | https://github.com/haskell/base64-bytestring |
|             aeson | 24 | 1.2 | JSON parser           | https://github.com/haskell/aeson             |
|             yesod | 23 | 2.5 | Webframework          | https://github.com/yesodweb/yesod            |
|             spock | 22 | 0.6 | Webframework          | https://github.com/agrafix/Spock             |
|           servant | 24 | 1.8 | building webservers   | https://github.com/haskell-servant/servant   |
|              http | 24 | 0.3 | http client           | https://github.com/mrkkrp/req                |
|        blaze-html | 24 | 0.2 | html DSL              | https://github.com/jaspervdj/blaze-html      |
|             lucid | 24 | 0.2 | html DSL              | https://github.com/chrisdone/lucid           |
|-------------------+----+-----+-----------------------+----------------------------------------------|
** aeson

- https://www.williamyaoh.com/posts/2019-10-19-a-cheatsheet-to-json-handling.html
- https://www.fpcomplete.com/haskell/library/aeson/
- 19 https://williamyaoh.com/posts/2019-10-19-a-cheatsheet-to-json-handling.html
- 19 https://dev.to/piq9117/haskell-encoding-and-decoding-json-with-aeson-5d7n
- 18 https://github.com/neongreen/artyom.me/blob/master/posts/aeson.md
- 17 https://mmhaskell.com/blog/2017/6/5/flexible-data-with-aeson
- 15 https://web.archive.org/web/20201121162141mp_/https://artyom.me/aeson
- 15 https://www.schoolofhaskell.com/school/starting-with-haskell/libraries-and-frameworks/text-manipulation/json

* lens
- https://chrispenner.ca/posts/advent-of-optics-01
- https://chrispenner.ca/posts/advent-of-optics-02
- https://chrispenner.ca/posts/advent-of-optics-03
- https://chrispenner.ca/posts/advent-of-optics-04
- https://chrispenner.ca/posts/algebraic
- https://chrispenner.ca/posts/kaleidoscopes

* transformers / mtl

- https://en.wikibooks.org/wiki/Haskell/Monad_transformers
- https://www.williamyaoh.com/posts/2023-07-01-why-monad-transformers-matter.html

** MaybeT

#+begin_src haskell
  newtype MaybeT m a
    = MaybeT { runMaybeT :: m (Maybe a) }

  instance (Monad m) => Monad (MaybeT m) where
    return  = lift . return
    x >>= f = MaybeT $ do
      v <- runMaybeT x
      case v of
        Nothing -> return Nothing
        Just y -> runMaybeT (f y)
#+end_src

** mlt / Control.Monad.Reader

https://mmhaskell.com/monads/reader-writer

- for when you have to ~pass-through~ a variable (without touching) as a parameter through several functions, only to be used on a nested function

- to (runReader, ask)
  #+begin_src haskell
    main :: IO ()
    main = do
      env <- loadEnv
      let str = runReader func1 env -- !!!!
      print str

    func1 :: Reader Environment String
    func1 = do
      res <- func2
      return ("Result: " ++ show res)

    func2 :: Reader Environment String
    func2 = do
      env <- ask -- unwraps env !!!!!!!
      let res3 = func3 env
      return (2 + floor res3)

    func3 :: Environment -> Float
  #+end_src

** https://mmhaskell.com/monads/transformers

#+begin_src haskell
  login :: String -> String -> String -> IO ()
  readEmail :: MaybeT IO String
  readUserName :: MaybeT IO String
  readPassword :: MaybeT IO String
  readPassword = MaybeT $ do
    putStrLn "Please enter your Password!"
    str <- getLine
    if length str < 8 || null (filter isUpper str) || null (filter isLower str)
      then return Nothing
      else return $ Just str

  main :: IO ()
  main = do
    maybeCreds <- runMaybeT $ do
      usr <- readUserName
      pass <- readPassword
      email <- readEmail
      return (usr, email, pass)
    case maybeCreds of
      Nothing -> print "Couldn't login!"
      Just (u,e,p) -> login u e p
#+end_src

** https://www.williamyaoh.com/posts/2023-06-10-monad-transformers-101.html
  - MT are essentially functions that
    - take in a monad
    - and return an "augmented" monad with extra capabilities
  - When faced a type like "IO (Maybe a)"
  - Instead of having to do the work manually of
    1) creating a newtype to deal with the unwrapping/short-circuiting
       #+begin_src haskell
         newtype MaybeIO a = MaybeIO { runMaybeIO :: IO (Maybe a) }
       #+end_src
    2) writting a Functor,Applicative,Monad instance
    3) in order to get a new ~bind~ and be able to just "<-" away
       #+begin_src haskell
         validateForm :: Int -> String -> MaybeIO (Int, String)
         validateForm rawData1 rawData2 = do
           data1 <- validateData1 rawData1
           data2 <- validateData2 rawData2
           pure (data1, data2)
       #+end_src
  - We create a more generic newtype
    #+begin_src haskell
      newtype MaybeT m a
        = MaybeT { runMaybeT :: m (Maybe a) }
    #+end_src
  - transformers style
    #+begin_src haskell
      instance MonadTrans MaybeT where
        lift = MaybeT . fmap Just

      instance MonadTrans (StateT s) where
        lift m = StateT (\s -> fmap ((,) s) m)
    #+end_src
