- https://github.com/Gabriella439/post-rfc/blob/main/sotu.md
- https://lokathor.gitbooks.io/using-haskell/content/opengl/
- GHC(i) Manual
  https://downloads.haskell.org/ghc/latest/docs/users_guide/index.html
  https://downloads.haskell.org/ghc/latest/docs/users_guide/ghci.html
- https://evanrelf.com/haskell-libraries-i-love
- Styleguide
  https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md
  https://kowainik.github.io/posts/naming-conventions
- Mailing List https://mail.haskell.org/mailman/listinfo/haskell-cafe
- https://www.schoolofhaskell.com/school/advanced-haskell/beautiful-concurrency/3-software-transactional-memory
- https://github.com/prathyvsh/category-theory-resources
- https://work.njae.me.uk/2021/12/21/advent-of-code-2021-day-19/
- http://sordina.github.io/blog/2021/01/03/1609638326-advent19b.html
- Usage Examples of Haskell https://homepages.inf.ed.ac.uk/wadler/realworld/
- Memory Usage https://stackoverflow.com/questions/459725/how-to-reduce-memory-usage-in-a-haskell-app
- FPGA Clash Talks https://unsafeperform.io/talks/
- https://crypto.stanford.edu/~blynn/haskell/
- http://www.cis.syr.edu/~sueo/cis252/emacs.html
- https://hoogle.haskell.org/
- https://github.com/graninas/software-design-in-haskell
- https://en.wikipedia.org/wiki/Dependent_type
- https://en.wikipedia.org/wiki/Generalized_algebraic_data_type
- https://github.com/omelkonian/AlgoRhythm (music)
- Project
  https://github.com/reanimate/reanimate
  https://github.com/xmonad/xmonad
* Language
** imports
https://wiki.haskell.org/Import
|------------+------------------------------------------------+------------------------|
| import ALL | import Data.List                               | brings everything in   |
| import     | import Data.List (intercalate)                 | brings specific things |
| as         | import qualified Data.ByteString as ByteString |                        |
| hiding     | import Prelude hiding (foldl, foldr)           |                        |
|------------+------------------------------------------------+------------------------|
** operators
|------+---------------------------+--------------------+--------------|
| ($)  | function application      | map ($ 10) [(+ 1)] |              |
| (.)  | function composition      | printLn . show     |              |
| (++) | append lists              | [1,2] ++ [3,4]     |              |
| (<>) | append strings            | "foo" <> "bar"     |              |
| (!!) | list indexing             | [1,2] !! 0         |              |
| (:)  | list consing, preppending | 1 : [2, 3]         | [1,2,3] : [] |
|------+---------------------------+--------------------+--------------|
** types primitives
|---------+-------+--------------------------------------|
| Bool    |  True | boolean                              |
| Integer |     2 | signed integer, unbounded            |
| Int     |     2 | signed integer, 32/64 bit            |
| Word    |     2 | unsigned integer, 32/64 bit          |
| Float   |   1.2 | IEEE single-precision floating-point |
| Double  |   1.2 | IEEE double-precision floating-point |
| Char    |   'A' | an unicode code point                |
| String  | "foo" | list characters                      |
|---------+-------+--------------------------------------|
** types complex
| instancing    | possible definition        | name              | description                            |
|---------------+----------------------------+-------------------+----------------------------------------|
| [1,2]         | [Int]                      | linked list       |                                        |
| "foo"         | type A = String            | type alias        |                                        |
|---------------+----------------------------+-------------------+----------------------------------------|
| A "foo"       | newtype A = A String       | type "safe" alias | can have only 1 type                   |
|               |                            |                   | no alternatives                        |
|---------------+----------------------------+-------------------+----------------------------------------|
| C "foo"       | data A a                   | data              | can have >1 type per construct         |
|               | = C String Int             |                   |                                        |
|               | ¦ D a                      |                   | can have alternatives with ¦           |
|---------------+----------------------------+-------------------+----------------------------------------|
| C {foo = 1}   | data A = C { foo :: Int }  | data records      | automatically creates getters          |
|               |                            |                   | avoid clashes by prefixing field names |
|               |                            |                   | syntax to update a field               |
|               |                            |                   | x1 {foo = 2}                           |
|---------------+----------------------------+-------------------+----------------------------------------|
| Tuple 2 "foo" | data Tuple a b = Tuple a b | data tuple        | we are able to plug differen types     |
| (2, "foo")    |                            |                   | polymorphic definition                 |
|---------------+----------------------------+-------------------+----------------------------------------|
| Left "Hello"  | data Either a b            |                   | useful for modeling errors             |
| Right 17      | = Left a                   |                   | Right = we got what we wanted          |
|               | ¦ Right b                  |                   | Left  = we got an error                |
|---------------+----------------------------+-------------------+----------------------------------------|
#+TBLFM: $2=Left a
** extensions
https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts.html
- NOTE: some extensions are better enabled globally or prohibited altogether
  enabling some extensions on a module-by-module basis
  can end up causing maintenance burden on the application long term
  since applciations that use it ned to be careful.
- in repl: *:set -XTypeApplications* or :seti to enable it only for interactive code
- in source: using a ~language pragma~
   *{-# LANGUAGE TypeApplications, QuasiQuotes #-}*
 |                            |                                                                                               | 21  |
 |----------------------------+-----------------------------------------------------------------------------------------------+-----|
 | RecordWildCards            | RecName {..} automatically captures each field by the name, OR creates a new record           | -   |
 | NamedFieldPuns             | Rec1Name { fieldname1 = Rec2Name { fieldname2 } }                                             | -   |
 |----------------------------+-----------------------------------------------------------------------------------------------+-----|
 | BlockArguments             | use just (do) in places where you would use ($ do)                                            |     |
 | LambdaCase                 | (\case PAT1 -> RET1)                                                                          |     |
 | PatternSynonyms            |                                                                                               |     |
 | QuasiQuotes                | alternate form of string literal                                                              |     |
 | TemplateHaskell            |                                                                                               |     |
 | ViewPatterns               | (f -> PATTERN) applies "f" to value and then matches the result, on function pattern matching |     |
 |----------------------------+-----------------------------------------------------------------------------------------------+-----|
 | AllowAmbiguousTypes        |                                                                                               | -   |
 | BangPatterns               |                                                                                               | yes |
 | ConstraintKinds            |                                                                                               | yes |
 | DataKinds                  |                                                                                               | -   |
 | DefaultSignatures          |                                                                                               | -   |
 | DeriveAnyClass             |                                                                                               | -   |
 | DerivingStrategies         |                                                                                               | -   |
 | DerivingVia                |                                                                                               | -   |
 | ExistentialQuantification  |                                                                                               | yes |
 | ExplicitForAll             |                                                                                               | yes |
 | FlexibleContexts           |                                                                                               | yes |
 | FlexibleInstances          |                                                                                               | yes |
 | FunctionalDepndencies      |                                                                                               | -   |
 | GADTs                      |                                                                                               | -   |
 | GeneralizedNewtypeDeriving | to derive typeclass instance based on the underlying type                                     | yes |
 | KindSignatures             |                                                                                               | yes |
 | MultiParamTypeClasses      |                                                                                               | yes |
 | OverloadedStrings          |                                                                                               | -   |
 | PolyKinds                  |                                                                                               | yes |
 | QuantifiedConstraints      |                                                                                               | -   |
 | RankNTypes                 |                                                                                               | yes |
 | ScopedTypeVariables        | "allows type applications to refer to type variables rather that only the concrete type"      | yes |
 | TupleSections              |                                                                                               | yes |
 | TypeApplications           | (@) to specify a type argument for polymorphic functions                                      | yes |
 | TypeFamilies               |                                                                                               | -   |
 | TypeOperators              |                                                                                               | yes |
 | UndecidableInstances       |                                                                                               | -   |
 | NoStarIsType               |                                                                                               | -   |
 | PolyKinds                  |                                                                                               | yes |
 | StandadaloneDeriving       |                                                                                               | yes |
 |----------------------------+-----------------------------------------------------------------------------------------------+-----|
- "21?" column stands for GHC2021 and means,
  if the extension is enabled by default on that version of Haskell (aka GHC 9.4)
** ghc-options
- -I0
  -Iw
  +RTS -I0 -RTS
  -rtsopts to ghc-options in .cabal
- in .cabal *library\nghc-options: -fdefer-typed-holes*
- in repl *:set -fdefer-typed-holes*
- in source *{-# OPTIONS_GHC -fdefer-typed-hols #-}*
|---------------------+--------------------------------------------------|
| -Wall               | enables all warnings                             |
| -fdefer-typed-holes | allows you to type (_) in place of an expression |
| -fforce-recomp      |                                                  |
|---------------------+--------------------------------------------------|
** Standard Library
- https://packages.ubuntu.com/bionic/amd64/ghc/filelist
*** Prelude.hs functions
https://www.cse.chalmers.se/edu/year/2018/course/TDA452_Functional_Programming/tourofprelude.html#init
| fn         | returns     | description                                                      |
|------------+-------------+------------------------------------------------------------------|
| all        | Bool        |                                                                  |
| any        | Bool        |                                                                  |
| concatMap  | [a]         | map + concat                                                     |
| dropWhile  | [a]         | drops from head while fn is True                                 |
| filter     | [a]         |                                                                  |
| uncurry    | (a,b) -> c  | takes a fn that takes 2 args, and returns a fn that takes a pair |
| curry      | a -> b -> c | takes a fn that takes a pair, and returns a fn that takes 2 args |
| flip       | b -> a -> c | returns the same function with argumnts flipped                  |
| foldl      | a           | folds left                                                       |
| foldl1     | a           | folds left over NON EMPTY lists                                  |
| foldr      | a           | folds right                                                      |
| foldr1     | a           | folds right over NON EMPTY lists                                 |
| iterate    | [a]         | returns the infinity list of applying [fn x, fn (fn x),...]      |
| map        | [b]         |                                                                  |
| span       | ([a],[a])   | split list into 2 tuple, pivot when fn returns False             |
| break      | ([a],[a])   | split list into 2 tuple, pivot when fn returns True              |
| takeWhile  | [a]         | returns elems from head, while fn returns True                   |
| until      | [a]         | returns elems from head, until fn returns False                  |
| zipWith    | [c]         | applies a binary function and two list                           |
|------------+-------------+------------------------------------------------------------------|
| repeat     | [a]         | repeats an infinite list of the value provided                   |
| replicate  | [a]         | repeats N list of the value provided                             |
|------------+-------------+------------------------------------------------------------------|
| concat     | [a]         | flattens a list of lists                                         |
| head       | a           | first element on a NON EMPTY list                                |
| tail       | [a]         | aka cdr                                                          |
| last       | a           | last element on a NON EMPTY list                                 |
| init       | [a]         | aka butlast                                                      |
| sort       | [a]         | sorts in ascending order                                         |
| reverse    | [a]         | reverse a list                                                   |
| maximum    | a           | returns max element on a NON EMPTY list                          |
| minimum    | a           | returns min element on a NON EMPTY list                          |
| length     | int         |                                                                  |
| null       | Bool        | true if empty list                                               |
| and        | Bool        | applied to a list of booleans                                    |
| or         | Bool        | applied to a list of booleans                                    |
| product    | int         | aka reduce #'*                                                   |
| sum        | int         | aka reduce #'+                                                   |
|------------+-------------+------------------------------------------------------------------|
| ++         | [a]         | append 2 lists                                                   |
| zip        | [(a,b)]     | applied to 2 lists, returns a list of pairs                      |
|------------+-------------+------------------------------------------------------------------|
| elem       | Bool        | aka exists? on list                                              |
| notElem    | Bool        | aka NOT exists? on list                                          |
| !!         | a           | indexing a list                                                  |
| splitAt    | ([a],[a])   | splits at index                                                  |
| take       | a           | aka subseq 0 N                                                   |
| drop       | [a]         | aka nthcdr                                                       |
|------------+-------------+------------------------------------------------------------------|
| lines      | [String]    | split String by new line                                         |
| unlines    | String      | list of strings into string                                      |
| words      | [String]    |                                                                  |
| unwords    | String      |                                                                  |
| digitToInt | Int         | char to int                                                      |
| chr        | Char        | takes an integer                                                 |
| ord        | Int         | ascii code for char                                              |
| toLower    | Char        |                                                                  |
| toUpper    | Char        |                                                                  |
| compare    | Ordering    |                                                                  |
| error      | a           | takes a string and errors                                        |
| max        | a           | max between 2 elements                                           |
| succ       | a           | next value on an Enum, error if last                             |
| pred       | a           | previous value on an Enum, error if first                        |
|------------+-------------+------------------------------------------------------------------|
| fst        | a           | first element on a two element tuple                             |
| snd        | b           | second element on a two element tuple                            |
|------------+-------------+------------------------------------------------------------------|
| print      | IO ()       | prints showable                                                  |
| putStr     | IO ()       | prints string                                                    |
| show       | String      |                                                                  |
|------------+-------------+------------------------------------------------------------------|
| isSpace    | Bool        |                                                                  |
| isAlpha    | Bool        | if char is alphabetic                                            |
| isDigit    | Bool        | if char is a number                                              |
| isLower    | Bool        |                                                                  |
| isUpper    | Bool        |                                                                  |
|------------+-------------+------------------------------------------------------------------|
| ceiling    |             | smallest integer, not less than argument                         |
| floor      |             | greatest integer, not greater than argument                      |
| round      |             | nearest integer                                                  |
| truncate   |             | drops the fractional part                                        |
|------------+-------------+------------------------------------------------------------------|
| mod        |             |                                                                  |
| quot       |             |                                                                  |
| rem        |             |                                                                  |
|------------+-------------+------------------------------------------------------------------|
| **         | Floating    | raises, arguments must be Floating                               |
| ^          | Num         | raises, Num by Integral                                          |
| ^^         | Fractional  | raises, Fractional by Integral                                   |
|------------+-------------+------------------------------------------------------------------|
*** base
- https://hackage.haskell.org/package/base
- https://hackage.haskell.org/package/base-4.14.0.0/docs/Prelude.html#g:5
|-------------------------+---|
| Control.Applicative     |   |
| Control.Arrow           |   |
| Control.Category        |   |
| Control.Concurrent      |   |
| Control.Exception       |   |
| Control.Monad           |   |
| Data.Bifoldable         |   |
| Data.Bifoldable1        |   |
| Data.Bifunctor          |   |
| Data.Bitraversable      |   |
| Data.Bits               |   |
| Data.Bool               |   |
| Data.Char               |   |
| Data.Coerce             |   |
| Data.Complex            |   |
| Data.Data               |   |
| Data.Dynamic            |   |
| Data.Either             |   |
| Data.Eq                 |   |
| Data.Fixed              |   |
| Data.Foldable           |   |
| Data.Foldable1          |   |
| Data.Function           |   |
| Data.Functor            |   |
| Data.IORef              |   |
| Data.Int                |   |
| Data.Ix                 |   |
| Data.Kind               |   |
| Data.List               |   |
| Data.Maybe              |   |
| Data.Monoid             |   |
| Data.Ord                |   |
| Data.Proxy              |   |
| Data.Ratio              |   |
| Data.STRef              |   |
| Data.Semigroup          |   |
| Data.String             |   |
| Data.Traversable        |   |
| Data.Tuple              |   |
| Data.Typeable           |   |
| Data.Unique             |   |
| Data.Version            |   |
| Data.Void               |   |
| Data.Word               |   |
| Foreign.*               |   |
| System.CPUTime          |   |
| System.Console          |   |
| System.Environment      |   |
| System.Exit             |   |
| System.IO               |   |
| System.Info             |   |
| System.Mem              |   |
| System.Posix            |   |
| System.Timeout          |   |
| Text.ParserCombinators  |   |
| Text.(Read/Printf/Show) |   |
*** non base
|------------------+-----------------------------------+--------------------------------------------------|
| array            | Data.Array                        | https://hackage.haskell.org/package/array        |
| containers       | Data.Graph                        | https://hackage.haskell.org/package/containers   |
|                  | Data.IntMap                       | https://haskell-containers.readthedocs.io/en/latest/ |
|                  | Data.IntSet                       |                                                  |
|                  | Data.Map                          |                                                  |
|                  | Data.Sequence                     |                                                  |
|                  | Data.Set                          |                                                  |
|                  | Data.Tree                         |                                                  |
| binary           | Data.Binary                       | https://hackage.haskell.org/package/binary       |
| bytestring       | Data.ByteString                   | https://hackage.haskell.org/package/bytestring   |
| deepseq          | Control.DeepSeq                   | https://hackage.haskell.org/package/deepseq      |
| directory        | System.Directory                  | https://hackage.haskell.org/package/directory    |
| exceptions       | Control.Monad.Catch               |                                                  |
| filepath         | System.(FilePath/OsPath/OsString) | https://hackage.haskell.org/package/filepath     |
| haskeline        | System.Console                    | https://hackage.haskell.org/package/haskeline    |
| *hoopl           | Compiler.Hoopl                    | https://hackage.haskell.org/package/hoopl        |
| hpc              | Trace.Hpc                         | https://hackage.haskell.org/package/hpc          |
| integer-gmp      | GHC.Integer.GMP                   |                                                  |
| libiserv         |                                   |                                                  |
| mtl              | Control.Monad.Accum               |                                                  |
|                  | Control.Monad.Cont                |                                                  |
|                  | Control.Monad.Except              |                                                  |
|                  | Control.Monad.Identity            |                                                  |
|                  | Control.Monad.RWS                 |                                                  |
|                  | Control.Monad.Reader              |                                                  |
|                  | Control.Monad.Select              |                                                  |
|                  | Control.Monad.State               |                                                  |
|                  | Control.Monad.Trans               |                                                  |
|                  | Control.Monad.Writer              |                                                  |
| parsec           | Text.Parsec                       |                                                  |
|                  | Text.ParserCombinators.Parsec     |                                                  |
| pretty           | Text.PrettyPrint                  | https://hackage.haskell.org/package/pretty       |
| process          | System.Cmd                        | https://hackage.haskell.org/package/process      |
|                  | System.Process                    |                                                  |
| terminfo         | System.Console.Terminfo           | https://hackage.haskell.org/package/terminfo     |
| template-haskell | Language.Haskell.TH               | https://hackage.haskell.org/package/template-haskell |
| text             | Data.Text                         |                                                  |
| time             | Data.Time                         | https://hackage.haskell.org/package/time         |
| transformers     | Control.Monad.Trans               | https://hackage.haskell.org/package/transformers |
| stm              | Control.Concurrent.STM            |                                                  |
|                  | Control.Monad.STM                 |                                                  |
| unix             | System.Posix                      | https://hackage.haskell.org/package/unix         |
| xhtml            | Text.XHtml                        | https://hackage.haskell.org/package/xhtml        |
|------------------+-----------------------------------+--------------------------------------------------|
** warnings
- in command: ghc -Wincomplete-patterns Main.hs
- in repl:   :set -Wincomplete-patterns
             :set -Wno-incomplete-patterns
|---------------------+-------------------------------|
| all                 |                               |
| incomplete-patterns | on incomplete pattern matches |
|---------------------+-------------------------------|
* cabal
- cabal v2-repl exe:CABALPKGNAME -- give a ghci shell with all deps loaded
| cabal                    | description                                                   |
|--------------------------+---------------------------------------------------------------|
| build                    | fetch deps, and builds targerts                               |
| clean                    | cleans build artifacts                                        |
| configure                |                                                               |
| exec -- which EXE        | prints the path of the compiled EXE                           |
| freeze                   | generate file with packages versions and build flags          |
| gen-bounds               | generate version bounds for packages                          |
| init --interactive       |                                                               |
| init --libandexe         |                                                               |
| repl --build-depends PKG |                                                               |
| repl LIB                 | runs repl in our LIB context                                  |
| run EXE -- ARGS          |                                                               |
| sdist                    | bundle project in a tarball, which can be uploaded to hackage |
| update                   | fetch packages metadata from remote repositories              |
|--------------------------+---------------------------------------------------------------|
* stack
| stack             | description                                       |
|-------------------+---------------------------------------------------|
| build             | installs ghc, package deps and builds the project |
| clean             | cleans build artifacts                            |
| exec -- which EXE |                                                   |
| exec EXE -- ARGS  | will run the EXE with ARGS                        |
| ghci LIB          | starts repl in LIB context                        |
** dot - get a dependency DOT graph
https://stackoverflow.com/questions/69270620/generating-haskell-module-dependency-tree
https://docs.haskellstack.org/en/stable/dependency_visualization/
* Personalities
** Simon Peyton-Jones
- haskell comitee on design
** Philip Wadler
- haskell comitee on design
* Emacs Setup
  - https://github.com/haskell/haskell-ide-engine
  - https://github.com/soupi/minimal-haskell-emacs (setup)
  - https://github.com/ndmitchell/ghcid "flymake"
  - https://github.com/ndmitchell/hlint "flycheck"
  - https://github.com/chrisdone/hindent "gofmt"
* Libraries
|----------------------+----+-----+------------------------------------+----------------------------------------------------|
| parsec               | 23 | 0.7 | Parser lib                         | https://github.com/haskell/parsec                  |
| network              | 23 | 0.2 | low level network lib              | https://github.com/haskell/network                 |
| containers           | 23 | 0.3 | data types                         | https://github.com/haskell/containers              |
| vector               | 23 | 349 | indexed arrays                     | https://github.com/haskell/vector                  |
| base64-bytestring    | 23 |  45 | base64 de/encoding                 | https://github.com/haskell/base64-bytestring       |
|----------------------+----+-----+------------------------------------+----------------------------------------------------|
| validation           | 21 | 0.1 | Like Either but acc Applicative    | https://github.com/system-f/validation             |
| relude               | 23 | 0.6 | Prelude alternative                | https://github.com/kowainik/relude                 |
| rio                  | 23 | 0.8 | Prelude alternative                | https://github.com/commercialhaskell/rio           |
| optparse-applicative | 22 | 0.8 | parses CLI options                 | https://github.com/pcapriotti/optparse-applicative |
| conduit              | 22 | 0.8 | Streaming data lib                 | https://github.com/snoyberg/conduit                |
| resourcet            |  * |   * | alloc and free of scarce resources | *                                                  |
| lens                 | 23 | 1.9 | Lenses, Folds and Traversals       | https://github.com/ekmett/lens/                    |
| yesod                | 23 | 2.5 | Webframework                       | https://github.com/yesodweb/yesod                  |
|----------------------+----+-----+------------------------------------+----------------------------------------------------|
- rio https://www.fpcomplete.com/haskell/library/rio/
- terminfo https://github.com/tanakh/cless/blob/master/src/Main.hs
- euterpea
  - example http://donyaquick.com/interesting-music-in-four-lines-of-code/
  - quickstart https://github.com/madjestic/nu/blob/02eb3957f9ba5d0f0fbac7cd260f7142227a7008/Projects/blogs/turtlesturtlesturtles/posts/2018-11-29-a-quick-start-with-Euterpea.md
  - Interactive-Haskell with Literate-Haskell https://github.com/lfborjas/distractions/blob/a6b6bcd09270fa73233b05f3afb1800b977da9c3/haskell_school_of_music/README.md
- A fast, light-weight web server for WAI applications.
  https://hackage.haskell.org/package/warp
  https://hackage.haskell.org/package/wai
- REST - A family of combinators for defining webservices APIs and serving them
  https://hackage.haskell.org/package/servant
- https://hackage.haskell.org/package/turtle-1.5.21/docs/Turtle-Tutorial.html
- conduit: is a framework for dealing with streaming data, such as reading raw bytes from a file, parsing a CSV response body from an HTTP request, or performing an action on all files in a directory tree. 
- parsec: It is defined as a monad transformer that can be stacked on arbitrary monads, and it is also parametric in the input stream type.
- State of the Haskell ecosystem
  https://github.com/Gabriel439/post-rfc/blob/master/sotu.md
* Codebases
- exercises https://github.com/effectfully-ou/haskell-challenges
- https://github.com/jappeace/cut-the-crap/
  ffmpeg based, cut video silences
