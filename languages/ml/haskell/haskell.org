#+TITLE: Haskell
#+DATE: <2019-01-01 mar>

* Language

#+CMD: $ runhaskell hello-world.hs
#+begin_src haskell
  module Main (main) where
  import qualified System.IO as IO
  main :: IO ()
  main = IO.putStr "Hello, World!"
#+end_src

- https://www.simplehaskell.org/
- Haskell Fan Site https://theory.stanford.edu/~blynn/haskell/
- Mailing List https://mail.haskell.org/mailman/listinfo/haskell-cafe
- https://www.schoolofhaskell.com/school/advanced-haskell/beautiful-concurrency/3-software-transactional-memory
- https://github.com/prathyvsh/category-theory-resources
- https://work.njae.me.uk/2021/12/21/advent-of-code-2021-day-19/
- http://sordina.github.io/blog/2021/01/03/1609638326-advent19b.html
- Usage Examples of Haskell https://homepages.inf.ed.ac.uk/wadler/realworld/
- Memory Usage https://stackoverflow.com/questions/459725/how-to-reduce-memory-usage-in-a-haskell-app
- FPGA Clash Talks https://unsafeperform.io/talks/
- https://hoogle.haskell.org/
- https://github.com/graninas/software-design-in-haskell
- https://en.wikipedia.org/wiki/Dependent_type
- https://en.wikipedia.org/wiki/Generalized_algebraic_data_type

** deriving - types that can be derived
|---------+---------------------------------------|
|     <r> |                                       |
|    type | for types that...                     |
|---------+---------------------------------------|
| Bounded | with finite upper and lower *bounds*  |
|      Eq | can be compared for *equality*        |
|     Ord | have a total *ordering* (extends Eq)  |
|      Ix | support indexing into a range         |
|    Read | can be parsed from strings            |
|    Show | can be converted into strings         |
|    Enum | can be converted to and from integers |
|---------+---------------------------------------|
** pragmas
|----------+----------------------------------------------------------------------------------------------------|
| LANGUAGE | to enable language extensions                                                                      |
| MINIMAL  | to define the minimal functions that should be defined on a *class*, comma separated, supports (¦) |
|----------+----------------------------------------------------------------------------------------------------|
** module
|--------------------------------------+---------------------------------------------|
| module ModuleName where              | exports all                                 |
|--------------------------------------+---------------------------------------------|
| module ModuleName (                  | exports foo                                 |
| foo                                  |                                             |
| TypeFoo(TypeFooConst, fieldSelector) |                                             |
| ) where                              |                                             |
|--------------------------------------+---------------------------------------------|
| module ModuleName (                  | exports all constructors and fieldselectors |
| TypeFoo(..)                          | of TypeFoo                                  |
| ) where                              |                                             |
|--------------------------------------+---------------------------------------------|
| module ModFoo                        | re-exporting ModBar,                        |
| ( module Baz                         | using the local alias "Baz"                 |
| )                                    | could have used the full name instead       |
| where                                |                                             |
| import Other.ModBar as Baz           |                                             |
|--------------------------------------+---------------------------------------------|
** imports
https://wiki.haskell.org/Import
|--------------+----------------------------------------+--------------------------------------|
|              | example                                | description                          |
|--------------+----------------------------------------+--------------------------------------|
| import ALL   | import Data.List                       | brings everything in                 |
| import       | import Data.List (intercalate)         | brings ONLY specific things          |
| as           | import Data.ByteString as BS           | brings everything in AND into BS.    |
| as qualified | import qualified Data.ByteString as BS | brings into BS.                      |
| hiding       | import Prelude hiding (foldl, foldr)   | import all except ...                |
|--------------+----------------------------------------+--------------------------------------|
| type import  | import Data.Text (Text)                | to use Text type identifier directly |
| + qualified  | import qualified Data.Text as T        |                                      |
|--------------+----------------------------------------+--------------------------------------|
** operators
*** simples
|------+---------------------------+--------------------+--------------+-------------------|
| ($)  | function application      | map ($ 10) [(+ 1)] |              |                   |
| (.)  | function composition      | printLn . show     |              |                   |
| (++) | append lists              | [1,2] ++ [3,4]     |              | [a] -> [a] -> [a] |
| (<>) | append strings (mappend)  | "foo" <> "bar"     |              | m   -> m   -> m   |
| (!!) | list indexing             | [1,2] !! 0         |              |                   |
| (:)  | list consing, preppending | 1 : [2, 3]         | [1,2,3] : [] |                   |
|------+---------------------------+--------------------+--------------+-------------------|
*** typeclasses
|-----+---------------------------+---------------+--------------------------|
|     |                       <r> |               |                          |
|-----+---------------------------+---------------+--------------------------|
| <$> |                      fmap | Functor f     | (a -> b) -> f a -> f b   |
|-----+---------------------------+---------------+--------------------------|
| >>= |                      bind | Monad m       | m a -> (a -> m b) -> m b |
| >>  |                      then | Monad m       | m a ->       m b  -> m b |
|-----+---------------------------+---------------+--------------------------|
| <¦> |       Control.Alternative | Alternative f | f a -> f a -> f a        |
|-----+---------------------------+---------------+--------------------------|
| <*> |                     apply | Applicative f | f (a -> b) -> f a -> f b |
|  *> |  left "facing bird"/shark | Applicative f | f a        -> f b -> f b |
| <*  | right "facing bird"/shark | Applicative f | f a        -> f b -> f a |
|-----+---------------------------+---------------+--------------------------|
** style

- https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md
- https://kowainik.github.io/posts/naming-conventions

** types primitives
|---------+-------+--------------------------------------+------------|
|     <r> |   <r> |                                      |            |
|    type |    eg | description                          |            |
|---------+-------+--------------------------------------+------------|
|    Bool |  True | boolean, short-circuits due laziness |            |
| Integer |     2 | signed integer, unbounded            |            |
|     Int |     2 | signed integer, 32/64 bit            |            |
|    Word |     2 | unsigned integer, 32/64 bit          |            |
|   Float |   1.2 | IEEE single-precision floating-point |            |
|  Double |   1.2 | IEEE double-precision floating-point |            |
|    Char |   'A' | an unicode code point                | Data.Char  |
|  String | "foo" | list characters                      |            |
|   Ratio | 1 % 3 |                                      | Data.Ratio |
|---------+-------+--------------------------------------+------------|

- =string gaps= within a string literal, two backslashes with a whitespace between them form a *gap* in the string.
  Removed during compilation.
  #+begin_src haskell
    "Your password cannot be \
    \longer than 20 characters."
  #+end_src

** types complex
|---------------+----------------------------+-------------------+----------------------------------------|
|           <r> |                            |                   |                                        |
|    instancing | possible definition        | name              | description                            |
|---------------+----------------------------+-------------------+----------------------------------------|
|         [1,2] | [Int]                      | linked list       |                                        |
|         "foo" | type A = String            | type alias        |                                        |
|    0 :¦ [1,2] | data NonEmpty a = a :¦ [a] | non empty list    | Data.List.NonEmpty                     |
|---------------+----------------------------+-------------------+----------------------------------------|
|       A "foo" | newtype A = A String       | type "safe" alias | can have only 1 type                   |
|               |                            |                   | no alternatives                        |
|---------------+----------------------------+-------------------+----------------------------------------|
|       C "foo" | data A a                   | data              | can have >1 type per construct         |
|               | = C String Int             |                   |                                        |
|               | ¦ D a                      |                   | can have alternatives with ¦           |
|---------------+----------------------------+-------------------+----------------------------------------|
|   C {foo = 1} | data A = C { foo :: Int }  | data records      | automatically creates getters          |
|               |                            |                   | avoid clashes by prefixing field names |
|               |                            |                   | syntax to update a field               |
|               |                            |                   | x1 {foo = 2}                           |
|---------------+----------------------------+-------------------+----------------------------------------|
| Tuple 2 "foo" | data Tuple a b = Tuple a b | data tuple        | we are able to plug differen types     |
|    (2, "foo") |                            |                   | polymorphic definition                 |
|---------------+----------------------------+-------------------+----------------------------------------|
|  Left "Hello" | data Either a b            |                   | useful for modeling errors             |
|      Right 17 | = Left a                   |                   | Right = we got what we wanted          |
|               | ¦ Right b                  |                   | Left  = we got an error                |
|---------------+----------------------------+-------------------+----------------------------------------|
#+TBLFM: $2=Left a
** Standard Library
- https://packages.ubuntu.com/bionic/amd64/ghc/filelist
*** Prelude.hs functions
https://www.cse.chalmers.se/edu/year/2018/course/TDA452_Functional_Programming/tourofprelude.html#init
|------------+-------------+------------------------------------------------------------------|
|        <r> |     <c>     |                                                                  |
|         fn |   returns   | description                                                      |
|------------+-------------+------------------------------------------------------------------|
|        all |    Bool     |                                                                  |
|        any |    Bool     |                                                                  |
|  concatMap |     [a]     | map + concat                                                     |
|  dropWhile |     [a]     | drops from head while fn is True                                 |
|     filter |     [a]     |                                                                  |
|    uncurry | (a,b) -> c  | takes a fn that takes 2 args, and returns a fn that takes a pair |
|      curry | a -> b -> c | takes a fn that takes a pair, and returns a fn that takes 2 args |
|       flip | b -> a -> c | returns the same function with argumnts flipped                  |
|      foldl |      a      | folds left                                                       |
|     foldl1 |      a      | folds left over NON EMPTY lists                                  |
|      foldr |      a      | folds right                                                      |
|     foldr1 |      a      | folds right over NON EMPTY lists                                 |
|    iterate |     [a]     | returns the infinity list of applying [fn x, fn (fn x),...]      |
|        map |     [b]     |                                                                  |
|       span |  ([a],[a])  | split list into 2 tuple, pivot when fn returns False             |
|      break |  ([a],[a])  | split list into 2 tuple, pivot when fn returns True              |
|  takeWhile |     [a]     | returns elems from head, while fn returns True                   |
|      until |     [a]     | returns elems from head, until fn returns False                  |
|    zipWith |     [c]     | applies a binary function and two list                           |
|------------+-------------+------------------------------------------------------------------|
|     repeat |     [a]     | repeats an infinite list of the value provided                   |
|  replicate |     [a]     | repeats N list of the value provided                             |
|------------+-------------+------------------------------------------------------------------|
|     concat |     [a]     | flattens a list of lists                                         |
|       head |      a      | first element on a NON EMPTY list                                |
|       tail |     [a]     | aka cdr                                                          |
|       last |      a      | last element on a NON EMPTY list                                 |
|       init |     [a]     | aka butlast                                                      |
|       sort |     [a]     | sorts in ascending order                                         |
|    reverse |     [a]     | reverse a list                                                   |
|    maximum |      a      | returns max element on a NON EMPTY list                          |
|    minimum |      a      | returns min element on a NON EMPTY list                          |
|     length |     int     |                                                                  |
|       null |    Bool     | true if empty list                                               |
|        and |    Bool     | applied to a list of booleans                                    |
|         or |    Bool     | applied to a list of booleans                                    |
|    product |     int     | aka reduce #'*                                                   |
|        sum |     int     | aka reduce #'+                                                   |
|------------+-------------+------------------------------------------------------------------|
|         ++ |     [a]     | append 2 lists                                                   |
|        zip |   [(a,b)]   | applied to 2 lists, returns a list of pairs                      |
|------------+-------------+------------------------------------------------------------------|
|       elem |    Bool     | aka exists? on list                                              |
|    notElem |    Bool     | aka NOT exists? on list                                          |
|         !! |      a      | indexing a list                                                  |
|    splitAt |  ([a],[a])  | splits at index                                                  |
|       take |      a      | aka subseq 0 N                                                   |
|       drop |     [a]     | aka nthcdr                                                       |
|------------+-------------+------------------------------------------------------------------|
|      lines |  [String]   | split String by new line                                         |
|    unlines |   String    | list of strings into string                                      |
|      words |  [String]   |                                                                  |
|    unwords |   String    |                                                                  |
| digitToInt |     Int     | char to int                                                      |
|        chr |    Char     | takes an integer                                                 |
|        ord |     Int     | ascii code for char                                              |
|    toLower |    Char     |                                                                  |
|    toUpper |    Char     |                                                                  |
|    compare |  Ordering   |                                                                  |
|      error |      a      | takes a string and errors                                        |
|        max |      a      | max between 2 elements                                           |
|       succ |      a      | next value on an Enum, error if last                             |
|       pred |      a      | previous value on an Enum, error if first                        |
|------------+-------------+------------------------------------------------------------------|
|        fst |      a      | first element on a two element tuple                             |
|        snd |      b      | second element on a two element tuple                            |
|------------+-------------+------------------------------------------------------------------|
|      maybe |      b      | applied fn to Maybe value, or the default value provided         |
|------------+-------------+------------------------------------------------------------------|
|      print |    IO ()    | prints showable                                                  |
|     putStr |    IO ()    | prints string                                                    |
|       show |   String    |                                                                  |
|------------+-------------+------------------------------------------------------------------|
|    isSpace |    Bool     |                                                                  |
|    isAlpha |    Bool     | if char is alphabetic                                            |
|    isDigit |    Bool     | if char is a number                                              |
|    isLower |    Bool     |                                                                  |
|    isUpper |    Bool     |                                                                  |
|------------+-------------+------------------------------------------------------------------|
|    ceiling |             | smallest integer, not less than argument                         |
|      floor |             | greatest integer, not greater than argument                      |
|      round |             | nearest integer                                                  |
|   truncate |             | drops the fractional part                                        |
|------------+-------------+------------------------------------------------------------------|
|        mod |             |                                                                  |
|       quot |             |                                                                  |
|        rem |             |                                                                  |
|------------+-------------+------------------------------------------------------------------|
|         ** |  Floating   | raises, arguments must be Floating                               |
|          ^ |     Num     | raises, Num by Integral                                          |
|         ^^ | Fractional  | raises, Fractional by Integral                                   |
|------------+-------------+------------------------------------------------------------------|
*** base
- https://hackage.haskell.org/package/base
- https://hackage.haskell.org/package/base/docs/Prelude.html
|------------------------+-------------------------------------------------------------|
| module                 | fn                                                          |
|------------------------+-------------------------------------------------------------|
| [[https://hackage.haskell.org/package/base/docs/Control-Applicative.html][Control.Applicative]]    |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Control-Arrow.html][Control.Arrow]]          |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Control-Category.html][Control.Category]]       |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Control-Concurrent.html][Control.Concurrent]]     |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Control-Exception-Safe.html][Control.Exception.Safe]] | tryAny :: IO a -> IO (Either SomeException a)               |
| [[https://hackage.haskell.org/package/base/docs/Control-Monad.html][Control.Monad]]          | sequence  :: (Traversable t, Monad m) => t (m a) -> m (t a) |
|                        | sequence_ :: (Foldable t, Monad m) => t (m a) -> m ()       |
|                        | forever   :: Applicative f => f a  -> f b                   |
|                        | when      :: Applicative f => Bool -> f () -> f ()          |
| [[https://hackage.haskell.org/package/base/docs/Data-Bifoldable.html][Data.Bifoldable]]        |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Bifoldable1.html][Data.Bifoldable1]]       |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Bifunctor.html][Data.Bifunctor]]         |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Bitraversable.html][Data.Bitraversable]]     |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Bits.html][Data.Bits]]              |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Bool.html][Data.Bool]]              |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Char.html][Data.Char]]              | isPrint                                                     |
| [[https://hackage.haskell.org/package/base/docs/Data-Coerce.html][Data.Coerce]]            |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Complex.html][Data.Complex]]           |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Data.html][Data.Data]]              |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Dynamic.html][Data.Dynamic]]           |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Either.html][Data.Either]]            |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Eq.html][Data.Eq]]                |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Fixed.html][Data.Fixed]]             |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Foldable.html][Data.Foldable]]          |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Foldable1.html][Data.Foldable1]]         |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Function.html][Data.Function]]          |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Functor.html][Data.Functor]]           |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-IORef.html][Data.IORef]]             |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Int.html][Data.Int]]               |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Ix.html][Data.Ix]]                |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Kind.html][Data.Kind]]              |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-List.html][Data.List]]              | permutations                                                |
| [[https://hackage.haskell.org/package/base/docs/Data-Maybe.html][Data.Maybe]]             |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Monoid.html][Data.Monoid]]            |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Ord.html][Data.Ord]]               |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Proxy.html][Data.Proxy]]             |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Ratio.html][Data.Ratio]]             |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-STRef.html][Data.STRef]]             |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Semigroup.html][Data.Semigroup]]         |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-String.html][Data.String]]            |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Traversable.html][Data.Traversable]]       |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Tuple.html][Data.Tuple]]             |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Typeable.html][Data.Typeable]]          |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Unique.html][Data.Unique]]            |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Version.html][Data.Version]]           |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Void.html][Data.Void]]              |                                                             |
| [[https://hackage.haskell.org/package/base/docs/Data-Word.html][Data.Word]]              |                                                             |
| [[https://hackage.haskell.org/package/base/docs/System-CPUTime.html][System.CPUTime]]         |                                                             |
| [[https://hackage.haskell.org/package/base/docs/System-Console.html][System.Console]]         |                                                             |
| [[https://hackage.haskell.org/package/base/docs/System-Environment.html][System.Environment]]     | getArgs :: IO [String]                                      |
| [[https://hackage.haskell.org/package/base/docs/System-Exit.html][System.Exit]]            |                                                             |
| [[https://hackage.haskell.org/package/base/docs/System-Info.html][System.Info]]            |                                                             |
| [[https://hackage.haskell.org/package/base/docs/System-Mem.html][System.Mem]]             |                                                             |
| [[https://hackage.haskell.org/package/base/docs/System-Posix.html][System.Posix]]           |                                                             |
| [[https://hackage.haskell.org/package/base/docs/System-Timeout.html][System.Timeout]]         |                                                             |
| [[https://hackage.haskell.org/package/base/docs/System-IO.html][System.IO]]              | openFile :: FilePath -> IOMode -> IO Handle                 |
|                        | hClose :: Handle -> IO ()                                   |
|                        | hGetContents :: Handle -> IO String                         |
|                        | hputStrLn :: Handle -> IO ()                                |
|                        | putStrLn :: String -> IO ()                                 |
|                        | stdout :: Handle                                            |
| [[https://hackage.haskell.org/package/base/docs/Text-ParserCombinators.html][Text.ParserCombinators]] |                                                             |
| Foreign.*              |                                                             |
|------------------------+-------------------------------------------------------------|
| Text                   |                                                             |
| .pack                  | String -> Text                                              |
| .append   (slow)       | Text -> Text -> Text                                        |
|------------------------+-------------------------------------------------------------|
*** non base
https://haskell-containers.readthedocs.io/en/latest/
|------------------+-----------------------------------|
| [[https://hackage.haskell.org/package/array][array]]            | Data.Array                        |
| [[https://hackage.haskell.org/package/containers][containers]]       | Data.Graph                        |
|                  | Data.IntMap                       |
|                  | Data.IntSet                       |
|                  | Data.Map                          |
|                  | Data.Sequence                     |
|                  | Data.Set                          |
|                  | Data.Tree                         |
| [[https://hackage.haskell.org/package/binary][binary]]           | Data.Binary                       |
| [[https://hackage.haskell.org/package/bytestring][bytestring]]       | Data.ByteString                   |
| [[https://hackage.haskell.org/package/deepseq][deepseq]]          | Control.DeepSeq                   |
| [[https://hackage.haskell.org/package/directory][directory]]        | System.Directory                  |
| [[https://hackage.haskell.org/package/exceptions][exceptions]]       | Control.Monad.Catch               |
| [[https://hackage.haskell.org/package/filepath][filepath]]         | System.(FilePath/OsPath/OsString) |
| [[https://hackage.haskell.org/package/haskeline][haskeline]]        | System.Console                    |
| [[https://hackage.haskell.org/package/hoopl][hoopl]]            | Compiler.Hoopl                    |
| [[https://hackage.haskell.org/package/hpc][hpc]]              | Trace.Hpc                         |
| [[https://hackage.haskell.org/package/integer-gmp][integer-gmp]]      | GHC.Integer.GMP                   |
| [[https://hackage.haskell.org/package/libiserv][libiserv]]         |                                   |
| [[https://hackage.haskell.org/package/mtl][mtl]]              | Control.Monad.Accum               |
|                  | Control.Monad.Cont                |
|                  | Control.Monad.Except              |
|                  | Control.Monad.Identity            |
|                  | Control.Monad.RWS                 |
|                  | Control.Monad.Reader              |
|                  | Control.Monad.Select              |
|                  | Control.Monad.State               |
|                  | Control.Monad.Trans               |
|                  | Control.Monad.Writer              |
| [[https://hackage.haskell.org/package/parsec][parsec]]           | Text.Parsec                       |
|                  | Text.ParserCombinators.Parsec     |
| [[https://hackage.haskell.org/package/pretty][pretty]]           | Text.PrettyPrint                  |
| [[https://hackage.haskell.org/package/process][process]]          | System.Cmd                        |
|                  | System.Process                    |
| [[https://hackage.haskell.org/package/terminfo][terminfo]]         | System.Console.Terminfo           |
| [[https://hackage.haskell.org/package/template-haskell][template-haskell]] | Language.Haskell.TH               |
| [[https://hackage.haskell.org/package/text][text]]             | Data.Text, more efficient unicode |
|                  | Text                              |
|                  | pack                              |
| [[https://hackage.haskell.org/package/time][time]]             | Data.Time                         |
| [[https://hackage.haskell.org/package/transformers][transformers]]     | Control.Monad.Trans               |
| [[https://hackage.haskell.org/package/stm][stm]]              | Control.Concurrent.STM            |
|                  | Control.Monad.STM                 |
| [[https://hackage.haskell.org/package/unix][unix]]             | System.Posix                      |
| [[https://hackage.haskell.org/package/xhtml][xhtml]]            | Text.XHtml                        |
|------------------+-----------------------------------|
** typeclasses

*** Shipped
|-------------+--------------------+-------------------------------------------+--------------------------------------------------------|
|             | MINIMAL            | description                               | extras                                                 |
|-------------+--------------------+-------------------------------------------+--------------------------------------------------------|
| Foldable    | foldr foldMap      | data structure that can be folded         | foldr foldl null length sum product maximum minim elem |
| Show        | show               | conversion of values to readable String's |                                                        |
| Eq          | (==) (=/)          | equality and inequality                   |                                                        |
| Ord         | compare (<=)       |                                           | max min < > <= >=                                      |
| Enum        | toEnum, fromEnum   | can be enumerated by the *Int* value      | [Foo..Bar]                                             |
| Bounded     | minBound, maxBound | with minimum and maximum bounds           |                                                        |
| Functor     | fmap (<$>)         | can be mapped over                        |                                                        |
| Semigroup   | (<>)               | associative binary op                     | sconcat stimes                                         |
| Monoid      | mempty             | associative binary op with identity       | mconcat mappend (<>)                                   |
| Applicative | pure (<*>)         | a functor, sequence and combine ops       |                                                        |
| Monad       | bind (>>=)         |                                           | do                                                     |
|-------------+--------------------+-------------------------------------------+--------------------------------------------------------|
**** definitions

#+begin_src haskell
  class Monoid a where
    mempty  :: a           -- neutral element
    mappend :: a -> a -> a -- associative binary operation
    mconcat :: [a] -> a

  class Semigroup a where
    (<>) :: a -> a -> a
  class Semigroup a => Monoid a where ... -- since GHC 8.4

  class Functor f where
    fmap :: (a -> b) -> f a -> f b

  class (Functor f) => Applicative f where -- class constraint
    pure  :: a -> f a
    (<*>) :: f (a -> b) -> f a -> f b

  class Foldable t where
    foldMap :: Monoid m => (a -> m) -> t a -> m
    foldr   :: (a -> b -> b) -> b -> t a -> b
    fold    :: Monoid m => t m -> m
    foldr'  :: (a -> b -> b) -> b -> t a -> b
    foldl   :: (a -> b -> a) -> a -> t b -> a
    foldl'  :: (a -> b -> a) -> a -> t b -> a
    foldr1  :: (a -> a -> a) -> t a -> a
    foldl1  :: (a -> a -> a) -> t a -> a
#+end_src

*** Declaring

#+begin_src haskell
  class Eq a where -- name=Eq - type_variable=a -- posible class constraint goes here, after class, before =>
    (==), (/=) :: a -> a -> Bool -- they share the same signature
    {-# INLINE (/=) #-} -- GHC pragma to define inline methods?
    {-# INLINE (==) #-}
    x /= y = not (x == y) -- default implementation
    x == y = not (x /= y)
    {-# MINIMAL (==) | (/=) #-} -- minimal complete definition, either
#+end_src


* Emacs Setup

- http://www.cis.syr.edu/~sueo/cis252/emacs.html
- Emacs: lsp-mode, lsp-ui, lsp-haskell
- https://github.com/haskell/haskell-ide-engine
- https://github.com/soupi/minimal-haskell-emacs (setup)
- https://github.com/ndmitchell/ghcid "flymake"
- https://github.com/ndmitchell/hlint "flycheck"
- https://github.com/chrisdone/hindent "gofmt"

* Codebases

- https://github.com/jwiegley/git-all/blob/master/Main.hs
- shell like library https://github.com/luke-clifton/shh
- https://github.com/omelkonian/AlgoRhythm (music)
- Project
  https://github.com/reanimate/reanimate
  https://github.com/xmonad/xmonad
- exercises https://github.com/effectfully-ou/haskell-challenges
- https://github.com/jappeace/cut-the-crap/
  ffmpeg based, cut video silences
- A Haskell library that simplifies access to remote data, such as databases or web-based services.
  - source https://github.com/facebook/Haxl
  - they created ApplicativeDo extension
- 2012 game https://github.com/nikki-and-the-robots/nikki
- dead game studio https://github.com/keera-studios

* Snippets

** yes

https://theory.stanford.edu/~blynn/c2go/
#+begin_src haskell
  import Control.Monad
  import System.Environment

  main = getArgs >>= forever . putStrLn . f
    where
      f [] = "y"
      f xs = unwords xs
#+end_src
