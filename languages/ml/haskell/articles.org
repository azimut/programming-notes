- https://speakerdeck.com/ajnsit/supercharged-imperative-programming-with-haskell-and-fp
- https://entropicthoughts.com/haskell-procedural-programming
- https://learnxinyminutes.com/haskell/
- https://blog.jle.im/entry/tries-with-recursion-schemes.html
- articles https://github.com/katychuang/getting-started-with-haskell/tree/master/resources
- https://mmhaskell.com/blog/2021/10/11/why-haskell
- https://mmhaskell.com/blog/2021/10/18/using-io-without-the-io-monad
- freemonad https://gist.github.com/safareli/b43f43d3e65483b71b08b894386f4d71
- tutorial https://dr-knz.net/haskell-for-ocaml-programmers.html
- 24 https://hasufell.github.io/posts/2024-05-07-ultimate-string-guide.html
- https://medium.com/twelve-days-of-monad
- https://yannesposito.com/Scratch/en/blog/Haskell-the-Hard-Way/
- https://github.com/alpacaaa/zero-bs-haskell
- project https://wiki.haskell.org/Roll_your_own_IRC_bot
- project https://stefan.saasen.me/articles/git-clone-in-haskell-from-the-bottom-up/
- project https://crypto.stanford.edu/~blynn/haskell/brain.html
- 23 https://journal.infinitenegativeutility.com/leaving-haskell-behind
- 20 https://web.archive.org/web/20210109115443/https://blog.shitiomatic.tech/post/haskell-is-a-bad-programming-language/
- 17 https://metarabbit.wordpress.com/2017/05/02/i-tried-haskell-for-5-years-and-heres-how-it-was/
- 15 https://engineering.fb.com/2015/06/26/security/fighting-spam-with-haskell/
- 16 https://baatz.io/2016/haskell-in-a-startup/
- 18 https://www.haskellforall.com/2018/05/how-i-evaluate-haskell-packages.html
- https://github.com/bitemyapp/fp-course
- https://threadreaderapp.com/thread/1277615394560360449.html
- https://github.com/Kuratoro/haskell.zettel.page/blob/master/2012502.md
- Applied Haskell is a commercial training program focusing on teaching intermediate Haskell.
  https://www.fpcomplete.com/haskell/syllabus/
- https://github.com/i-am-tom/haskell-exercises (extensions)
- https://github.com/caiorss/Functional-Programming
- What I Wish I Knew When Learning Haskell
  http://dev.stephendiehl.com/hask/
- https://kowainik.github.io/posts/haskell-mini-patterns
- https://github.com/soupi/haskell-study-plan
- https://github.com/alpacaaa/zero-bullshit-haskell
- https://github.com/bitemyapp/learnhaskell
- https://github.com/graninas/software-design-in-haskell
* Monad Tutorials
- https://www.lambdacat.com/the-midnight-monad-a-journey-to-enlightenment/
- https://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html
- https://en.wikibooks.org/wiki/Haskell/Understanding_monads
- http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html
- https://web.archive.org/web/20081206204420/http://www.loria.fr/~kow/monads/index.html
- https://blog.plover.com/prog/burritos.html
  https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/
  https://chrisdone.com/posts/monads-are-burritos/
- https://blog.plover.com/prog/burritos.html
- https://paulspontifications.blogspot.com/2013/01/when-haskell-is-faster-than-c.html
- https://github.com/soupi/haskell-study-plan#about-this-guide
- https://kowainik.github.io/posts/haskell-mini-patterns
- https://serokell.io/blog/haskell-in-production-noredink
- https://www.cis.upenn.edu/~cis1940/fall16/lectures/05-real-world-haskell.html
* TODO 2018 | Deriving Via

- "or how to turn hand-written instances into an anti-pattern"

- enable programmers to compose instances from named programming patterns,
  turning deriving into a high-level DSL for defining instances

- in "base" we have the following definitions, which they have completely *identical /instance/ bodies*

  #+begin_src haskell
    instance Monoid a => Monoid (IO a) where -- same
      mempty = pure mempty
      mappend = liftA2 mappend

    instance Monoid a => Monoid (ST s a) where -- same
      mempty = pure mempty
      mappend = liftA2 mappend
  #+end_src
