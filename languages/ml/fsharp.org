- https://fsharp.github.io/fsharp-core-docs/reference/
- https://github.com/fsharp/fslang-design
- Makefile
  #+begin_src makefile
.PHONY: debug release run clean

debug:   ; dotnet build
release: ; dotnet build --configuration Release
run:     ; dotnet run
clean:   ; dotnet clean ; rm -rf bin/ obj/
  #+end_src
- F# Cheatsheet
  https://dungpa.github.io/fsharp-cheatsheet/
  https://github.com/dungpa/fsharp-cheatsheet
- dotnet run
  dotnet run arg1 arg2
  dotnet watch run arg1 arg2
https://blog.darklang.com/new-backend-fsharp/
https://bartoszsypytkowski.com/tag/fsharp/
https://bartoszsypytkowski.com/writing-high-performance-f-code/
https://fsharp.org/use/linux/
- Tool: Fsharp to ASM/C# https://sharplab.io/
- Book: https://zaid-ajaj.github.io/the-elmish-book/#/
- Raytracer:
  https://github.com/bmitc/the-ray-tracer-challenge-fsharp
- JS https://fable.io/
- https://h3tech.dev/post/wtfsharp-is-next/
- c# vs c++ https://news.ycombinator.com/item?id=4444904
- dotnet 6 performance https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-6/
- Editor: Ionide extension for CODE
- Fix snap syslink
  #+begin_src
  # cd /snap/bin
  # mv dotnet dotnet.bin
  # ln -s /snap/dotnet-sdk/current/dotnet .
  #+end_src
- https://dotnet.microsoft.com/en-us/learn/fsharp
- Documentation https://docs.microsoft.com/en-us/dotnet/fsharp/?WT.mc_id=dotnet-35129-website
- https://dotnet.microsoft.com/en-us/learn/languages/fsharp-hello-world-tutorial/create
  $ dotnet --list-sdks
  $ dotnet new console -lang F# -o MyFsharpApp
  $ cd MyFsharpApp/
  $ dotnet run
- Courses: https://github.com/dcook-net/FSharpLearningResources
- https://github.com/pavsaund/awesome-learning-fsharp
- https://github.com/fsprojects/awesome-fsharp
- Learning resources https://fsharpforfunandprofit.com/
* Video
- Austin 2019 https://usergroup.tv/videos/category/group/austin-f-meetup/
- Video: Stop worrying https://www.youtube.com/watch?v=XuY8Qttvqys&t=235s
- Video: F# for the Masses - with Ian Russell https://www.youtube.com/watch?v=MSM16DfU7Lo
- Video: Tutorial - F# for beginners
  https://www.youtube.com/watch?v=yGzu0iDuMNQ&list=PLdo4fOcmZ0oUFghYOp89baYFBTGxUkC7Z
- Course: Norway University - Functional Programming in F#
  https://www.youtube.com/playlist?list=PLiLMQyqbPyEMTGBoJ0Y1lG2SRv525dqq8
  Slides https://github.com/juselius/inf-3910-5
** Channel
- Microsoft Research https://www.youtube.com/user/MicrosoftResearch/videos
- Microsoft Developer https://www.youtube.com/c/MicrosoftDeveloper/videos
- Mid-2000s Throwback https://www.youtube.com/channel/UCELigndXajlVr6VoZEdOO2A/videos
- Casual F# with Kit Eason https://www.youtube.com/channel/UCcmY0UZ5XqK2g7e4gynenWQ/videos
- Community F# https://vimeo.com/channels/c4fsharp/videos https://www.youtube.com/c/C4fsharpNet/videos
- F# Online https://www.youtube.com/channel/UC1SQsRYPRV0Kw3KCowGJXzA
* Libraries
- F# -> Javascript https://github.com/fable-compiler/Fable
- ELM like abstraction https://github.com/elmish/elmish
* Video: 2021 - What's New in F# 5/6 - Don Syme
|-------------------------------------+---------------------|
| dotnet new lang -F#                 |                     |
| dotnet build                        |                     |
|-------------------------------------+---------------------|
| dotnet new -i "giraffe-template::*" | new backend         |
| dotnet giraffe                      |                     |
|-------------------------------------+---------------------|
| dotnet new -i "Fable.Template::*"   | new frontend        |
| dotnet new fable                    |                     |
| npm install                         |                     |
| npm start                           |                     |
|-------------------------------------+---------------------|
| dotnet new -i SAFE.Template         | new fullstack       |
| dotnet new SAFE                     | giraffe+fable+azure |
| dotnet tool restore                 |                     |
| dotnet run                          |                     |
|-------------------------------------+---------------------|
- String interpolation "{pi}" or "%s{foo}" to enforce type
- open type
- 27:00
* DONE Video: 2014 - Railway oriented programming: Error handling in functional languages by Scott Wlaschin
  https://vimeo.com/113707214
- 22:22
  Functions that don't fit in bind (two tracks) paradigm
  1) Single track functions:              map function
  2) Dead-end functions (return nothing): tee/tap? function
  3) Functions that throw exceptions:     try/catch, convert exceptions into failures
  4) Supervisory functions (when both tracks need to be handled)
  5) From 2 tracks back to 1 (like a string for the browser)
- 30:40
  Desigining for Errors
  - Using strings for errors is not a good idea, use Enums (or a choice type)
    1) You can have them listed in 1 place, same with the error strings on the 2to1 track functint
    2) Documentation of everything that can go wrong
    3) Conversation starters
    4) Translation easy
    5) Test code can compare with errors codes, not strings
    6) Typesafe
- 37:40
  Parallel Tracks
  For example, if you want all validation errors listed at once. The validations needs to be parallel.
  Monoids (map and reduce the 2 tracks)
  https://fsharpforfunandprofit.com/posts/monoids-without-tears/
- 39:15
  Domain Events
  Pass around more information of the action done, add domain events to the choices
* Course: 2016 - System Crafters - Introduction to Functional Programming with F#
** 1
- CODE, ionide plugin
- let mutable a = 10
  a <- 20
- Ranges: [1..3]
- << and >> for function composition
- Seq. are lazy
  - Seq.iter does the job
** 2 Data Model
- Records have structural equality
- Recursive types use the *and* keyword
- Unions/enums can have a value and a description
  #+begin_src ocaml
  type Details =
    { Name: string
      Description: string }
  type Item =
    { Details: Details }
  type Exit =
    | PassableExit of Details * destination: Room
    | LockedExit of Details * key: Item * next: Exit
    | NoExit of Details option
  and Exits =
    { North: Exit
      South: Exit
      East: Exit
      West: Exit }
  and Room =
    { Details: Details
      Items: Item list
      Exits: Exits }
  #+end_src

** 3 Game Logic
   code https://gist.github.com/daviwil/3419811b3bfed172b7888efe2a0e1436
- https://fsharpforfunandprofit.com/posts/recipe-part2/
- 2014 - Railway oriented programming: Error handling in functional languages by Scott Wlaschin
  https://vimeo.com/113707214
- "Railway Oriented Programming", aka monad transformation (using a result type and bind)
#+begin_src ocaml
let bind processFunc lastResult =
  match lastResult with
  | Success s -> proccessFunc s
  | Failure f -> Faulure f

let (>>=) x f = bind f x

let switch processFunc input =
  Success (processFunc input)
#+end_src
** 4 Actor Model
   code https://github.com/thedevaspect/aspect-fsharp/blob/60f18ddd0b1a82cba498e62880a8eccb01dbe86f/Game.fs
- MailboxProcessor, simple implementation of the Actor Model
- Computation Expression: async
- try/with for exception handling
- :? type comparison operator
- let rand = System.Random()
  rand.Next 4
- New lines can separate items in a list definition
* Book: 2008
** TODO 16 Developing Reactive Functional Programs
- Principle is sometimes called ~inversion of control~ (aka The Hollywood Principle, don't call us we call you)
- The most straighforward way is with an ~event handler~, which need a *local state*
- Using events/callbacks isn't very declarative. It's imperative.
- Event.(filter map listen scan merge)
- Example: buttons and counter
  #+begin_src fsharp
  let always x = (fun _ -> x)
  let incEvt = (btnUp.Click |> Event.map (always  1))
  let decEvt = (btnDw.Click |> Event.map (always -1))
  Event.merge invEvt decEvt
  |> Event.scan (+) 0
  |> Event.listen (fun sum ->
     lbl.Txt <- sprintf "Count: %d" sum)
  #+end_src
