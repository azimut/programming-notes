#+TITLE: OCaml's reference
#+DATE: <2020-11-24 mar>

|-------------+------------------------------------------------------------------|
| wiki        | https://en.wikipedia.org/wiki/OCaml                              |
| manual      | https://ocaml.org/manual/index.html                              |
| manual (04) | https://caml.inria.fr/pub/old_caml_site/ocaml/htmlman/index.html |
|-------------+------------------------------------------------------------------|

- 1996-
- Authors:
  - Xavier Leroy, Jerome Voiullon, Damien Doligez, Didier Remy, Ascander Suarez

* Language

- there are mutable values, but NOT mutable variables
- .ml  = Data Structure
- .mli = Data Abstraction
- let () =, takes the role of the main function
- The =let= definition is not an expression in itself
- The =let in= is an expression

** Types

- best read from right to left
  #+begin_src ocaml
    int list list (* "a list of list of integers" *)
  #+end_src

*** record

#+begin_src
  type [typeparam] <record-name> =
    { <field> : <type-or-typeparam>;
      <field> : <type>;
      ...
    }
#+end_src

*** variant (sum type)

#+begin_src
type <variant> =
  | <TagOrConstructor> [of <type> [* <type>]...]
  | <TagOrConstructor> [of <type> [* <type>]...]
  | ...
#+end_src

- We can also *use the type* name when matching for variant types, in this case "color" is the type name
  #+begin_src ocaml
    let extended_color_to_int : extended_color -> int = function
      | `RGBA (r,g,b,a) -> 256 + a + (b * 6) + (g * 36) + (r * 216)
      | #color as color -> color_to_int color
  #+end_src

*** simple
- Int
- Float
- String
*** complex
- List []
  - single linked list
|------------+------------------------+---------+-----------+-------------------------------+--------+-----------------|
| Type       | Init                   | Access  | Modifying | Pattern Matching              | Adding | Appending       |
|------------+------------------------+---------+-----------+-------------------------------+--------+-----------------|
| ~Unit~     | ()                     |         |           |                               |        |                 |
| ~Bool~     | x = true,false         |         |           |                               | && ¦¦  |                 |
| ~Option~   | Some a, None           |         |           |                               |        |                 |
| ~String~   | "abcd"                 | .[2]    | <-        |                               |        | ^ String.concat |
| mutable    |                        |         | <-        |                               |        |                 |
| refs       | ref <expr>             | !x      | :=        |                               |        |                 |
|------------+------------------------+---------+-----------+-------------------------------+--------+-----------------|
| ~Array~    | [¦ a ; b ¦]            | .(2)    | <-        | let [¦ a ; b ¦] = some_array  |        |                 |
| ~Bigarray~ |                        | .{2}    | <-        |                               |        |                 |
| tuples     | (a , b)                | fst snd |           | let (x , y)  =                |        |                 |
| ~List~     | [a ; a]                | List.hd |           | let (x :: y) =                | ::     | @ List.append   |
| struct     | struct let foo = 3 end |         |           |                               |        |                 |
|------------+------------------------+---------+-----------+-------------------------------+--------+-----------------|
| record     | {a = VAL ; b = VAL}    | .a      |           | let { x = xpos ; y = ypos } = |        |                 |
|            | a=VAL; B=VAL; {a ; b}  |         |           | let { x ; y } =               |        |                 |
|            | type foo = { a: int }  |         |           | let v1 = v1.x + v2.y          |        |                 |
|------------+------------------------+---------+-----------+-------------------------------+--------+-----------------|
** Modules

- can be ~open~ locally

- new struct
  #+begin_src ocaml
    module M = struct
        let x = 3
    end
  #+end_src

- new type
  #+begin_src ocaml
    module type MT = sig
      type t
      val is_empty : t -> bool
    end
  #+end_src

- new type+struct
  #+begin_src ocaml
    module M : sig
      type t
    end = struct
      type t = string
    end
  #+end_src

|----------------------------+--------------------------------|
|                            | module newM : MT = M           |
|----------------------------+--------------------------------|
| new functor                | module fM (M:MT) : MT = struct |
|                            | ..let x = M.x + 1              |
|                            | ..let f i = M.g i              |
|                            | end                            |
|----------------------------+--------------------------------|
| instance/use functor       | module newM = functorM(M)      |
|----------------------------+--------------------------------|
| instance functor           | module newM =                  |
| +                          | ..functorM(struct              |
| anonymous module           | ..type t = int                 |
|                            | ..let compare = Int.compare    |
|                            | end)                           |
|----------------------------+--------------------------------|
| include                    | module newM = struct           |
|                            | ..include M                    |
|                            | ..let f x = x                  |
|                            | end                            |
|----------------------------+--------------------------------|
| include with type          | module newM = sig              |
| (multiple)                 | ..type t                       |
|                            | ..include M1 with type t := t  |
|                            | ..include M2 with type t := t  |
|                            | end                            |
|----------------------------+--------------------------------|
| new module with type       | module type MT =               |
| "sharing constraint"       | ..MT with type T1 = T2         |
|----------------------------+--------------------------------|
| new functor with type      | module fM(M:MT1)               |
| "sharing constraint"       | ..: (MT2 with type T1 = M.t)   |
|                            | = struct                       |
|                            | ..type T1 = M.t                |
|                            | end                            |
|----------------------------+--------------------------------|
| new module with type :=    | module type MT =               |
| "destructive substitution" | ..MT with type T1 := T2        |
|----------------------------+--------------------------------|
| new functor with type :=   | module fM(M:MT1)               |
| "destructive substitution" | ..: MT2 with type T1 := T2 =   |
|                            | struct                         |
|                            | end                            |
|----------------------------+--------------------------------|
  #+TBLFM: $2=struct
** Style
- guide https://www.cs.cornell.edu/courses/cs3110/2016fa/handouts/style.html
- Modules
- variables, functions, recordtypes
** Functions

- lambda
  #+begin_src ocaml
  let plusone = (fun x -> x + 1) ;;
  let plusone x = x + 1 ;;
  #+end_src

- rec + function + as + when (guard)
  #+begin_src ocaml
  let rec destutter list = function
    | [] | [_] as l -> l
    | hd :: (hd' :: _ as tl) when hd = hd' -> destutter tl
    | hd :: tl -> hd :: destutter tl
  #+end_src

- Function parameters are patterns too
  #+begin_src ocaml
  type point = float * float

  let distance ((x1,y1):point) ((x2,y2):point) : float =
    let square x = x *. x in
    sqrt (square (x -. x1) +. square (y2 -. y1))
  #+end_src

- _exn denotes functions that return an exception
- =assert false= can be used on a branch that isn't suppose to happen
- optional type annotation
- type variables support for parametric polymorphism
- implicit =match= of an invisible last argument when using =function=
- lexically scoped (with let)

- optional arguments
  - begin with ?
    - ?sep ?(sep="")
    - ~sep:":"
  - passed as =Option=
  - useful when is a wrapper to another function that takes an optional

- labeled arguments (ME: aka keyword args)
  - at any position of arguments
  - defining: ~num
  - passing arguments
    - ~num:3
    - ~num   - with label punning if a variable with the same name exists
    - ~f:String:Length
  - when is unclear just from the type signature
    - booleans
    - more than one value of the same type

** Operators
- Declaring an infix operator
  #+begin_src ocaml
    let ( <^> ) x y = max x y
        in 1 <^> 2
  #+end_src
- default polymorphic operators considered problematic
- String.concat vs ^
  - .concat allocates 1 string
  - ^ allocates a new string every time it runs
- ( * ) is preferred over (*) for writting operators as functions
|-----+---------------------------------------------------|
| ^   | concatenate strings                               |
| @@  | application (like $ in Haskell)                   |
| ¦>  | pipeline, left assoc (aka rev application)        |
| ^>  | pipeline, right assoc                             |
| ==  | physical equality                                 |
| !=  | physical inequality                               |
| =   | structural equality (aka contents), or assignment |
| <>  | structural inequality                             |
| >>= | Option.bind                                       |
| >>¦ | Option.map                                        |
| ;   | to sequence imperative code                       |
| []  | "list"                                            |
| ::  | "cons"                                            |
|-----+---------------------------------------------------|
** Standard Library
- https://v2.ocaml.org/manual/stdlib.html
|----------------+------------------------------------------------------------|
| =Module=       | =Description=                                              |
|----------------+------------------------------------------------------------|
| [[https://v2.ocaml.org/api/Arg.html][Arg]]            | parsing of command line arguments                          |
| [[https://v2.ocaml.org/api/Array.html][Array]]          | array operations                                           |
| [[https://v2.ocaml.org/api/ArrayLabels.html][ArrayLabels]]    | array operations (with labels)                             |
| [[https://v2.ocaml.org/api/Atomic.html][Atomic]]         | atomic references                                          |
| [[https://v2.ocaml.org/api/Bigarray.html][Bigarray]]       | large, multi-dimensional, numerical arrays                 |
| [[https://v2.ocaml.org/api/Bool.html][Bool]]           | boolean values                                             |
| [[https://v2.ocaml.org/api/Buffer.html][Buffer]]         | extensible buffers                                         |
| [[https://v2.ocaml.org/api/Bytes.html][Bytes]]          | byte sequences                                             |
| [[https://v2.ocaml.org/api/BytesLabels.html][BytesLabels]]    | byte sequences (with labels)                               |
| [[https://v2.ocaml.org/api/Callback.html][Callback]]       | registering OCaml values with the C runtime                |
| [[https://v2.ocaml.org/api/Char.html][Char]]           | character operations                                       |
| [[https://v2.ocaml.org/api/Complex.html][Complex]]        | complex numbers                                            |
| [[https://v2.ocaml.org/api/Condition.html][Condition]]      | condition variables to synchronize between threads         |
| [[https://v2.ocaml.org/api/Domain.html][Domain]]         | Domain spawn/join and domain local variables               |
| [[https://v2.ocaml.org/api/Digest.html][Digest]]         | MD5 message digest                                         |
| [[https://v2.ocaml.org/api/Effect.html][Effect]]         | deep and shallow effect handlers                           |
| [[https://v2.ocaml.org/api/Either.html][Either]]         | either values                                              |
| [[https://v2.ocaml.org/api/Ephemeron.html][Ephemeron]]      | Ephemerons and weak hash table                             |
| [[https://v2.ocaml.org/api/Filename.html][Filename]]       | operations on file names                                   |
| [[https://v2.ocaml.org/api/Float.html][Float]]          | floating-point numbers                                     |
| [[https://v2.ocaml.org/api/Format.html][Format]]         | pretty printing                                            |
| [[https://v2.ocaml.org/api/Fun.html][Fun]]            | function values                                            |
| [[https://v2.ocaml.org/api/Gc.html][Gc]]             | memory management control and statistics; finalized values |
| [[https://v2.ocaml.org/api/Hashtbl.html][Hashtbl]]        | hash tables and hash functions                             |
| [[https://v2.ocaml.org/api/In_channel.html][In_channel]]     | input channels                                             |
| [[https://v2.ocaml.org/api/Int.html][Int]]            | integers                                                   |
| [[https://v2.ocaml.org/api/Int32.html][Int32]]          | 32-bit integers                                            |
| [[https://v2.ocaml.org/api/Int64.html][Int64]]          | 64-bit integers                                            |
| [[https://v2.ocaml.org/api/Lazy.html][Lazy]]           | deferred computations                                      |
| [[https://v2.ocaml.org/api/Lexing.html][Lexing]]         | the run-time library for lexers generated by ocamllex      |
| [[https://v2.ocaml.org/api/List.html][List]]           | list operations                                            |
| [[https://v2.ocaml.org/api/ListLabels.html][ListLabels]]     | list operations (with labels)                              |
| [[https://v2.ocaml.org/api/Map.html][Map]]            | association tables over ordered types                      |
| [[https://v2.ocaml.org/api/Marshal.html][Marshal]]        | marshaling of data structures                              |
| [[https://v2.ocaml.org/api/MoreLabels.html][MoreLabels]]     | include modules Hashtbl, Map and Set with labels           |
| [[https://v2.ocaml.org/api/Mutex.html][Mutex]]          | locks for mutual exclusion                                 |
| [[https://v2.ocaml.org/api/Nativeint.html][Nativeint]]      | processor-native integers                                  |
| [[https://v2.ocaml.org/api/Oo.html][Oo]]             | object-oriented extension                                  |
| [[https://v2.ocaml.org/api/Option.html][Option]]         | option values                                              |
| [[https://v2.ocaml.org/api/Out_channel.html][Out_channel]]    | output channels                                            |
| [[https://v2.ocaml.org/api/Parsing.html][Parsing]]        | the run-time library for parsers generated by ocamlyacc    |
| [[https://v2.ocaml.org/api/Printexc.html][Printexc]]       | facilities for printing exceptions                         |
| [[https://v2.ocaml.org/api/Printf.html][Printf]]         | formatting printing functions                              |
| [[https://v2.ocaml.org/api/Queue.html][Queue]]          | first-in first-out queues                                  |
| [[https://v2.ocaml.org/api/Random.html][Random]]         | pseudo-random number generator (PRNG)                      |
| [[https://v2.ocaml.org/api/Result.html][Result]]         | result values                                              |
| [[https://v2.ocaml.org/api/Runtime_events.html][Runtime_events]] | Runtime event tracing                                      |
| [[https://v2.ocaml.org/api/Scanf.html][Scanf]]          | formatted input functions                                  |
| [[https://v2.ocaml.org/api/Seq.html][Seq]]            | functional iterators                                       |
| [[https://v2.ocaml.org/api/Set.html][Set]]            | sets over ordered types                                    |
| [[https://v2.ocaml.org/api/Semaphore.html][Semaphore]]      | semaphores, another thread synchronization mechanism       |
| [[https://v2.ocaml.org/api/Stack.html][Stack]]          | last-in first-out stacks                                   |
| [[https://v2.ocaml.org/api/StdLabels.html][StdLabels]]      | include modules Array, List and String with labels         |
| [[https://v2.ocaml.org/api/String.html][String]]         | string operations                                          |
| [[https://v2.ocaml.org/api/StringLabels.html][StringLabels]]   | string operations (with labels)                            |
| [[https://v2.ocaml.org/api/Sys.html][Sys]]            | system interface                                           |
| [[https://v2.ocaml.org/api/Uchar.html][Uchar]]          | Unicode characters                                         |
| [[https://v2.ocaml.org/api/Unit.html][Unit]]           | unit values                                                |
| [[https://v2.ocaml.org/api/Weak.html][Weak]]           | arrays of weak pointers                                    |
|----------------+------------------------------------------------------------|
** Changelog
- https://github.com/ocaml-multicore/awesome-multicore-ocaml
  https://v2.ocaml.org/releases/5.0/manual/parallelism.html
  https://v2.ocaml.org/releases/5.0/manual/effects.html
* Codebases
- https://soap.coffee/~lthms/news/CFTSpatialShell.html
