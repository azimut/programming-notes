- https://github.com/ocaml-multicore/awesome-multicore-ocaml
  https://v2.ocaml.org/releases/5.0/manual/parallelism.html
  https://v2.ocaml.org/releases/5.0/manual/effects.html
- editor https://tarides.com/blog/2022-12-21-advanced-merlin-features-destruct-and-construct
- profiling https://github.com/ocaml-bench/notes/blob/master/profiling_notes.md
- optimizing http://ocamlverse.net/content/optimizing_performance.html
- https://dune.readthedocs.io/en/stable/quick-start.html#building-a-hello-world-program-in-bytecode
  Bytecode compilation is compatible with *ocamldebug*
  > dune build hello_world.bc
  > cat dune
  #+begin_src elisp
    (executable
     (name hello_world)
     (modes byte exe))
  #+end_src
  "dune will add -g flag for you by default"
- https://batsov.com/articles/2022/08/29/ocaml-at-first-glance/
  https://lobste.rs/s/dwt32y/ocaml_at_first_glance
- https://www.cl.cam.ac.uk/teaching/1617/L28/materials.html
- Promises https://cs3110.github.io/textbook/chapters/ds/promises.html?highlight=async
- https://smlfamily.github.io/
- Style guide https://www.cs.cornell.edu/courses/cs3110/2016fa/handouts/style.html
- Github Action: build docs
  https://github.com/smimram/monadic-synth/blob/master/.github/workflows/build.yml
- Manual https://ocaml.org/manual/index.html
- Manual https://caml.inria.fr/pub/old_caml_site/ocaml/htmlman/index.html
- Tutorial:
  https://o1-labs.github.io/ocamlbyexample/
  https://github.com/o1-labs/ocamlbyexample
- Tutorial: https://ocaml.org/learn/tutorials/up_and_running.html
- Tutorial: https://web.archive.org/web/20091214115026/http://www.ocaml-tutorial.org/streams
- Tutorial: http://xahlee.info/ocaml/ocaml_basics.html
- Tutorial: https://lambdafoo.com/posts/2021-10-29-getting-started-with-ocaml.html
- Tutorial: Cheatsheet https://github.com/OCamlPro/ocaml-cheat-sheets
- Tutorial: 2006 - OCaml for the Skeptical https://www2.lib.uchicago.edu/keith/ocaml-class/class-01.html
- Tutorial: 2016 https://github.com/caiorss/Functional-Programming/tree/master/ocaml
- Tutorial: 2019 https://github.com/alhassy/OCamlCheatSheet
- Tutorial: 2019 https://github.com/lindig/ocaml-style
- https://github.com/imandra-ai/ocaml-tracy
* ocamldebug
- https://www.youtube.com/watch?v=DGvJk14sfi8
  - let _ = print_string;
  - #trace
  - restrict type for polymorphic functions
    - type annotations
  - ocamlc -g file.ml
    ocamldebug a.out
  - (odb) break @filename/module? LINE
    (odb) r
- https://ocaml.org/docs/debugging
  Using the debugger under Emacs
  > ocamlc -g uncaught.ml
  > ocamldebug a.out
  (ocd) (r)un
  (ocd) b
  (ocd) bt
  (ocd) info breakpoints
  (ocd) help break
  (ocd) (g)oto 0
  (ocd) (r)un
  (ocd) (p)rint VARIABLE
** Emacs
- https://v2.ocaml.org/releases/4.14/htmlman/debugger.html#s:inf-debugger
- Under Emacs you call the debugger using =ESC-x ocamldebug a.out=
- Then Emacs will send you directly to the file and character reported by the debugger,
  and you can step back and forth using =ESC-b= and =ESC-s=,
  you can set up break points using =CTRL-X space=, and so on...
** (ocd) help
(ocd) help
List of commands:
| address         | last           |
| backstep        | list           |
| backtrace       | load_printer   |
| break           | next           |
| bt              | pid            |
| cd              | previous       |
| complete        | print          |
| delete          | pwd            |
| directory       | quit           |
| display         | remove_printer |
| down            | reverse        |
| environment     | run            |
| finish          | set            |
| frame           | shell          |
| goto            | show           |
| help            | source         |
| info            | start          |
| install_printer | step           |
| kill            | up             |
* utop
- larger default prints
  https://www.reddit.com/r/ocaml/comments/72nlch/utop_disable_truncation/
  #print_lengh N;;
  #print_depth N;,
* Makefile
#+begin_src makefile
.PHONY: dev release deps test clean run install

dev:     ; opam exec -- dune build
release: ; opam exec -- dune build --profile release --build-dir _build_release

deps:  ; opam install . --deps-only --with-test
test:  ; opam exec -- dune runtest
clean: ; opam exec -- dune clean ; rm -rf _build_release _build
run:   ; opam exec -- dune exec ./src/main.exe

install: release
	install _build_release/default/src/main.exe $(HOME)/.newsboat/feeds/sql2rss
#+end_src
* Editor
- https://github.com/ocaml-ppx/ocamlformat/blob/main/doc/editor_setup.mld
- https://github.com/Gopiandcode/gopcaml-mode
  https://www.youtube.com/watch?v=vy6oGSk7A3s
  - needs emacs packages: merlin, ocp-indent, and tuareg
* Libraries
|---------------------------+-----+------------------------------------------------------------------|
| scientific library        | 1.1 | https://github.com/owlbarn/owl                                   |
| parser combinator         | 0.5 | https://github.com/inhabitedtype/angstrom                        |
| ppx json parser generator | 0.1 | https://github.com/ocaml-ppx/ppx_deriving_yojson                 |
| ppx generate cmdline      | 0.1 | https://github.com/hammerlab/ppx_deriving_cmdliner               |
| unicode support           | 0.1 | https://github.com/yoriyuki/Camomile                             |
|---------------------------+-----+------------------------------------------------------------------|
| async execution           | 0.1 | https://github.com/janestreet/async                              |
| multi-core                | 0.3 | https://github.com/ocaml-multicore/eio                           |
| promises/concurrent       | 0.6 | https://github.com/ocsigen/lwt                                   |
| multicore examples        | 0.1 | https://github.com/ocaml-multicore/awesome-multicore-ocaml       |
|---------------------------+-----+------------------------------------------------------------------|
| test                      | 0.3 | https://github.com/mirage/alcotest                               |
| test code coverage        | 0.2 | https://github.com/aantron/bisect_ppx                            |
| documentation             | 0.2 | https://github.com/ocaml/odoc                                    |
|---------------------------+-----+------------------------------------------------------------------|
| http client               | 0.1 | https://github.com/anmonteiro/piaf                               |
| http client (libcurl)     | 0.1 | https://github.com/ygrek/ocurl                                   |
| http client (lwt/async)   | 0.6 | https://github.com/mirage/ocaml-cohttp                           |
|---------------------------+-----+------------------------------------------------------------------|
| http server               |     | https://github.com/inhabitedtype/ocaml-webmachine                |
| http server               |     | https://github.com/mirage/ocaml-cohttp                           |
| http server               |     | https://github.com/dinosaure/multipart_form                      |
|---------------------------+-----+------------------------------------------------------------------|
| web framework             | 1.0 | https://github.com/aantron/dream                                 |
|                           |     | https://aantron.github.io/dream/                                 |
|---------------------------+-----+------------------------------------------------------------------|
| utils                     | 0.4 | https://github.com/ocaml-batteries-team/batteries-included       |
|                           |     | https://ocaml-batteries-team.github.io/batteries-included/hdoc2/ |
| utils                     | 0.4 | https://github.com/c-cube/ocaml-containers                       |
| utils                     | 0.6 | https://github.com/janestreet/base                               |
| utils                     | 0.9 | https://github.com/janestreet/core                               |
|---------------------------+-----+------------------------------------------------------------------|
- https://github.com/ocaml-community/awesome-ocaml
- Project: LWT/Telegram bot https://github.com/quernd/SushiBot
- Project: Synth https://github.com/smimram/monadic-synth
- https://janmidtgaard.dk/quickcheck/index.html
- RPI https://github.com/dinosaure/gilbraltar
