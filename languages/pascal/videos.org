- 2010 | Making a game in Free Pascal https://www.youtube.com/watch?v=hPmJB0mS-GA
* TODO 2020 | AOC2020 â€” Day 15         | Tsoding
57:00
https://www.youtube.com/watch?v=ech9Re2bi_E
- Paramstr
  Paramcount
  #+begin_src opascal
    for i := 1 to ParamCount -1 do // skip the program name in 0
    begin
       WriteLn(ParamStr(i));
    end;
  #+end_src
- You can initialize arrays on declaration
  #+begin_src opascal
    var
       sample1 : array of Integer = (0,6,3)
  #+end_src
- <2018 You cannot initialize dynamic arrays
  https://lists.freepascal.org/pipermail/fpc-pascal/2018-May/053892.html
- You can use ~Exit()~ to return from a function with a value
* 2022 | Coding in Pascal in 2022 | Tsoding
https://www.youtube.com/watch?v=8UJNQt8DAWE
source https://github.com/tsoding/mine
- Project: programming a tic-tac-toe
- ME: to ocaml
  - begin/end
  - <>
  - ;
  - for/to/to
  - := (waller separator?)
  - = (for equality and not for assignment)
- Uses FreePascal
- tsoding uses OPascal, not the buildin pascal
  - aka "classical pascal"
- Pascal is case insensitive
- Is a *one-pass* compiler (aka function declarations need to be in order)
- Some other pascals can declare variables on the for loop using "var"
  Some other pascals have a variable called *Result* to return from a function.
- ~program~ directive uses a name from the program namespace for linking purposes
- on functions with no arguments, sometimes parentheses DO matter
- on functions you can assign the result AND then read it back
- You CANNOT define a *variable* with the same name AND type
  BUT you CAN define an *argument* with it
- An empty statement can be provided either by a "begin/end" pair or just a ~;~
  - Useful for ~while~ loops with side-effects
    while <EXPRESSION> do;
- Random(N)
  Randomize - changes the seed
- everything you put after "end." is ignored
- ME: since parameters can be modified using *var*, is impossible to know from the caller POV
- bit operators are overloaded with and/or/not
** ~type~ for a row based array matrix
#+begin_src opascal
  type
     Cell = (Empty, Bomb); { this says that is either of these }
     Field = record
        Cells: array of Cell;
        Rows: Integer;
        Cols: Integer;
     end;
  #+end_src
** ~function~ return a value
#+begin_src opascal
  function FieldRandomCell(Field: Field; var Row, Col: Integer): Cell;
  begin
     Row := Random(Field.Rows);
     Col := Random(Field.Cols);
     FieldRandomCell := FieldGet(Field, Row, Col);
  end;

  function FieldGet(Field: Field; Row, Col: Integer): Cell;
  begin
     FieldGet := Field.Cells[Row*Field.Cols + Col];
  end;

  function FieldCheckedGet(Field: Field, Row, Col: Integer, var Cell: Cell): Boolean;
  begin
     FieldCheckedGet := (0 <= Row) and (Row < Field.Rows) and (0 <= Col) and (Col < Field.Cols);
     if FieldCheckedGet then FieldGet(Field, Row, Col);
  end;

  function FieldCountNbors(Field: Field, Row, Col: Integer): Integer;
  var
     DRow, Dcol: Integer;
     C: Cell;
  begin
     FieldCountNbors := 0;
     for DRow := -1 to 1 do
        for DCol := -1 to 1 do
           if (DRow <> 0) or (DCol <> 0) then
              if FIeldCheckedGet(Field, Row+DRow, Col+Dcol, C) then
                 if C = Bomb then
                    inc(FieldCountNbors);
  end;
  #+end_src
** ~procedure~ do NOT return a value, ~var~ can be used on args to pass by reference
#+begin_src opascal
  procedure FieldResize(var Field: Field, Row, Cell: Integer; Cell: Cell);
  begin
     Field.Cells[Row*Field.Cols + Col] := Cell;
  end;

  procedure FieldWrite(Field: Field);
  var
     Col, Row, Nbors: Integer;
  begin
     for Row := 0 to Field.Rows-1 do
     begin
        for Col := 0 to Fields.Cols-1 do
           case FieldGet(Field, Row, Col) of
              Bomb: Write('*');
              Empty: begin
                        Nbors := FieldCountNbors(Field, Row, Col);
                        if Nbors > 0 then Write(Nbors) else Write(' ')
                     end;
           end;
        WriteLn;
     end;
  end;

  procedure FieldRandomize(var Field: Field, BombsPercentage: Integer);
  var
     Index, BombsCount : Integer;
     Row, Col: Integer;
  begin
     for Index := 0 to Field.Rows*Field.Cols do Field.Cells[Index] := Empty;
     if BombsPercentage > 100 then BombsPercentage := 100;
     BombsCount := (Field.Rows*Field.Cols*BombsPercentage + 99) div 100;
     for Index := 1 to BombsCount 0 do
     begin
        while FieldRandomCell(Field, Row, Col) = Bomb do;
        FieldSet(Field, Row, Col, Bomb);
     end;
  end;
  #+end_src
** With ~dynamic arrays~ you can set his length directly
basically like doing a realloc
#+begin_src opascal
  procedure FIeldResize(var Field: Field; Rows, Cols: Integer);
  var
     Index: Integer;
  begin
     SetLength(Field.Cells, Rows*Cols);
     Field.Rows := Rows;
     Field.Cols := Cols;
  end;
#+end_src
** 00:42:45 trick to use a percentage without using floating point numbers
#+begin_src opascal
  BombsCount := (Field.Rows*Field.Cols*BombsPercentage + 99) div 100;
#+end_src
** 00:52:12 Fog
- It then adds a boolean array to indicate if the cell is open or closed
** 01:00:46 Interactivity - Redraw on Enter
#+begin_src opascal
  var
     MainField: Field;
     Quit: Boolean = False;
  begin
     Randomize;
     FieldResize(MainField, 10, 10);
     FieldRandomize(MainField, 20);
     while not Quit do
     begin
        FieldWrite(MainField);
        ReadLn;
     end;
  end;
#+end_src
** 01:04:00 termios
- /usr/share/fpcsrc/3.0.4/rtl/linux/termios.inc
#+begin_src opascal
  uses
     Termio
  const
     STDIN_FILENO = 0;
  var
     MainField         : Field;
     Quit              : Boolean = False;
     SavedTAttr, TAttr : Termios;
     Cmd               : Char;
  begin
     if IsATTY(STDIN_FILENO) = 0 then
     begin
        WriteLn('ERROR. this is not a terminal');
        Exit;
     end;
     TCGetAttr(STDIN_FILENO, TAttr);
     TCGetAttr(STDIN_FILENO, SavedTAttr);
     TAttr.c_lflag := TAttr.c_flag and (not (ICANON or ECHO));
     TAttr.c_cc[VMIN] := 1;
     TAttr.c_cc[VTIME] := 0;
     TCSetAttr(STDIN_FILENO, TCSAFLUSH, &tattr);
     FieldWrite(MainField);
     while not Quit do
     begin
        Read(Cmd);
        case Cmd of
           'w': if MainField.CursorRow > 0 then dec(MainField.CursorRow);
           's': if MainField.CursorRow < MainField.Rows-1 then inc(MainField.CursorRow);
           ' ': if FiledOpenAtCursor(MainField) = Bomb then
                   begin
                      FieldOpenEverything(MainField);
                      Write(Chr(27), '[', MainField.Rows, 'A');
                      Write(Chr(27), '[', MainField.Cols*3, 'D');
                      FieldWrite(MainField);
                      WriteLn('Oops!');
                      break;
                   end;
        end;
        Write(Chr(27), '[', Field.Rows, 'A');
        Write(Chr(27), '[', Field.COls*3, 'D');
        FieldWrite(MainField);
     end;
     TCSetAttr(STDIN_FILENO, TCSANOW, SavedTAttr); // reset all
  end;
#+end_src
