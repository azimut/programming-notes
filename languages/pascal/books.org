* 2017 | Modern Object Pascal | Michalis Kamburelis
** 2 Basics
- ~Exit()~ inside a function
  - can take the value that will /return/
  - when called without parameters it will /return/ the current value of ~Result~
- ~else~ is paired with the last ~if~
- (= <> > < <= >=) /relational operators/
- ~and/or/not/xor~ /logical operators/
  - have higher precedence than relation operators
  - return a boolean
  - or can act as bit-wise operator if both arguments are integers, then return an integer
*** =case=, at most one branch is executed, no fall-through
  case
  0:
  2:
  3..10:
  11, 12, 31:
  else:
  end
*** Enumerated types,
  #+begin_src pascal
    type TAnimalKind = (akDuck, akCat, akDog);
  #+end_src
  - can be used as array indices
    #+begin_src pascal
      array [TAnimalKind] of string;
    #+end_src
  - can convert it to int with *Ord(MyAnimalKind)* or *TAnimalKind(MyInteger)*
    can get the higher value of an enum with *Ord(High(TAnimalKind))*
  - enum names are *unit (global) namespace* by defaul
  - can avoid it by using the *compile directive* {$scopedenums on}
    you will then need to access the enum name by the type name
    TAnimalKind.akDuck, removing the need for the prefix "ak"
*** =for/while/repeat/for..in= loops, see ~Break~ function
  for I := 0 to 9 do
  while I < 10 do
  repeat/until I = 0
  for I in MyArray do
*** Formatting
- format with Write and WriteLn
  - padding integer 666:10
  - round float     Pi:1:4
  - ~LineEnding~ constant from FPC
  - has no support for escape character (aka backslash sequences)
- on /castle engine/ use WriteLnLog, WriteLnWarning never WriteLn
- many xxxToStr functions are on ~SysUtils~ unit (see also ~FormatFloat~ function)
- the ~Format~ function takes a format string pattern and a array? of arguments.
  - the compiler does NOT check wheter the pattern matches the arguments
    causing a runtime error
- ~WriteStr()~ is like Write but writes the string into the 1st argument
** 3 Units
- extension
  - .lpr = lazarus program file (ADVISED for all programs)
  - .pas = for the main program file (ADVISED for units)
  - .pp  = sometimes used for the units or programs
- equivalent to /modules/ and /packages/ in other languages
#+begin_src opascal
  unit Myunit;

  interface
  procedure MyProcedure(const A: Integer);
  function MyFunction(const S: string): string;

  implementation
  procedure MyProcedure(const A: Integer);
  begin
     WriteLn('A + 10 is: ', A + 10);
  end;
  function MyFunction(const S: string): string;
  begin
     result := S + 'strings are automatically managed';
  end;

  initialization
     WriteLn('runs when the program starts');
  finalization
     WriteLn('runs when the program ends')
  end.
#+end_src
