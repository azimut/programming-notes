- https://en.wikipedia.org/wiki/Tcl
  - Author: John Ousterhout
  - 1988
  - Scripting Language, embeded in C

- tclsh https://www.tcl-lang.org/man/tcl/UserCmd/tclsh.htm
  - addon https://github.com/suewonjp/tclsh-wrapper

* used in
- https://wiki.tcl-lang.org/page/Who+Uses+Tcl
- Used in F5's BIG-IP iRules https://my.f5.com/manage/s/article/K6091
  - TCL version 8.4.6
  - https://clouddocs.f5.com/api/irules/
* tools
** editors
- yasnippets https://github.com/yangwen0228/unimacs/tree/bbeb3195000d8c1fd8ba436b47aa65d868769206/utils/snippets/tcl-mode
** android
- https://www.androwish.org/home/home
- https://wiki.tcl-lang.org/page/Tcl+and+android
- https://wiki.tcl-lang.org/page/AndroWish
- 13 Android Application Development Using AndroWish And The Scripting Language Tcl/Tk (English Version)
  by superlinux https://www.youtube.com/playlist?list=PLsAEIIjTPIo-sLNh3gL0vj0g6nKUJ0hSU
- 17 Why AndroWish was a bad idea http://wookie.tcl.tk/39493
- bug: https://www.reddit.com/r/decentespresso/comments/1bjju9l/androwish_help/
  - cannot see fs
  - cannot use blutooth
** standalone executable

- 2020 | Building Tcl 8.6 single file applications - a step-by-step guide
  https://www.magicsplat.com/blog/starpack-example/
- https://www.tcl-lang.org/software/tcltk/bindist.html
- https://sourceforge.net/projects/kbskit/
- https://freewrap.dengensys.com/
- http://kitcreator.rkeene.org/fossil/index
- golang
  - allows shipping tcl/tk binaries, without c dependencies
  - https://pkg.go.dev/modernc.org/tk9.0
  - https://wiki.tcl-lang.org/page/Tcl%2FTk+application+binaries+through+Go

* language
|-------------------------------+----------------------------------|
|              <c>              |                                  |
|-------------------------------+----------------------------------|
|             "foo"             | grouping                         |
|            { foo }            | literal grouping                 |
|          [ print 1 ]          | command substitution             |
|             $foo              | variable substitution            |
|              \n               | backslash substitution (newline) |
|-------------------------------+----------------------------------|
|        [ list foo 1 ]         | lists, are just strings          |
|         [ expt 1+2 ]          |                                  |
|        [ expr 1 + 2 ]         |                                  |
|       [ expr {1 + 2} ]        |                                  |
| proc + {a b} { expr {$a+$b} } | procedure, implicit return       |
|-------------------------------+----------------------------------|
- "Tcl casts everything into the mold of a _command_, even programming constructs".
- there are no reserved words
- Features
  - Dynamically typed, everything can be treated as a string
  - Bytecode Compiler
  - Unicode support
  - Regular expressions
  - bignums
  - OO + FP + Imperative + Procedural
  - lambdas
- variables are NOT declared but assigned to
- Event Driven interfaces to sockets/files
- Supports ~line continuation~ by backslash
- commands can be variadic, and with default values
- Substitution, happens from left-to-right. =Just once=.
- Values are *immutable*, not variables.
- {*} works as ,@ does on LISP
  causes the word to be splitted appart and passed to the command as separate arguments.

** Commands

https://wiki.tcl-lang.org/page/Tcl+Commands

- gets stdin line
- read -nonewline stdin
- concat
- upvar
- lappend
- lassign
- lindex
- linsert
- llength
- lmap
- lrange
- lrepeat
- lreplace
- lsearch
- lsort
- regexp
- split
- join
- scan
- list
- array
- string
- if/else
- foreach
- [[https://wiki.tcl-lang.org/page/tailcall][tailcall]]

|-----------+-----------------------------------------------------------------------------|
| apply     | applies an anonymous function                                               |
| array     |                                                                             |
| catch     |                                                                             |
| coroutine | create and produce values from coroutines                                   |
| dict      | are lists with an even number of elements, k,v                              |
| expr      | ME: performs variable substitution on given string                          |
| list      | creates a list with arguments, or an emtpy string                           |
| namespace | create/access/destroy contexts for commands and variables                   |
| regexp    | matches                                                                     |
| regsub    | substitution                                                                |
| try       |                                                                             |
| uplevel   | evaluates code in the context of the calling procedure, caller caller or... |
| upvar     | create s alink to a variable in a different stack frame                     |
| yield     | ditto                                                                       |
| yieldto   | ditto                                                                       |
| zlib      | zlib library                                                                |
|-----------+-----------------------------------------------------------------------------|
*** uplevel
- Allows a command to be executed in a scope other than the current.
- Has the net effect of transforming the call stack into a call tree.
#+begin_src tcl
  proc for {initCmd testExpr advanceCmd bodyScript} {
      uplevel 1 $initCmd
      set testCmd [list expr $testExpr]
      while {[uplevel 1 $testCmd]} {
          uplevel 1 $bodyScript
          uplevel 1 $advanceCmd
      }
  }
#+end_src
*** upvar
- Arranges for one or more local variables in the current procedure
  to ~refer~ to  variables in an enclosing procedure call or _global variables_
#+begin_src tcl
  proc decr {varName {decrement 1}} {
      upvar 1 $varName var
      incr var [expr {-$decrement}]
  }
#+end_src

** Standard Library (tcllib)
- https://www.tcl.tk/man/tcl8.6/TclCmd/contents.htm
- https://www.tcl.tk/software/tcllib/
- https://core.tcl-lang.org/tcllib/doc/trunk/embedded/md/toc.md
|----------+--------------------------------------------------------------------------------------------------------------------------------------|
|      <r> |                                                                                                                                      |
| calendar | date & time operations. In development.                                                                                              |
|  cmdline | command line argument processor similar to opt                                                                                       |
|     comm | socket based 'send'.                                                                                                                 |
|  counter | Event counters, interval timers, and histogram display                                                                               |
|      csv | Handling of comma separated values                                                                                                   |
| doctools | Writing manpages, the tcl way                                                                                                        |
|     exif | Handling of EXIF information generated by digital cameras                                                                            |
| fileutil | Tcl implementations of some standard Unix utilities                                                                                  |
|     math | common math functions like min, max, and others                                                                                      |
|     ncgi | new CGI processing module                                                                                                            |
|     nntp | NNTP (news) client                                                                                                                   |
|      ntp | time clients                                                                                                                         |
|   report | Tabular ascii reporting. Interoperates with struct::matrix.                                                                          |
|  soundex | Phonetic string comparison                                                                                                           |
|   struct | Tcl implementations of common data structures (tree, graph, queue, matrix, pool, skiplist, priority queue, records, list operations) |
|   stooop | Pure Tcl OO package                                                                                                                  |
| textutil | Text processing utilities, including a macro processor                                                                               |
|----------+--------------------------------------------------------------------------------------------------------------------------------------|
*** Web
|------------+---------------------------------------------|
| uri        | URI parsing module                          |
| mime       | MIME encoder and decoder                    |
| html       | HTML generation procedures. This uses ncgi. |
| htmlparse  | Parsing of HTML strings.                    |
| javascript | Javascript generation procedures.           |
|------------+---------------------------------------------|
*** Dev
|----------+-----------------------------------------|
| log      | General logging and tracing facility.   |
| profiler | function level Tcl source code profiler |
|----------+-----------------------------------------|
*** Crypto, Hash, Encoding
|--------+----------------------------------------------------|
| base64 | base64, uuencode, yencode encoder and decoder      |
| crc    | Calculation of various CRC checksums               |
| des    | Tcl implementation of the Data Encryption Standard |
| md4    | MD4 hashes                                         |
| md5    | MD5 hashes                                         |
| sha1   | Secure Hash Algorithm                              |
|--------+----------------------------------------------------|
*** Protocols
|------+-----------------------------------------|
| dns  | Tcl implementations of the DNS protocol |
| ftp  | FTP client library                      |
| irc  | Tcl implementation of the IRC protocol. |
| pop3 | POP3 protocol implementation            |
|------+-----------------------------------------|
*** Servers
|-------+------------------------------------------------|
| pop3d | POP3 server implementation and helper packages |
| ftpd  | FTP server                                     |
| smtpd | SMTP server implementation                     |
|-------+------------------------------------------------|
* libraries

- web - uses noVNC to run x11 on browser https://wiki.tcl-lang.org/page/CloudTk

* codebases

- https://wiki.tcl-lang.org/page/Showcase
- https://www.androwish.org/index.html/home
  https://www.androwish.org/index.html/wiki?name=undroidwish
- OpenOCD - Open on Chip Debugger https://openocd.org/
- NaviServer (a webserver)
  https://wiki.tcl-lang.org/page/NaviServer
  https://bitbucket.org/naviserver/naviserver/src/main/
- First version of redis
  - took from https://gist.github.com/antirez/6ca04dd191bdb82aad9fb241013e88a8
  - [[./redis.tcl]]

* snippets

- '01 try/catch/finally implementation (before it was added to the language)
  https://code.activestate.com/recipes/68396-try-catch-finally/
- tcp example
  https://wiki.tcl-lang.org/page/The+simplest+possible+socket+demonstration
  https://wiki.tcl-lang.org/page/A+little+client%2Dserver+example
  https://wiki.tcl-lang.org/page/Network+server+application+template
- examples https://en.wikibooks.org/wiki/Tcl_Programming/Examples
- eggdrop's twitter https://github.com/horgh/twitter-tcl
