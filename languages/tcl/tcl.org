#+TITLE: Tcl

- https://en.wikipedia.org/wiki/Tcl
  - Author: John Ousterhout
  - 1988
  - Scripting Language, embeded in C
  - Changelog
    - 1999 8.1 full utf-8 support
    - 2012 8.6 TclOO
    - 2024 9.0 64-bit

- tclsh https://www.tcl-lang.org/man/tcl/UserCmd/tclsh.htm
  - addon https://github.com/suewonjp/tclsh-wrapper
- tool: implementation for J2ME supported phones https://www.hecl.org/

* used in

- https://wiki.tcl-lang.org/page/Who+Uses+Tcl
- OpenOCD - Open on Chip Debugger https://openocd.org/
- Used in F5's BIG-IP iRules https://my.f5.com/manage/s/article/K6091
  - TCL version 8.4.6
  - https://clouddocs.f5.com/api/irules/

* language
|-------------------------------+--------------------------------------|
|              <c>              |                                      |
|-------------------------------+--------------------------------------|
|             "foo"             | grouping, supports all substitutions |
|            { foo }            | literal grouping                     |
|          [ puts 1 ]           | command substitution                 |
|             $foo              | variable substitution                |
|              \n               | backslash substitution (newline)     |
|-------------------------------+--------------------------------------|
|        [ list foo 1 ]         | lists, are just strings              |
|         [ expt 1+2 ]          |                                      |
|        [ expr 1 + 2 ]         |                                      |
|       [ expr {1 + 2} ]        |                                      |
| proc + {a b} { expr {$a+$b} } | procedure, implicit return           |
|-------------------------------+--------------------------------------|

- "Tcl casts _everything_ into the mold of a ~command~, even programming constructs".
- there are NO reserved keywords
- everything is a (utf-8) string, there are NO TYPES
  - what "it is" depends of the command that it is manipulating it
  - no manual conversions / no serialization needed
  - but strict format checks at runtime
- Features
  - Dynamically typed, everything can be treated as a string
  - Bytecode Compiler
  - Unicode support
  - Regular expressions
  - bignums
  - OO + FP + Imperative + Procedural
  - lambdas
- Variables are NOT declared but assigned to.
- Things very similar to _Lisp_ macros just happen using normal procedures.
  - the ultimate late binding proglang
- Event Driven interfaces to sockets & files
- Supports ~line continuation~ by backslash
- Substitution, happens from left-to-right. =Just once=.
- Values are *immutable*, variables not.
- {*} works as ,@ does on LISP, causes the word to be splitted appart and passed to the command as separate arguments.

** TclOO

- since Tcl 8.6 (2012)
- https://wiki.tcl-lang.org/page/TclOO
- https://wiki.tcl-lang.org/page/TclOO+Tutorial

#+begin_src tcl
  oo::class create fruit {
      method eat {} { # <-- can be overwritten by subclass, and called by "next"
          puts "yummy!"
      }
  }
  oo::class create banana {
      superclass fruit
      constructor {} {
          my variable peeled; # <-- access instance variable
          set peeled 0
      }
      method peel {} {
          my variable peeled; # <-- my takes the place of this instance, aka $b
          set peeled 1
          puts "skin off!"
      }
      method edible? {} { # <-- reader
          my variable peeled
          return $peeled
      }
      method eat {} {
          if {![my edible?]} {
              my peel
          }
          next; # <-- call superclass method
      }
  }
  set b [banana new]
  $b eat
#+end_src

** procedures

- aka user defined commands
  #+begin_src tcl
    proc + {a b} {
        expr {$a+$b} # returns the last command
    }
  #+end_src

- ~return~ breaks out of the procedure boundary and returns given value to caller
- ~unknown~ procedure
  - undefined by default
  - called each time an undefined function is called
  - can be used to write a DSL (?)

** commands

https://wiki.tcl-lang.org/page/Tcl+Commands

- almost every command returns a value
- can be _variadic_, and with default values
- those that support index notation, support a ~end-NUM~ notation

*** control flow

- break/continue
- return, breaks out of the procedure boundary and returns given value to caller
- if/elseif/else
- while
- foreach
- for
- try
- catch
- coroutine
- [[https://wiki.tcl-lang.org/page/tailcall][tailcall]]

*** other

- gets stdin line
- read -nonewline stdin
- concat
- regexp
- split
- join
- scan
- array
- string
- incr

|-----------+-----------------------------------------------------------|
|       <r> |                                                           |
|     apply | applies an anonymous function                             |
|     array |                                                           |
|      dict | are lists with an even number of elements, k,v            |
|      expr | ME: performs variable substitution on given string        |
| namespace | create/access/destroy contexts for commands and variables |
|    puts/1 | prints argument, returns nothing                          |
|    puts/2 | prints argument in given stream?, returns nothing         |
|    regexp | matches                                                   |
|    regsub | substitution                                              |
|   uplevel | evaluates code, in the context of the calling procedure   |
|     yield | ditto                                                     |
|   yieldto | ditto                                                     |
|      zlib | zlib library                                              |
|-----------+-----------------------------------------------------------|
*** lists

- list -  creates a list with arguments, or an emtpy string
- lappend
- lassign
- lindex
- linsert
- llength
- lmap
- lrange
- lrepeat
- lreplace
- lsearch
- lsort

*** uplevel

- Allows a command to be executed in a scope other than the current.
- Has the net effect of transforming the call stack into a call tree.
#+begin_src tcl
  proc for {initCmd testExpr advanceCmd bodyScript} {
      uplevel 1 $initCmd
      set testCmd [list expr $testExpr]
      while {[uplevel 1 $testCmd]} {
          uplevel 1 $bodyScript
          uplevel 1 $advanceCmd
      }
  }
#+end_src

*** upvar

- Create s alink to a variable in a different stack frame
- Arranges for one or more local variables in the current procedure
  to ~refer~ to  variables in an enclosing procedure call or _global variables_
#+begin_src tcl
  proc decr {varName {decrement 1}} {
      upvar 1 $varName var
      incr var [expr {-$decrement}]
  }
#+end_src

** standard library (tcllib)
- https://www.tcl.tk/man/tcl8.6/TclCmd/contents.htm
- https://www.tcl.tk/software/tcllib/
- https://core.tcl-lang.org/tcllib/doc/trunk/embedded/md/toc.md
|----------+--------------------------------------------------------------------------------------------------------------------------------------|
|      <r> |                                                                                                                                      |
| calendar | date & time operations. In development.                                                                                              |
|  cmdline | command line argument processor similar to opt                                                                                       |
|     comm | socket based 'send'.                                                                                                                 |
|  counter | Event counters, interval timers, and histogram display                                                                               |
|      csv | Handling of comma separated values                                                                                                   |
| doctools | Writing manpages, the tcl way                                                                                                        |
|     exif | Handling of EXIF information generated by digital cameras                                                                            |
| fileutil | Tcl implementations of some standard Unix utilities                                                                                  |
|     math | common math functions like min, max, and others                                                                                      |
|     ncgi | new CGI processing module                                                                                                            |
|     nntp | NNTP (news) client                                                                                                                   |
|      ntp | time clients                                                                                                                         |
|   report | Tabular ascii reporting. Interoperates with struct::matrix.                                                                          |
|  soundex | Phonetic string comparison                                                                                                           |
|   struct | Tcl implementations of common data structures (tree, graph, queue, matrix, pool, skiplist, priority queue, records, list operations) |
|   stooop | Pure Tcl OO package                                                                                                                  |
| textutil | Text processing utilities, including a macro processor                                                                               |
|----------+--------------------------------------------------------------------------------------------------------------------------------------|
*** Web
|------------+---------------------------------------------|
| uri        | URI parsing module                          |
| mime       | MIME encoder and decoder                    |
| html       | HTML generation procedures. This uses ncgi. |
| htmlparse  | Parsing of HTML strings.                    |
| javascript | Javascript generation procedures.           |
|------------+---------------------------------------------|
*** Dev
|----------+-----------------------------------------|
| log      | General logging and tracing facility.   |
| profiler | function level Tcl source code profiler |
|----------+-----------------------------------------|
*** Crypto, Hash, Encoding
|--------+----------------------------------------------------|
| base64 | base64, uuencode, yencode encoder and decoder      |
| crc    | Calculation of various CRC checksums               |
| des    | Tcl implementation of the Data Encryption Standard |
| md4    | MD4 hashes                                         |
| md5    | MD5 hashes                                         |
| sha1   | Secure Hash Algorithm                              |
|--------+----------------------------------------------------|
*** Protocols
|------+-----------------------------------------|
| dns  | Tcl implementations of the DNS protocol |
| ftp  | FTP client library                      |
| irc  | Tcl implementation of the IRC protocol. |
| pop3 | POP3 protocol implementation            |
|------+-----------------------------------------|
*** Servers
|-------+------------------------------------------------|
| pop3d | POP3 server implementation and helper packages |
| ftpd  | FTP server                                     |
| smtpd | SMTP server implementation                     |
|-------+------------------------------------------------|
* libraries

- web - uses noVNC to run x11 on browser https://wiki.tcl-lang.org/page/CloudTk

* codebases

- https://wiki.tcl-lang.org/page/Showcase
- https://www.androwish.org/index.html/home
  https://www.androwish.org/index.html/wiki?name=undroidwish
- NaviServer (a webserver)
  https://wiki.tcl-lang.org/page/NaviServer
  https://bitbucket.org/naviserver/naviserver/src/main/
- tcp example
  https://wiki.tcl-lang.org/page/The+simplest+possible+socket+demonstration
  https://wiki.tcl-lang.org/page/A+little+client%2Dserver+example
  https://wiki.tcl-lang.org/page/Network+server+application+template
- examples https://en.wikibooks.org/wiki/Tcl_Programming/Examples
- eggdrop's twitter https://github.com/horgh/twitter-tcl
- First version of redis
  - took from https://gist.github.com/antirez/6ca04dd191bdb82aad9fb241013e88a8
  - [[./redis.tcl]]

* snippets

- '01 try/catch/finally implementation (before it was added to the language)
  https://code.activestate.com/recipes/68396-try-catch-finally/
- control flow: repeat N {} (from "Tcl the misunderstood")
  #+begin_src tcl
    proc repeat {n body} {
        set res ""
        while {$n} {
            incr n -1
            set res [uplevel $body]
        }
        return res
    }
    set a 10
    repeat 5 {incr a};# will return 15
  #+end_src
- Example: concurrent tcp server - select(2) based (from "Tcl the misunderstood")
  #+begin_src tcl
    socket -server handler 9999
    proc handler {fd clientaddr clientport} {
        set t [clock format [clock seconds]]
        puts $fd "Hello $clientaddr:$clientport, current date is $t"
        close $fd
    }
    vwait forever
  #+end_src
- Example: memoize the rest of a function (from "Tcl the misunderstood")
  #+begin_src tcl
    proc memoize {} {
        set cmd [info level -1]
        if {[info level] > 2 && [lindex [info level -2] 0] eq "memoize"} {
            return
        }
        if {![info exists ::Memo($cmd)]} {
            set ::Memo($cmd) [eval $cmd]
        }
        return -code return $::Memo($cmd)
    }
    proc myMemoizedProcedure { ... } {
        memoize
        ...
    }
  #+end_src
