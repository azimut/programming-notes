|-------------+--------------+------+-----+-----------------------------------------------------------------------|
| name        | (require)    | down |     | url                                                                   |
|-------------+--------------+------+-----+-----------------------------------------------------------------------|
| lldb-vscode | dap-lldb     | no   |   ? | https://github.com/llvm/llvm-project/tree/main/lldb/tools/lldb-vscode |
| vscode-lldb | dap-codelldb | yes  | 1.6 | https://github.com/vadimcn/vscode-lldb/                               |
| code-debug  | dap-gdb-lldb | yes  | 0.3 | https://github.com/WebFreak001/code-debug                             |
|-------------+--------------+------+-----+-----------------------------------------------------------------------|
- launch.json https://github.com/emacs-lsp/dap-mode/blob/master/docs/page/features.md#launchjson-support
  - https://code.visualstudio.com/docs/cpp/launch-json-reference
  - https://code.visualstudio.com/docs/editor/debugging
  - https://code.visualstudio.com/docs/editor/variables-reference
- setup
  https://alpha2phi.medium.com/emacs-lsp-and-dap-7c1786282324
- Compiler options
  - C/C++ : clang some.c -g -O0 -o some
- lldb-vscode
  - building https://lldb.llvm.org/resources/build.html#building-lldb-with-cmake
- OCAML
  - https://discuss.ocaml.org/t/debug-ocaml-code/10867
    "debuggers never work for concurrent code, nor for really complex D.S." - someone
  - (abandoned on 2021?) https://github.com/hackwaly/ocamlearlybird/
- Go
  - Docker+dlv
    https://golangforall.com/en/post/go-docker-delve-remote-debug.html
- Node.js https://code.visualstudio.com/docs/nodejs/nodejs-debugging
- Erlang
  (require 'dap-erlang)
  https://erlang-ls.github.io/articles/tutorial-debugger/
  https://github.com/erlang-ls/erlang_ls
- Emacs
  - configs https://emacs-lsp.github.io/dap-mode/page/configuration/
  - features https://emacs-lsp.github.io/dap-mode/page/features/
  - troubleshooting for lldb https://github.com/emacs-lsp/dap-mode/issues/6
  - dap-mode https://github.com/emacs-lsp/dap-mode/
  - cpp https://emacs-lsp.github.io/lsp-mode/tutorials/CPP-guide/

* Servers
** dlv - delve - Golang

- https://github.com/go-delve/delve/
- dlv modes
  - dap:
    - starts a headless tcp server communicating in DAP protocol
    - a client (IDE) connects and requests a binary to be launched/attached

* DAPE

- https://github.com/svaante/dape
- emacs
- alternative to dap-mode
- works with eglot
- no VSCode's launch.json support
- https://blog.dornea.nu/2024/11/28/mastering-golang-debugging-in-emacs/
- https://silosneeded.com/en/2024/04/configuring-dape

- Example node.js https://github.com/Artawower/org-mode-ast/blob/4a3997e5204cc70863e1b5e010f66f99331639e8/.dir-locals.el#L27
** Example Golang - binary config
https://github.com/chmouel/tekton-armadas
#+begin_src lisp
  ((nil . ((eval . (add-to-list
                    'dape-configs
                    `(orchestrator-watcher modes (go-mode go-ts-mode) ensure dape-ensure-command fn dape-config-autoport
                                           command "dlv"
                                           command-args ("dap" "--listen" "127.0.0.1::autoport" "--log=true")
                                           command-cwd dape-cwd-fn
                                           port :autoport
                                           :type "debug"
                                           :request "launch"
                                           :args ["--disable-ha"]
                                           :program "./cmd/orchestrator-reconciler/"))))))
#+end_src

** Example Golang - daemon config
https://github.com/inngest/inngest
#+begin_src makefile
  .PHONY: debug
  debug:
          TEST_MODE=true \
          LOG_LEVEL=trace dlv debug ./cmd/main.go \
                              --headless \
                              --listen=127.0.0.1:40000 \
                              --continue --accept-multiclient --log \
                              -- \
                              dev --tick=50 --no-poll --no-discovery -v $(PARAMS)
#+end_src

#+CAPTION: .dir-locals
#+begin_src lisp
  ((go-mode . ((dape-configs .
                             ((go-debug
                               modes (go-mode go-ts-mode)
                               command "dlv"
                               ;; command-args ("dap" "--listen" "127.0.0.1:55878" "--log")
                               command-cwd default-directory
                               host "127.0.0.1"
                               port 40000
                               :type "go"
                               :mode "remote"
                               :request "attach"
                               :showLog "true")
                              )))))
#+end_src
