- home https://adventofcode.com/
- reddit https://old.reddit.com/r/adventofcode/
- https://en.wikipedia.org/wiki/Advent_of_Code
  - Author: Eric Wastl
  - 2015-

* thoughts

1) debug/print/visualize often
   - even something really crude that relies on ascii characters can help here
   - is astounding how blind can you be to something really obvious if you saw it visually
     - you always have an image of how things should be behaving
     - but until you actually see it, that might be ALL wrong

2) dynamic programming languages might become a hidrance at some point of the challenges
   - when you need to iterate over your =poorly designed algorithm=
     - in order to understand it better
     - and hopefully improve it
   - when they do not provide good debugging features

3) in a way 1 can help to never hit 2

* repos/code

- Awk
  - https://github.com/phillbush/aoc
  - https://github.com/ferd/advent-of-code-2021/
  - https://github.com/kaworu/adventofcode-2015/
- C
  - https://github.com/antirez/adventofcode2022/
    - day1/1.c
      - while (fgets(buf,sizeof(buf),stdin) != NULL)
      - strtol(buf,NULL,10)
- C#
  - Advent of C# https://csadvent.christmas/archive/2023
- Clojure
  - Video https://www.youtube.com/playlist?list=PLbPrugU2oQ8W5qGiiiFJRlQ8vZ8AZXlG8
  - https://github.com/unclebob/AdventOfCode2022
  - https://github.com/borkdude/advent-of-babashka
- Factor
  - https://github.com/gifti258/aoc-factor
  - https://github.com/Bubbler-4/factor-problem-solving/
  - https://github.com/pablo-meier/advent-of-code/
- Forth
  - 23 Advent of Code in Forth: Introduction
    - https://www.youtube.com/playlist?list=PL1ogWmqjJQUFFwRzZ9f53we7W8oCDC8Oo
    - source https://git.sr.ht/~aw/dusk-aoc
- GO
  - https://github.com/lukechampine/advent/
- jq
  - https://github.com/odnoletkov/advent-of-code-jq https://news.ycombinator.com/item?id=33963383
  - https://github.com/pingiun/aoc-2022-jq
- Kotlin (beatiful solution)
  - https://github.com/ClouddJR/advent-of-code-2022/blob/main/src/main/kotlin/com/clouddjr/advent2022/Day18.kt
- Ocaml
  - https://github.com/quernd/Advent-of-Code/blob/main/2022/07/day07.ml
  - https://github.com/hellopatrick/xmas/blob/v2022/day07/main.ml
  - https://github.com/DrearyLisper/aoc-2022
- Python
  - https://github.com/fogleman/AdventOfCode2021/
- ruby
  - https://github.com/JoshCheek/advent_of_code
  - video Advent of Code 2019/6 https://vimeo.com/378152632
- scala
  - https://scalacenter.github.io/scala-advent-of-code/
    https://github.com/scalacenter/scala-advent-of-code
- tcl
  - https://codeberg.org/NRK/slashtmp/src/branch/master/AoC/2022
  - https://github.com/harkaitz/advent-of-code-2024-tcl
- zig
  - 22 https://www.huy.rocks/everyday/12-11-2022-zig-using-zig-for-advent-of-code
  - 22 https://www.forrestthewoods.com/blog/failing-to-learn-zig-via-advent-of-code/

* vis

https://en.wikipedia.org/wiki/X_PixMap
https://en.wikipedia.org/wiki/Netpbm
https://netpbm.sourceforge.net/doc/pbm.html
- https://github.com/charmbracelet/freeze
  - list of themes
    https://xyproto.github.io/splash/docs/index.html
    https://xyproto.github.io/splash/docs/all.html
    - ++algol

#+begin_src
  val heatMap = Seq('█', '█', '█', '▓', '▓', '▒', '▒', '░', '░', ' ')
#+end_src

** ml
#+begin_src fsharp
module Scaffold.Image

open System.IO
open System.Text

/// Splits an integer into three byte values.
let intToRGB num =
    let red = (num >>> 16) &&& 0xFF |> byte
    let green = (num >>> 8) &&& 0xFF |> byte
    let blue = num &&& 0xFF |> byte
    (red, green, blue)

/// <summary>Render a grayscale PGM frame.</summary>
/// <param name="width">The width of the generated image.</param>
/// <param name="height">The height of the generated image.</param>
/// <param name="path">The output file path.</param>
/// <param name="byteFn">A function that accepts a row and column index and returns a one-byte grayscale value.</param>
let saveToPGM width height path byteFn =
    let header = $"P5 {width} {height} 255 "

    let body = Array.zeroCreate<byte> (ASCIIEncoding.ASCII.GetByteCount header + width * height)
    let offset = ASCIIEncoding.ASCII.GetBytes(header, body)

    for i in 0 .. width * height - 1 do
        let r, c = i / width, i % width
        body[i + offset] <- byteFn r c

    File.WriteAllBytes(path, body)

/// <summary>Render a color PPM frame.</summary>
/// <param name="width">The width of the generated image.</param>
/// <param name="height">The height of the generated image.</param>
/// <param name="path">The output file path.</param>
/// <param name="byteFn">A function that accepts a row and column index and returns a three-byte color value.</param>
let saveToPPM width height path byteFn =
    let header = $"P6 {width} {height} 255 "

    let body = Array.zeroCreate<byte> (ASCIIEncoding.ASCII.GetByteCount header + width * height * 3)
    let offset = ASCIIEncoding.ASCII.GetBytes(header, body)

    for i in 0 .. width * height - 1 do
        let r, c = i / width, i % width
        let (red, green, blue) = byteFn r c
        body[i * 3 + offset] <- red
        body[i * 3 + offset + 1] <- green
        body[i * 3 + offset + 2] <- blue

    File.WriteAllBytes(path, body)
#+end_src
** mine
#+begin_src bash
  
#+end_src
* Idea: Advent Of Code Community Repo
- Repo comun
- Benchmark
  - https://benchmarksgame-team.pages.debian.net/benchmarksgame/why-measure-toy-benchmark-programs.html
- Usando github actions
  - Ejemplo: Corriendo varios lenguajes
    https://github.com/geohot/mergesorts/blob/master/run.sh
  - Ejemplo: Instalar dependencies para cada lenguaje
    https://github.com/geohot/mergesorts/blob/master/.github/workflows/main.yaml
  - Cada job tiene 6hs para completar
    https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#usage-limits
  - Ejemplo: usando docker y asdf
    https://github.com/drujensen/fib/blob/master/Dockerfile
  - Ejemplo: running and table stats
    https://github.com/drujensen/fib/blob/master/run.sh
- Ideas
  - ¿guardar los bigboys comprimidos y descomprimirlos como parte de cada dia?
    - en git-lfs?
  - Probablemente usando PR's y veted approvers
  - Filename:
    day<N>_<USERNAME>.<EXTENSION>
    day<N>/<USERNAME>/
    day<N>/<LANGUAGE>/<USERNAME>
  - ¿no aceptar PR's despues del dia del challenge?
- Pro:
  - Medir performance en un lugar comun
  - ¿Competencia? ¿Basados en el mismo lenguaje?
  - ¿Premios por performance?
  - ¿Equipos?
- Contra:
  - como proveer starter packages?
    - day 0 example?
  - casi depende en que la gente cree "big boys"
    - alternativamente se podria multiplicar la input
  - manejo de dependencias puede ser complicado
  - mantener todo en stdlib
    - aunque no deberia ser complicado(tm) instalar deps globales
  - muy probablemente mantener todo en un 1(un) archivo
* 2023

** day 1 - se7en
#+begin_src
WIDE bigboy repost (as opposed to tall bigboy) >>97636176 →

bigboy #1 (alternative version)

url: https://bpa.st/raw/BEEQ
silver: 231
gold: 229
#+end_src

#+begin_src
bigboy #1
url:    https://0x0.st/HxMf.txt
size:   21M
lines:  1M
silver: 55022487
gold:   55015199
>#+end_src
** day 2
#+begin_src
bigboy #2
url: https://0x0.st/HxLF.txt.7z
size:   79M
lines:  1M
silver: 71327370192
gold:   2221048073
#+end_src
** day 3
#+begin_src
url:    https://0x0.st/Hxtu.txt
    size:   24M
    grid:   5000x5000
    silver: 258006204
    gold:   17158526595  
#+end_src
** day 7
#+begin_src
bigboy #7
url:    https://0x0.st/H3Hv.txt
size:   2.5M
hands:  200K
silver: 6678229757944529
gold:   7246011492564128
#+end_src

* 2022

** review 15-
#+begin_src
 15 is fun if you don't slap it onto a constraint solver for a quick no-brain solution
 16 is the biggest filter so far, not really fun but not tedious either
 17 is pretty fun, and part 2 filtered a lot of people
 18 is short and easy, not much to say
 19 is also a big filter and probably the hardest one this year so far, there are a lot of unique solutions for this one
 20 is simple and easy, but easy to make bugs on
 21 is annoying and tedious, and my least favorite puzzle that takes longer than 10 minutes to solve this year. I didn't even go back to solve it without a constraint solver, fuck that
 22 is fun but also tedious to write in one sitting, I don't think I'd like it if I didn't get on the top 100 on it
 23 is short and easy and mostly just reading comprehension test, no clue why it's put here so late
#+end_src
** review
#+begin_src
 01: trivial adding
 02: slightly annoying ordering
 03: irritating string splitting and matching
 04: overlapping ranges
 05: moving stuff between stacks, incredibly irritating input parsing
 06: find first occurrence of n distinct characters
 07: the filesystem one. seems to have brutally filtered normies
 08: the tall trees one
 09: The rope bridge one (this was fun!)
 10: becoming a CGA card to render dumb messages to the screen
 11: Monkeys throwing stuff
 12: Hill climb. everyone remembered Dijkstra for this
 13: [how do [[you]] feel [about [nested lists]]]
 14: The sandpile. Everyone remembered deterministic automatons, after completing it another way, of course. Produced the most satisfying visualisations of the year.
 15: The beacons. Are you retarded enough to iterate over all possible locations?
 16: The valves. The first really difficult one. Filtered many anons who forgot what a pruned DFS was
 17: Tetris. Part 2 way more brutal than part 1.
 18: Surface areas and flood fills. A little breather.
 19: Following on from 16 another brutal DFS tree pruning exercise involving mining robots. Many anons were filtered.
 20: Circular buffers, linked lists, and modular arithmetic. Did you forget about % (n-1)?
 21: Algebra with four letter identifiers. could be done in excel quite easily.
 22: The Cube. Part 2 was by far the most horrifying puzzle this year. Did you, anon, also make a shitty paper cube? Did you, anon, also avoid the filter only by hardcoding your edge maps?
 23: Elves discover social distancing. The peak of the year is over. Also produced nice visualisations.
 24: Blizzard Beasts. I actually liked this one.
 25: slightly tricking base changing but nothing really compared to previous days
#+end_src
** Big boys
#+begin_src
url:    https://0x0.st/odUF.7z
big boy #1
bytes:  107M
elves:  ~1M
silver: 4368180
gold:   12967759

big boy #2:
bytes:  92M
insns:  24M
silver: 119988948
gold:   119990335

big boy #3:
bytes:  65M
sacks:  5M
silver: 119031205
gold:   31562325

big boy #7
url:    https://0x0.st/odZd.txt.7z
bytes:  13M
dirs:   100K
files:  ~66M
total disk space is 3000000000
you need 700000000 for the update
silver: 2414990429
gold:   923977224
url:    https://0x0.st/odNV.txt.7z
bytes:  13M
dirs:   100K
files:  ~1M
disk:   3000000000
update: 700000000
silver: 2414990429
gold:   170301725

big boy #8
url:    https://0x0.st/od1i.txt.7z
bytes:  100M
grid:   9999x9999
silver: 116882
gold:   6852600

#9
Bigboy: https://0x0.st/oduK.txt.xz
Part 1: 252139
Part 2: 82629770164920
Megaboy: https://0x0.st/odu_.txt.xz
Part 1: 579961
Part 2: 1874276660911504

BigBoy Day10:
https://files.catbox.moe/lyx795.zip
Easily done with .ppm format

------------------------------
#11
http://0x0.st/od72.txt.xz
106033356
196907379245217

------------------------------
#12
    A reddit big boy:
    >https://old.reddit.com/r/adventofcode/comments/zjypk4/2022_day_12_extra_large_input/

    For the 30mb:

    $ time ../local/src/aoc/aoc input-2022-12-bb-reddit.txt 
    -- "input-2022-12-bb-reddit.txt"
    2616490
    2507471

    real    0m11.599s
    user    0m11.246s
    sys     0m0.267s

------------------------------
#15
Here's a shitty bigboy FOR PART 2 ONLY (the beacon positions don't make sense, the ones given are just placeholders so that you can calculate the signal ranges as you would normally).
10 million input lines, so the file is big (like 130MB zipped, 700MB unzipped)

http://0x0.st/ongk.tar.gz
Result: 591420099908


My times are 0.64s not including parsing, 3.8s including parsing.

    #+end_src
