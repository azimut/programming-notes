- https://theory.stanford.edu/~blynn/gitmagic/

- tutorial
  http://jwiegley.github.io/git-from-the-bottom-up/
  https://github.com/jwiegley/git-from-the-bottom-up

- diy
  - https://vaibhavsagar.com/blog/2017/08/13/i-haskell-a-git/

- article | extract dir into new repo
  https://www.johno.com/move-directory-between-repos-with-git-history
- article 17 | magit https://emacsair.me/2017/09/01/magit-walk-through/
- https://github.com/k88hudson/git-flight-rules
- https://blog.scottlowe.org/2023/12/15/conditional-git-configuration/
- workflow https://sethrobertson.github.io/GitFixUm/fixup.html
- book Pro Git https://git-scm.com/book/en/v2/Git-Internals-Git-Objects
- https://bytes.zone/posts/modeling-git-internals-in-alloy-part-1-blobs-and-trees/
- https://www.boringcactus.com/2021/02/22/can-we-please-move-past-git.html
- https://dev.to/yonkeltron/is-it-time-to-look-past-git-ah4
- https://www.freecodecamp.org/news/tag/git/
- https://ohshitgit.com/
- https://stackoverflow.com/questions/14352932/view-a-files-history-in-magit
  ~magit-log-buffer-file~, view log for file
* Reimplementing “git clone” in Haskell from the bottom up

- https://stefan.saasen.me/articles/git-clone-in-haskell-from-the-bottom-up/
- source https://bitbucket.org/ssaasen/git-in-haskell-from-the-bottom-up

#+begin_src haskell
pktLine :: String -> String
pktLine msg = printf "%04s%s" (toHex . (4 +) $ length msg) msg

gitProtoRequest :: String -> String -> String
gitProtoRequest host repo = pktLine $ "git-upload-pack /" ++ repo ++ "\0host="++host++"\0"
#+end_src

#+begin_src haskell
data Remote = Remote
    getHost       :: String
  , getPort       :: Maybe Int
  , getRepository :: String
} deriving (Eq, Show)

lsRemote' :: Remote -> IO [PacketLine]
lsRemote' Remote{..} = withSocketsDo $ -- network
  withConnection getHost (show $ fromMaybe 9418 getPort) $ \sock -> do -- ?
    let payload = gitProtoRequest getHost getRepository
    send sock payload
    response <- receive sock
    send sock flushPkt -- disconnect
    return $ parsePacket $ L.fromChunks [response]
#+end_src

** Code: Git TCP client

#+begin_src haskell
  {-# LANGUAGE OverloadedStrings, ScopedTypeVariables, BangPatterns #-}
  module Git.Remote.TcpClient (
     withConnection
   , send
   , receiveWithSideband
   , receiveFully
   , receive
  ) where
  import qualified Data.ByteString.Char8 as C
  import qualified Data.ByteString as B
  import Network.Socket hiding (recv, send)
  import Network.Socket.ByteString (recv, sendAll)
  import Data.Monoid (mempty, mappend)
  import Numeric (readHex)
  withConnection :: HostName -> ServiceName -> (Socket -> IO b) -> IO b
#+end_src
