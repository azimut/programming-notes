- Packt Conquering Git https://www.youtube.com/playlist?list=PLTgRMOcmRb3N5khC1tlRsPvRwcqIQiMu1
- 24 Learn Git                 | Boot dev https://www.youtube.com/watch?v=rH3zE7VlIMs
- 22 Advanced Git              | FreeCodeCamp https://www.youtube.com/watch?v=qsTthZi23VE
- 21 Git internals             | Omer Rosenbaum https://www.youtube.com/watch?v=b_0_nF9yX9c
- 21 Git for Professionals     | https://www.youtube.com/watch?v=Uszj_k0DGsg
- 19 Git Internals CS50        | John Britton https://www.youtube.com/watch?v=lG90LZotrpo
- 15 Git just say no           | Richard Hipp https://www.youtube.com/watch?v=ghtpJnrdgbo
- 12 Advanced Git: Graphs, Hashes, and Compression, Oh My! https://www.youtube.com/watch?v=ig5E8CcdM9g
* DONE 13 | Git From the Bits Up      | Tim Berglund

https://www.youtube.com/watch?v=MYP56QJpDr4

- A git repository is
  1) collection of objects
  2) a system for naming those objects (refs)

- Types of hashes
  - The file content is stored in a =blob=
  - A =tree= object, stores the (file/dir) (name/mode)
  - A =commit= owns a tree

- The =HEAD= ref, is the commit you are on.

- Creating a .git from scratch (kinda)
  #+begin_src sh
    $ mkdir -p .git/objects
    $ mkdir -p .git/refs/heads
    $ echo "Hello" | git-hash-object --stdin -w
    $ git cat-file b0d9c44
    $ git update-index --add --cacheinfo 100644 b0d9c44 hello.txt
    $ echo <COMMITHASH> > .git/refs/heads/master
    $ git checkout HEAD -- beowulf.txt # restore file
  #+end_src

- What is now called the "staging area" was once called "index"
  (see "git update-index")

- Typical merge
  #+begin_src sh
    $ vi raven.txt
    $ git add .
    $ git commit -m "Bleak"

    $ git branch feature 3d09
    $ # or "HEAD^"  for 1 commit previous to the parent
    $ # or "HEAD~5" for 5 commits previous to the parent
    $ git branch -f feature HEAD
    $ vi raven.txt
    $ git add .
    $ git commit -m "Ember"

    $ git checkout feature
    $ vi raven.txt
    $ git add .
    $ git commit -m "Title"

    $ git checkout master
    $ git merge feature master # creates a merge commit
#+end_src


- With a *rebasing* allows the branch to forward in time their base commit.
  Still needs to *merge* later.
  #+begin_src sh
    $ git reset --hard b7fda   # undo merge

    $ git checkout feature
    $ git rebase master        # the rebase

    $ git checkout master
    $ git merge feature        # fast-forward merge, make master to point to head of branch
  #+end_src

- If you want to get a commit delete with "git reset --hard"
  use *git reflog*

- interactive rebase, from last 10 commit,
  you cannot squash the first one, you gotta squash into somtehing
  $ git rebase -i HEAD~10

- $ git reset --hard HEAD@{1} # single step undo

* DONE 16 | Magit: Git in Emacs       | Grumpy Gits SG
  https://www.youtube.com/watch?v=OMIxZhLU71U
  - IntellIj copied magit
  - GitGutter: shows +- on the side of the line
    https://github.com/emacsorphanage/git-gutter
    https://github.com/emacsorphanage/git-gutter-fringe
  - Smerge:
    - a way to deal with conflicts
    - Comes with Emacs
  - artist-mode, mode to freely edit text
  - VC Mode
  - Magit
    - *magit-list-repositories*, needs to be enabled, can keep track of status with upstream
    - workflow: jump from *magit-blame* to the commits from that line
  - "keep your branches very short-lived, aim to do it in a day
    if not, rebase at the end of the day"
* DONE 18 | It's Magit!               | John Wiegley
  https://www.youtube.com/watch?v=j-k-lkilbEs
- Interface copied from =Darcs=, a cvs like git, based on the idea of "patches".
- ~magit-save-repository-buffers~
  ~magit-auto-revert-mode~ (reverts all the files that were modifying those things)
- j u jump to unstaged
  j s jump to staged
  j ?
- ~magit-dired-jump~ C-x C-j
- 13:00
  d   to open diff on a separate buffer
  d r to diff for range
- C-C C-t, (on a diff) viewing the history of changes for that function (?
- C-C C-e, (on a diff) edit line (might rebase to it)
- E (Ediff) current (HEAD), index, actual file
- E s (Ediff to stage changes)
      Between 3 HEAD/Index/WorkingFile
      If done on a file that needs a merge resolution:
      It will be 4, current, index, actual file, common ancestor
- ~global-magit-file-mode~, magit actions without going into magit-status buffer
- ~magit-dispatch~ (suggested C-x M-g) alternative to above
- K , untrack
- X, Reset (soft/hard) (3/2023 updated)
  s HEAD^ (to pop a commit) (keeps it staged)
  h HEAD^ (") (keeps it unstaged????)
  k **KILLS FILES***
- R rename
- c f fixup commit message
- On a commit
  C-c C-a Acked By
  C-c C-t
  M-p     to scroll down on old commit messages
- % worktrees
  different branch in a different directory, sharing the same repo
- $ magit process buffer
  k kill process in buffer
- o Submodules
- O Subtree (equivalent to submodules, the commits go into their own repo)
- r i rebase interactive, to select commit then C-c C-c
  1) select commit from list
  2) then pick/squash/fixup commits
  3) resolve conflicts
- r f rebase quick fix up
  C-c C-e
- z z save stash
  z Z snapshot stash, saves staged and unstaged, good to do at the end of the day if you don't want to commit
- : will ask for the git arguments
- y     list branches local and on remote (a ref browser)
  y y   to pick a different branch to compare
  y L v change visibility, show commits behind
  y k   over a branch to kill it (remotely or locally)
- Y cherries, shows you what you will see if you were to commit to master
    useful when part of your work/commits were already cherry picked into master
- V V revert commit
    v rever changes on your working files
- T git notes, do not create a new object, only relevant for the person saving them
    like saving the build output
    "mutable metadata"
- git bisect, works best/easily with master branches were only things that pass CI are commited
- ~magit-blame~, use "c" to cycle to next style
- https://hackage.haskell.org/package/git-monitor
  https://github.com/jwiegley/gitlbitwi
* DONE 20 | Git                       | Missing Semester
aka "Lecture 6: Version Control (git)"
https://www.youtube.com/watch?v=2sjqTHE0zok
** Data Model
- blobs, trees, commits - all are git objects with an id hash
- type blob = array<bytes>
  type tree = map<string, tree|blob>
  type commit = struct {
     parents: array<commits>
     author: string
     message: string
     snapshot: tree
  }
  type object = <blob|tree|commit>
  type objects = map<string, object> # key is the hash
  def store(o)
    id = sha(o)
    objects[id] = o
  type references = map<string,string> # description to hash
- blobs are the files
  trees are the folders (subdir or subblobs)
  commits (msg,author,parent commits,tree)
  root is the directoy being tracked
  snapshot is the whole state in a moment in time
- each snapshot *points* back to the snapshot before
  each snapshot has some metadata in the form of commits
  you can branch one snapshot into differents and then merge them
** Exploring
- git has the concept of a "staging area" that lets you
  select what you are going to commit to the snapshot
- ls .git/
  HEAD config description hooks/ info/ objects/ refs/
- HEAD is the current commit pointer
* DONE 20 | Emacs: introduction to VC
"...(version control framework)"

https://www.youtube.com/watch?v=SQ3Beqn2CEc

C-x v v - will do the first logical action, 1) initialize git repo, 2) commit file
C-x v l - will show you the history of commits for the current file
C-x v = - will show the current diff for the file
C-x v g - will anotate in a new tab, the older the bluer
C-x v h - after you selected a region, it will show you the changes of that region through commits, diffs included
* TODO 24 | So You Think You Know Git | Scott Chacon

https://www.youtube.com/watch?v=aolI_Rz0ZqY

- Speaker
  - Founders of github.com (left)
  - Wrote "Pro Git" book
  - Works on a git client gitbutler.com

** Oldies

- Alias: stash --all
  $ git config --global alias.staasj 'stash --all'

- Alias: run a script
  $ git config --global alias.bb !better-branch.sh

- Config: setup different .gitconfig for things under different paths
  #+begin_src conf
    [includeIf "gitdir:~/projects/work/"]
      path = ~/projects/work/.gitconfig
    [includeIf "gitdir:~/projects/oss/"]
      path = ~/projects/oss/.gitconfig
  #+end_src

- $ git blame -L 15,26 path/to/file
- $ git log   -L 15,26:path/to/file

- Try to let git figure out the context by the name of the function
  $ git log   -L :FileClass:path/to/file

- $ git blame -w -C
  |------+--------------------------------------|
  | -w   | ignore whitespace                    |
  | -C   | detect code moved                    |
  | -CC  | or the commit that created that file |
  | -CCC | or any commit at all                 |
  |------+--------------------------------------|

- filter log by regex
  $ git log -S <REGEX> -p

- $ git diff --word-diff

- REuse REcorded REsolution: to remember merge-conflicts and how they were fixed
  $ git config --global rerere.enabled true

** Some New Stuff

- TODO: 16:50
- $ git branch --column
  $ git config --global column.ui auto
