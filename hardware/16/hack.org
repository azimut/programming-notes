- https://en.wikipedia.org/wiki/Hack_computer
- From NAND To Tetris by "Tea Leaves"  https://www.youtube.com/playlist?list=PLu6SHDdOToSdD4-c9nZX2Qu3ZXnNFocOH
* Course: From NAND to tetris
** Part 1
https://www.youtube.com/playlist?list=PLrDd_kMiAuNmSb-CKWQqq9oBFN_KNMTaI
*** 0.2
    - Using Combination logic one can convert NAND to other logic gates, AND OR XOR...
    - Using Combination AND sequential (time based) logic we get CPU/Registers/Memory
    - Digital design it into a Computer Arquitecture
*** 1.1
    - on Boolean function is easy to get the "truth table" of ALL values
    - Boolean identities laws:
      - Commutative
      - Associative
      - Distributive
      - Idempotence (AND)
      - Doble negation
      - De Morgan: (not (and x y)=(or (not x) (not y))
*** 1.2
    - While designing a circuit, we have a "truth table" (the desired phenomen we want to happen).
      And we need to convert it to a "Boolean function".
    - There is NOT algorithm to get the most efficient function from the truth table
    - Manual calculation:
      1) Write formulas for each truth (1) value in the table
      2) OR them all
      3) simplify
    - Every boolean function can be constructed with a NAND (NOT AND)
*** 1.3
    - =D-   AND
    - =)D-  OR
    - -|>o- NOT
*** 1.4
    - On a chip we have an interface (io) and the implementation.
    - On VHDL you have to label each edge(line) between chips to describe the parts.
    - Chip == Gate
      Pin  == edge between chips
    #+begin_src C
    /** Xor Gate: out = (a And Not(b)) Or (Not(a) And b) **/
    CHIP Xor {
      IN a,b;
      OUT out;
      PARTS:
      Not (in=a, out=nota);
      Not (in=b, out=notb);
      And (a=a,        b=notb,     out=aAndNotb);
      And (a=nota,     b=b,        out=notaAndb);
      Or  (a=aAndNotb, b=notaAndb, out=out);
    }
    #+end_src
*** 1.6
    - Bits in buses, bits manipulated together
    #+begin_src C
   CHIP And4 {
     IN a[4],b[4];
     OUT out[4];
     PARTS:
       AND(a=a[0], b=b[0], out=out[0]);
       AND(a=a[1], b=b[1], out=out[1]);
       AND(a=a[2], b=b[2], out=out[2]);
       AND(a=a[3], b=b[3], out=out[3]);
   }
    #+end_src
*** 1.7
    - Elementary logic gates: not,and,or,xor,mux,dmux
    - 16-bit variant: not16,and16,or16,mux16
    - Multiway variant: Or8Way,Mux4Way16,Mux8Way16,DMux4Way,DMux8Way
    - Mux gates take 3 inputs: a,b,sel.
      - If sel is 1 then a is returned
      - if sel is 0 then b is returned
    - AndMuxOr
    #+begin_src c
    CHIP AndMuxOr {
    IN a,b,sel;
    OUT out;
    PARTS:
    And (a=a, b=b, out=andOut);
    Or  (a=a, b=b, out=orOut);
    Mux (a=andOut,b=orOut,sel=sel,out=out);
    }
    #+end_src
    - DeMux, takes an input and a selector. Based on the sel, "channels" to a or b (other gets 0).
** Part 2
https://www.youtube.com/playlist?list=PLrDd_kMiAuNmllp9vuPqCuttC1XL9VyVh  
