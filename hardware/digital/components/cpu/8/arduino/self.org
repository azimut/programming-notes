- https://wiki.archlinux.org/title/Arduino
- https://bitwisecmd.com/
- wiki https://en.wikipedia.org/wiki/Arduino
- reversing https://github.com/thomasbbrunner/arduino-reverse-engineering
- https://www.microchip.com/wwwproducts/en/ATmega328P#datasheet-toggle
- https://www.arduino.cc/en/uploads/Main/arduino-uno-schematic.pdf
- Stop auto-reset of arduino on connection
  - 10uF capacitor between reset and gnd (or 100nF ceramic capacitor)
  - 120ohm resistor between 5v and reset pin (or 110-124)
  https://playground.arduino.cc/Main/DisablingAutoResetOnSerialConnection/

* second

10^-3 === 1e+3

|-------+----+---------------------+---------------+-------+------|
| milli | ms | delay()             |         1.000 | 10^-3 | 1e+3 |
| micro | Î¼s | delayMicroseconds() |     1.000.000 | 10^-6 | 1e+6 |
| nano  | ns |                     | 1.000.000.000 | 10^-9 | 1e+9 |
|-------+----+---------------------+---------------+-------+------|

* How GPIO works?

#+begin_src
---------(V+)----------
             |
PE-----------< (Q1)
             |
             z
      |\     z
OE----| \____|
O ----| /    |
      |/     |---- GPIO
I -----------|
#+end_src

- I  = Input
- O  = Output
- OE = Output enable (=OUTPUT= on pinMode())
- PE = Pull-up resistor enable (=INPUT_PULLUP= on pinMode())
- Q1 = MOSFET?, keeps input stable

- 5v, 40mA max
- analogRead()
- analogWrite() - PWM Output
  - produces a series of pulses
  - changing the duration of the pulse
  [[https://docs.arduino.cc/54ef6da144b4531dd9ada686a7e67c56/pwm.gif]]

* Ports

- [[https://docs.arduino.cc/retired/hacking/software/PortManipulation/][Arduino docs]]
- https://docs.arduino.cc/learn/programming/bit-math/
- 8 bit wide
- 3 UNO ports, some bits/pins are not usable
  |---+--------+------|
  |   |  <c>   |      |
  | D | D0-D7  | 0,1* |
  | B | D8-D13 | 6,7  |
  | C |  A0-5  | 6,7  |
  |---+--------+------|
  - D0: aka RX set as 0=input
  - D1: aka TX set as 1=output

- 3 registers for each port
  |------+----+--------------------------------------|
  | DDR  | rw | configure direction 0=INPUT 1=OUTPUT |
  | PORT | rw | controls LOW/HIGH                    |
  | PIN  | r  | reads INPUT ins                      |
  |------+----+--------------------------------------|

** videos

- 16 [[https://www.youtube.com/watch?v=yPoLAlI-ObI][Arduino: Registros de puertos + Timer1]] by TechKrowd

** snippets

- configure mode
  #+begin_src c
    DDRD = B11111110;       // sets pin 0 as INPUT
    DDRD = DDR | B11111100; // sets pin 2-7 as OUTPUT
                            // without changing RX/TX
  #+end_src

- set output
  #+begin_src c
    PORTD = B10101000; // pins 7,5,3 to HIGH
  #+end_src

* ADC

- Type: SAR

- analogRead()
- A0-A5 6 pins (on the PU version)
- 10-bit 0-1023
- Control Registers
  - ADMUX
  - ADCSRA
    - ADPS[012] bits change ADC clock frequency (see page 218)

- Output registers: ADC[HL]
  [[https://content.instructables.com/FA2/MS3S/GZQ40KO6/FA2MS3SGZQ40KO6.png]]
  - if right adjusted (default) read L and then H for then 10-bit precision
  - if left adjusted (see ADLAR, ADMUX) read just H for 8-bit precision

- video [[https://www.youtube.com/watch?v=ettV5zorZfQ][ADC blocks and REGISTERS | Internal Reference]]
- pdf [[https://ece-classes.usc.edu/ee459/library/documents/ADC.pdf][Using the Atmel ATmega328P ADC module]]

- http://www.openmusiclabs.com/learning/digital/atmega-adc/
  - DIDR - Data Input Disable Register
  - Recommended max of 50kHz-200kHz
  - Toggle off the DIDR for the pin you are usings (see page 220)
    #+begin_src c
      DIDR0 = 0x01; // ADC0
      DIDR0 = 0x02; // ADC1
    #+end_src
    1) stop it for floating, it creates noise
    2) speeds it up, DI leaves a capacitance that slows it down

- http://www.openmusiclabs.com/learning/digital/atmega-adc/in-depth/
  - ENOB = Effective Number of Bits
  - SNR = Signal to Noise Ratio
  - ENOB = (SNR-1.76dB) / 6.02dB https://www.analog.com/media/en/training-seminars/tutorials/mt-001.pdf

* Models

- Arduino
  - Leonardo
    - chip has built in usb interface, can emulate keyboard or mouse
  - Mega [[http://web.archive.org/web/20150122044427/http://pighixxx.com:80/megapdf.pdf][pinout.pdf]]
  - Nano
  - Pro-mini (needs a programmer)

- Compatible
  - Teensy
  - NodeMCU
  - MonkMakesDuino

** Uno
#+ATTR_ORG: :width 400
[[https://res.cloudinary.com/practicaldev/image/fetch/s--cCmipZlc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/778713k4efamdbandco8.png]]

- ATmega328p
- USB to TTL
- 2 voltage regulators: 5v and 3.3v
- LM358: dual opamp
  1) [[https://forum.arduino.cc/t/uno-rev-3-what-is-the-lm358-for/125822][as a voltage comparator]], between USB and Vin, to know the power source
  2) buffers D13, removing the load created by the L LED and its current limiting resistor.

* language

https://www.arduino.cc/reference/en/
https://www.arduino.cc/reference/cs/

** types

- [[https://www.arduino.cc/reference/en/language/variables/data-types/array][array]]
- [[https://www.arduino.cc/reference/en/language/variables/data-types/string][string]]
- [[https://www.arduino.cc/reference/en/language/variables/data-types/stringobject/][String()]]
- [[https://www.arduino.cc/reference/en/language/variables/data-types/void][void]]
- number:
  - bases: 123, B1010, 0712, 0xea
  - 2.34E5 = 2.34 * 10^5   = 234000
  - 67e-12 = 67.0 * 10^-12 = 0.000000000067

|-----+-----------------+----------------+---------------+---------------------------|
| <c> |       <c>       |            <r> |           <r> |                           |
| siz |   type / cast   |            min |           max |                           |
|-----+-----------------+----------------+---------------+---------------------------|
|  -  |     [[https://www.arduino.cc/reference/en/language/variables/data-types/boolean][boolean]]     |              - |             - | alias of "bool"           |
|  8  |      [[https://www.arduino.cc/reference/en/language/variables/data-types/bool][bool]]       |           true |         false |                           |
|  8  |     [[https://www.arduino.cc/reference/en/language/variables/data-types/char][char()]]      |           -127 |           127 | eg: 'A', 20               |
|  8  |  [[https://www.arduino.cc/reference/en/language/variables/data-types/unsignedchar][unsigned char]]  |              0 |           255 |                           |
|  8  |     [[https://www.arduino.cc/reference/en/language/variables/data-types/byte][byte()]]      |              0 |           255 |                           |
| 16  |     [[https://www.arduino.cc/reference/en/language/variables/data-types/word][word()]]      |              0 |        65,535 |                           |
| 16* | [[https://www.arduino.cc/reference/en/language/variables/data-types/unsignedint][(unsigned int)]]  |              0 |        65,535 | eg: 127U, 127u            |
| 16  |      [[https://www.arduino.cc/reference/en/language/variables/data-types/short][short]]      |        -32,768 |        32,767 |                           |
| 16* |      [[https://www.arduino.cc/reference/en/language/variables/data-types/int][int()]]      |        -32,768 |        32,767 |                           |
| 32  |     [[https://www.arduino.cc/reference/en/language/variables/data-types/long][long()]]      | -2,147,483,648 | 2,147,483,648 | eg: 127L,  127l           |
| 32  | [[https://www.arduino.cc/reference/en/language/variables/data-types/unsignedlong][(unsigned long)]] |              0 | 4,294,967,295 | eg: 127UL, 127ul          |
| 32  |     [[https://www.arduino.cc/reference/en/language/variables/data-types/float][float()]]     | -3.4028235E+38 | 3.4028235E+38 | 6~7 decimals of precision |
| 64  |     [[https://www.arduino.cc/reference/en/language/variables/data-types/double][double]]      |                |               |                           |
|  ?  |     [[https://www.arduino.cc/reference/en/language/variables/data-types/size_t][size_t]]      |              0 |             ? | represent size in bytes   |
|-----+-----------------+----------------+---------------+---------------------------|

** shiftOut()

- docs https://www.arduino.cc/reference/en/language/functions/advanced-io/shiftout/
- other custom versions https://forum.arduino.cc/t/anyone-know-the-code-for-the-shiftout-function/45638/13

#+FILENAME: wiring_shift.c
#+begin_src c
  void
  shiftOut(uint8_t dataPin,
           uint8_t clockPin,
           uint8_t bitOrder,
           uint8_t val)
  {
    uint8_t i;
    for (i = 0; i < 8; i++)  {
      if (bitOrder == LSBFIRST)
        digitalWrite(dataPin, !!(val & (1 << i)));
      else
        digitalWrite(dataPin, !!(val & (1 << (7 - i))));
      digitalWrite(clockPin, HIGH);
      digitalWrite(clockPin, LOW);
    }
  }
#+end_src

* Course: Arduino Lessons - Paul McWorther
https://www.youtube.com/playlist?list=PLGs0VKk2DiYx6CMdOQR_hmJ2NbB4mZQn-
* 3rd Projects
- https://github.com/Lembed/Awesome-arduino
- https://github.com/FortySevenEffects/arduino_midi_library
- https://github.com/thomasfredericks/Bounce2
- https://github.com/jandelgado/jled
- https://www.youtube.com/c/Seytonic/playlists
- https://github.com/mlochen/mouse-scanner/
- https://github.com/Avamander/arduino-tvout/
* snippets

#+begin_src c
  const char DATA[] = {1,2} // sizeof(char) = 1
#+end_src

#+begin_src c
  #define alength(x) (sizeof(x)/sizeof(x[0]))
#+end_src

* Tutorial
** Digital Pins
  - All(almost) pins can be used as Digital pins.
  - All default to inputs.
  - IO
    |        | impedance | IO         | comment                                   |
    |--------+-----------+------------+-------------------------------------------|
    | Input  | high      | 100 megohm | can get weird lectures when not connected |
    | Output | low       | 40 mA      | Adviced to use a 470ohm or 1k resistor    |
  - Pull up/down inputs, to get reliable value
    |           | connected to | resistor |
    | pull-up   | 5V+          | 10K      |
    | pull-down | ground       | 10K      |
*** INPUT_PULLUP
  - buildin 20K resitors can be used on INPUT_PULLUP mode
  - read gets inverted
  |              | HIGH | LOW |
  | INPUT        | on   | off |
  | INPUT_PULLUP | off  | on  |
  - most value of 20kÎ© and 50kÎ©. On the Arduino Due, it is between 50kÎ© and 150kÎ©.
  - The other end should be connected to ground. In the case of a simple switch,
    this causes the pin to read HIGH when the switch is open, and LOW when the switch is
    pressed.
  - pin13 has the led attached, so it gives 1.7V instead of 5V, so if you use the internal
    pullup resistor it will always be LOW so use an external resistor for it
** Analog pins
- Has 6 (8mini/nano and 16 on the mega) A/D (analog digital) converter
- Values 0-1023 (10 bit depth)
- GPIO: general purpose IO (aka digital pins)
** Memory
- ATMega328
  | Flash  | 32k | .5k bootloader |
  | SRAM   | 2k  |                |
  | EEPROM | 1K  |                |
- Is easy to run out of SRAM, by using strings or []int instead of []byte
- Use Flash memory with PROGMEM
* Emacs packages
** arduino-cli-mode   20200615.919  available  melpa      Arduino-CLI command wrapper
https://github.com/motform/arduino-cli-mode
https://github.com/arduino/arduino-cli
Compile         	C-c C-a c
Upload           	C-c C-a u
Compile and Upload 	C-c C-a b
List Connected Boards 	C-c C-a l
Create new sketch 	C-c C-a n
Install a Library 	C-c C-a i
Uninstall a Library 	C-c C-a u
** arduino-mode       20180509.36   available  melpa      Major mode for editing Arduino code.
https://github.com/stardiviner/arduino-mode
Uses arduino ide command *arduino* to *--upload* and *--verify*
  - syntax highlighting
  - command-line arduino interface
  - org-mode babel support
  - flycheck
Upload
    In Arduino source code file, press [C-c C-c] to upload to Arduino board.
Build
    In Arduino source code file, press [C-c C-v] to build.
** company-arduino    20160306.1739 available  melpa      company-mode for Arduino
https://github.com/yuutayamada/company-arduino/
This package is a set of configuration to let you auto-completion by using:
 - irony-mode
 - company-irony
 - company-c-headers on arduino-mode.
* Serial

https://playground.arduino.cc/Main/DisablingAutoResetOnSerialConnection/
https://wiki.archlinux.org/index.php/Arduino
#+begin_src shell
  stty -F /dev/ttyACM0 cs8 9600 ignbrk -brkint -imaxbel -opost -onlcr -isig -icanon -iexten -echo -echoe -echok -echoctl -echoke noflsh -ixon -crtscts
#+end_src
