#+TITLE: MCS-48

|----------+----------------------------------------------------|
| manual   | https://devsaurus.github.io/mcs-48/mcs-48.pdf      |
| wiki     | https://en.wikipedia.org/wiki/Intel_MCS-48         |
| wiki     | https://es.wikipedia.org/wiki/Intel_MCS-48         |
| wiki     | https://handwiki.org/wiki/Engineering:Intel_MCS-48 |
| timeline | https://timeline.intel.com/1976/mcs-48             |
|----------+----------------------------------------------------|

- 1976
- Models: 8048, 8035, 8748/9 (EPROM)
- Intel's first =Microcontroller= (aka micro computer)
- Manufactured in the 90's to support older designs (cheap)
- Harvard architecture (modified) https://en.wikipedia.org/wiki/Modified_Harvard_architecture
  - loose separation between code and data
  - _allows memory that contains instructions to be accesed as data_

- notes https://jhnbyrn.github.io/951-KLR-PAGES/reading_code.html

* architecture

|------+-----+-----------|
|      | ROM | RAM       |
| 8048 | 1k  | 64 bytes  |
| 8049 | 2k  | 128 bytes |
| 8050 | 4k  | 256 bytes |
|------+-----+-----------|

- 11MHz (divided by 15 internally?)
- 8 bit
- 96 instructions
  - 1 byte are those that only have the opcode (80%?) (aka operate)
  - 2 bytes are immediate instructions
  - 2 bytes are memory reference intructions

** Timer

- 8bit binary counter (00-FF)
- on overflow
  - sets a flag flip-flop
    - can be test with ~JTF~ instruction
    - can be reset with ~JFT~ instruction or ~RST~ pin
  - if timer interrupt is enabled
    - generates an interruption request
    - calling subroutine in addr 7
    #+begin_src asm
      en  tcnti ;  enable timer counter interrupt
      dis tcnti ; disable timer counter interrupt (also removes it)
    #+end_src

- start/stop
  #+begin_src asm
    strt t    ; start as a TIMER, counts the internal clock = cycle clock / 32
    strt cnt  ; start as a event COUNTER, counts T1 changes (aka external events), set to 255 acts as a second INT
    stop tcnt ; stop any, also by RST
  #+end_src

- set/initialized through the accumulator
  #+begin_src asm
    mov t, a ; timer = acc
    mov a, t ; acc   = timer
  #+end_src

** INT(errupt)

#+begin_src asm
  en  i ;  enables interrupts
  dis i ; disables interrupts
#+end_src

- disabled on RST
- is active low, to allow logic ORing of several ones
- sampled every instruction cycle
- can be tested with ~JNI~ to test a pending interrupts before enable them
  - if kept disable can be seen as a new ~T2~
- must be held for at least 3 machine cycles to ensure proper a interrupt
- must be removed before ~RETR~
  - peripherical devices (ics?) automatically disable the interrupt when a register is read on it
  - you might output and interrupt ack
- single level, once triggered all further ones are ignored until ~RETR~

** Conditional Branch Logic

(?)

|-----------------------+---------+-------------|
|          <c>          |   <c>   |     <c>     |
|-----------------------+---------+-------------|
|      accumulator      | all 0's | not all 0's |
|   accumulator bits    |    -    |      1      |
|      carry flag       |    0    |      1      |
|  user flags (F0,F1)   |    -    |      1      |
|  time overflow flag   |    -    |      1      |
|-----------------------+---------+-------------|
|  test input (T0,T1)   |    0    |      1      |
| interrupt input (INT) |    0    |      -      |
|-----------------------+---------+-------------|

** PSW - Program Status Word

- 4 MSB stored at the top of the ~stack~ when a subroutine call or interrupt
- reflect information about status of ram&cpu
- can be read as a whole into/from the accumulator
- can be write from the accumulator to restore from a power down

*** Layout - from LSB to MSB

- 3 bit stack pointer
  - initialized to 0, points to 8-9 of RAM (start of stack)
  - incremented by 1 on each CALL/INTerrupt
  - decremented by 1 on RETR, the end of a subroutine
    - RET does not update the PSW
  - on overflow, goes back to pointing to 8-9 (111->000)
- 1 bit unused
- 1 bit BS memory bank select switch
  #+begin_src asm
    sel rb0 ; = 0 for R0  - R7
    sel rb1 ; = 1 for R0' - R7'
  #+end_src
- 1 bit F0 flag
  - user controlled flag
  - tested by ~JF0~
- 1 bit AC auxiliary carry flag
  - generated by an ~ADD~ and used by ~DA A~
- 1 bit CY carry flag

** Program Counter

#+begin_src
    |----+------+-----|
MSB | 11 | 8-10 | 0-7 | LSB
    |----+------+-----|
#+end_src

- is stored at the top of the ~stack~ on subroutine call or interrupt
- reset to 0 when power-on or RESET is received

- 12 bits wide (from LSB to MSB)
  - 8 bits for ~address~ within a page
  - 3 bits for ~page~ addressing (4 pages)
    |---+-----+-----+-----|
    | P | BIT | SRT | END |
    |---+-----+-----+-----|
    | 0 | 000 | 000 | 0FF |
    | 1 | 001 | 100 | 1FF |
    | 2 | 010 | 200 | 2FF |
    | 3 | 011 | 300 | 3FF |
    |---+-----+-----+-----|
  - 1 bit needed only when _external memory_ is employed
    - under programmer's only control
      #+begin_src asm
        sel mb0
        sel mb1
      #+end_src
    - =0 program memory in ~memory bank~ 0 (0-2047)
    - =1 program mempry in ~memory bank~ 1 (2048-4095)

*** unconditional jump & call instruction

- instruction
  - 8 bit opcode
    - 5 bit for opcode
    - 3 bit MSB address
    - there is an _unique opcode for each page_ that a jump or call can transfer control to
  - 8 bit address

- replace 11 bits of the ~program counter~
  - transfer control anywhere within a 2K address range
    - 4 pages of external program memory
    - 4 pages of resident program memory

***   conditional jump instructions

- can transfer control only _within the page_ containing the instruction
- use 2(two) bytes
  - 1(one) for the opcode/instruction
  - 1(one) for the adddress
    - replaces the LSB of the ~program counter~

** ROM

- 1K internal for _program memory_
  - segmented into 4(four) 256-byte blocks/pages
- 3k of additional support for external ROM for _program memory_
- 4k of total ROM supported

*** Program Memory

- 1024 words 8bit wide addressed by the =program counter=

#+begin_src asm
  .org 0 ; reset vector, ->RST (pin 4)
  jmp hellworld

  .org 3 ; external interrupt vector, ->INT (pin 6)
  retr   ; if not used

  .org 7 ; time interrupt vector (msd to lsd)
         ; ...

  .org 0x100
  hellworld: ; ...
  .org 0x300 ; BCD lookup table
#+end_src

*** External Access Mode

- EA input pin, RESET should be applied when EA changes
- disables internal _program memory_ (the first ~1k of the memory map)
- allowing the first words of _program memory_, to be fetched from external memory
- bumps _program memory_ size upto 4k

** RAM

- Can be expanded to access 256 bytes extra of external _data memory_
  - 64+256 = 320 bytes

*** External Data Memory addressing

- movx allows upto 256 new memory locations (added to the 64 internal)
- additional pages may be added by bank switching with extra output lines (?)
#+begin_src asm
  movx a,@r0 ;   a = *r0
  movx @r0,a ; *r0 = a

  movx a,@r1 ;   a = *r1
  movx @r1,a ; *r1 = a
#+end_src

*** Internal Data Memory layout

- (0-31) Lower Half
  - (0-7) 8 (working) registers of 8bit
    - R0-R7 - aka memory bank 0
    - =Register Inderect Addressing=
      - R0/R1 may be used as *RAM pointers* to access memory containing data.
        #+begin_src asm
          mov a, @r0 ; a = *r0
        #+end_src
  - (8-23) 8-Level (program counter) stack
    - 16x8
    - addressed by the stack pointer during subroutine calls
    - 8 stack locations in 16 RAM locations (2 locations per address)
    - each will contain the ~program counter~ + 4MSB of the ~PSW~
  - (24-31) Optional second register stack
    - R0'-R7' - aka memory bank 1
    - can be used in place of R0-R7
    - useful during interrupts
    - see ~program status word~

- (32-64) Upper Half
  - 32x8
  - Data Store
    - up to the programmer
    - accessed only by R0, R1

** Arithmetic Section
*** Instruction Decoder
- stores the ~OP code~ part of the instruction
- sends control signals to the ALU
*** ALU (Arithmetic Logic Unit)
- 2x 8bit input
  - 8 bit accumulator
  - 8 bit temporary register (transparent)
- 8 bit output
- sets a =Carry Flag= on the ~Program Status Word~ on overflow
- Operations:
  - add with/out carry, incr, decr
  - AND, OR, XOR
  - bit complement, rotation, swap nibbles, BCD decimal adjust
*** Accumulator register
- 8 bit
- one of the ALU sources
- data to/from I/O ports and memory pass through it
** I/O 27 pins

*** External _Instruction_ *FETCH* Cycle

- automatically if memory address >1024 OR ~EA~ pin is on
- ~program counter~ put
  - 8bit bus
  - 4bit port 2
- ~ALE~ indicates address validity timing
  - of both external program and external data memory
  - to a 373 latch control
- ~PSEN~ indicates fetching is in progress
  - tie to CE/OE of the memory
- bus is reset (? and content is read

*** Types of data tranfers

1) Programmed: controlled by the _program_
   - control-> ->signal <-data->
   - inneficient use of CPU
   - there is abit chit-chat needed for reading data
     + you signal/ask for the conversion to happen to the A/D converter
     + wait for it to be ready on T0 (maybe thousands of status signals)
     + accept the data

2) Interrupt: initiated by the _device_ when is ready, through an INTerruption
   - temporarilly suspends normal operations, and transfer the data
   - _more efficient_ than programming
   - useful for events of _unpredictable_ occurrence
   - requires more _hardware complexity_ on the IO, to externally compare and trigger the INTerruption
   - no idle time
     - you send a signal
     - keep processing
     - accept data when INTerrupted

3) DMA Direct Memory Access: between _device_ and the computer _memory_
   - no involvement at all by the CPU
   - needs a _DMA controller_ IC
   - =NOT AVAILABLE for the 8048=

*** Types of I/O operations

1) Control: IO <=  CPU, causes IO to perform an *action* (eg: rewind tape)
2) Status:  IO  => CPU, convey *information* about the present state or condition (eg: parity error)
3) Data:    IO <=> CPU, through data lines on the CPU bus

*** 3 bit test INPUTs for conditional jumps

- T0, T1, INT
  - T0 test input, or output periodical sequence of pulses, to be used as reference for other devices
    #+begin_src asm
      ent0 clk ; output clock/3 on T0
    #+end_src
  - T1 test input, or input to an event counter
- can be used to monitor external signals
- branching without loading an input port into the ~accumulator~

*** 8 bit port (x2)

- TTL compatible IO
- you can mix input and output within a port
- output _latched_ (aka remains until new data is written)
  #+begin_src asm
    outl p1,a ; port 1 = accumulator
    outl p2,a ; port 2 = accumulator
  #+end_src
- input _non-latched_
  #+begin_src asm
    in a,p1 ; accumulator = port 1 state
    in a,p2 ; accumulator = port 2 state
  #+end_src

*** 8 bit bus

- all pins must be used for either input or output (no mixing possible)
- also use the accumulator for I/O
- used for address and data
- needs a transparent latch (373/573) IC for addresses
- bus (=OUTL= and =INS=)
  - configurations
    1) bidirectional (true)
       - with IO strobe pins (RD, WR)
    2) statically non-latched input
    3) statically latched output

* projects

- homebrew computer https://github.com/jim11662418/Intel_8048_Single_Board_Computer
- https://hackaday.io/project/19278-8048-maze-generator
  - code https://cdn.hackaday.io/files/19278824789952/maze.asm

- https://x.com/RueNahcMohr/status/1431910449185005571
- 20 breadboard computer, based on Ben Eater's 6502 project https://www.reddit.com/r/beneater/comments/gbmv8u/inspired_by_bens_6502_project_ive_decided_to/#lightbox
- https://web.archive.org/web/20140717062700/http://coprolite.com:80/8048.html
- http://www.moria.de/~michael/comp/ecb/sbcmcs48/hardware.html
- https://github.com/romavis/metra-m1t380-doc
- https://www.delabs-circuits.com/cirdir/micro/micro4.html
- programmer https://www.sbprojects.net/projects/8049spy/index.php
- programmer https://minuszerodegrees.net/willem/Willem%20MCS-48%20adapter.htm
- programmer
  - original https://www.jelora.fr/post/2024/06/15/Programmateur-de-microcontrleur-Intel-MCS-48-experimental-sur-Arduino.html
  - translation https://www-jelora-fr.translate.goog/post/2024/06/15/Programmateur-de-microcontrleur-Intel-MCS-48-experimental-sur-Arduino.html?_x_tr_sl=fr&_x_tr_tl=en&_x_tr_hl=es&_x_tr_pto=wapp
  - had a "MAB 8048H" IC from Philips

- 8042 keyboard https://wiki.osdev.org/%228042%22_PS/2_Controller
  - CHMOS
  - Slave microcontroller (?)
  - OTP EPROM
  - UPI-42 family
    - UPI-C42
    - UPI-L42

- Reversing of Porsche computer https://jhnbyrn.github.io/951-KLR-PAGES/
- Used in
  - [[https://en.wikipedia.org/wiki/Magnavox_Odyssey_2][Magnavox's Oddysey 2]] video game console (1978)
  - Korg Trident Series
  - Korg Poly-61
  - Roland Jupiter-4
  - Roland Promars

* support chips

- mcs-80 peripherals https://en.wikipedia.org/wiki/Intel_8080#Support_chips
- mcs-85 peripherals https://en.wikipedia.org/wiki/Intel_8085#Periphery

|------+----+------------------------------------------------|
| 8214 |    | Priority Interrupt Control                     |
| 8224 |    | Clock Generator                                |
| [[https://web.archive.org/web/20200919134210/https://www.datasheets360.com/pdf/-4828066515233335508][8228]] | 28 | System Controller & Bus Driver                 |
| [[https://web.archive.org/web/20230918030959/https://www.datasheets360.com/pdf/-4828066515233335508][8238]] |    | "                                              |
| [[https://en.wikipedia.org/wiki/Intel_8251][8251]] | 28 | Communication Controller, USART                |
| [[https://en.wikipedia.org/wiki/Intel_8253][8253]] | 24 | Programmable Interval Timer, PITs              |
| 8259 |    | Programmable Interrupt Controller, handle IRQs |
|------+----+------------------------------------------------|

* tools

- HSE-49: Original Dev Board https://en.wikipedia.org/wiki/Intel_system_development_kit#HSE-49
- AS output to binary to be written into ROM https://linux.die.net/man/1/p2bin
- assemblers
  - asm48 https://github.com/daveho/asm48
  - fasm macros https://board.flatassembler.net/topic.php?t=18398
  - sbasm https://www.sbprojects.net/sbasm/8080.php
- VHDL https://github.com/devsaurus/t48
- ROM programmer story https://laughtonelectronics.com/oldsite/lab_oem/lab_mcs48.html
- https://jhnbyrn.github.io/951-KLR-PAGES/reading_code.html
- dumping ROM https://www.sbprojects.net/projects/8049spy/index.php
- dumping ROM https://www.eevblog.com/forum/projects/intel-mcs-48-(8749-8049)-hmos-vs-cmos-differences-bus-driver-(dumping-woe)/
- dissasembler ? https://github.com/pmackinlay/binaryninja-mcs48
  - for https://binary.ninja/
- KIT: internal EPROM programmer for UV ereasable ones
  - https://www.mattmillman.com/projects/hveprom-project/an-easy-to-build-mcs-48-8748-8749-8741-8742-8048-8049-programmer-reader/
  - https://www.mattmillman.com/projects/an-intel-mcs-48-based-dual-temperature-sensor/

* codebases

- https://github.com/marekw1986/8048/blob/main/code/ascii/ascii.asm
- korg trident mk2 https://github.com/wohali/polysix/blob/457212866bcf8875156f871fd5cc638a6e59b143/docs/klm8048.asm#L4
- game https://github.com/tcr/8bit-demos/
- pwm https://github.com/retiredfeline/8048-pwmctl
- ⭐ display https://github.com/retiredfeline/beckman-clock
- maze https://cdn.hackaday.io/files/19278824789952/maze.asm
- i2c https://github.com/retiredfeline/8042-clock/
- metronome https://github.com/retiredfeline/8042-metronome
- clock https://web.archive.org/web/20220630074502/https://www.wraith.sf.ca.us/8048/
  - source https://web.archive.org/web/20041210150149/http://www.wraith.sf.ca.us/8048/block-sig.asm
  - sheet https://web.archive.org/web/20210913152817/https://www.wraith.sf.ca.us/8048/clock-8048.gif

* articles

- https://www.cpu-world.com/Arch/8048.html
- 22 https://www.eejournal.com/article/a-history-of-early-microcontrollers-part-4-the-intel-8048-and-8748/
- 20 https://www.mattmillman.com/mcs-48-the-quest-for-16-bit-division-on-the-8-bit-cpu-which-cant-divide-anything/
  - discussion https://news.ycombinator.com/item?id=24941189
- 13 http://www.theresistornetwork.com/2013/07/programming-vintage-intel-mcs-48.html
  - Early Intel processors combine the address and data bits onto the same lines and use two signals:
    1) ALE  (Address Latch Enable)
    2) PSEN (Program Store Enable)
  - To signal what state the bus is in.
  - This was done to save costs and keep pin count down.
  - Unfortunately this complicates the connection to an external PROM.

* videos

- 21 video | Intro to Intel 8048 and PIC 16f1619
  https://www.youtube.com/watch?v=7TIBGRGaTB0

** 20 video | 8048 microcontroller experiments

- https://www.youtube.com/watch?v=K83uTnW6IHU
- https://github.com/daveho/RandomStuff/tree/master/Episode05

- Extra ICS used:
  - MAX708 reset generator
  - 74HC573 address latch
  - AT28C64E-15PC

- ROM programmed at factory (aka mask rom)
- But, if you tie EA (External Access input) pin high
  - it can work with external ROM
  - by using 2 IO pins on port 2 for external address/data acccess

- $ asm48 -o foo.bin foo.asm

- YT Comments
  - I tied EA pin 7 to ground to use internal ROM running with a 10Mhz crystal.
  - I see what you mean with getting the CPU to reset reliably, a 2k2 resistor to VCC with a 10uf cap to gnd seems to work ok, boots reliably on power-up.
  - The devices I have are NEC types programmed with an equally ancient Expro-60 device programmer using an ISO interface card. Indeed a lot of fun, regards.

**** Example 1: infinite loop of NOPs
#+begin_src asm
    .org 0x0
    reset:
            jmp entry
    .org 0x10
    entry:
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            jmp entry
#+end_src

**** Example 2: blink led
#+begin_src asm
  .org 0x0
  reset:
          jmp entry
  .org 0x10
  entry:
          mov A, #255  ; set all A bits to 1
          outl P1, A   ; output to port 1 (LED will be off)
          call delay
          move A, #0   ; set all A bits to 0
          outl P1, A   ; output to port 1 (LED will be ON)
          call delay
          jmp entry    ; repeat main loop
  delay:
          mov R0, #255 ; init outer loop counter
  delay_outer:
          mov R1, #255 ; init inner loop counter
  delay_inner:
          nop
          nop
          nop
          nop
          djnz R1, delay_inner ; dec inner count, continue if not zero
          djnz R0, delay_outer ; dec outer count, continue if not zero
          ret                  ; return to caller
#+end_src

**** Example 3: led + button to GND

- button
  - when pressed see 0
  - when released see 1, due pull up

#+begin_src asm
  .org 0x0
  reset:
          jmp entry

  .org 0x10
  entry:
          mov R0, #0xFF         ; R0 is value to output to P1

  loop:
          mov   A, R0           ; get value to output to P1
          outl P1,  A           ; output to P1

          in    A, P1           ; read P1
          anl   A, #0x80        ; see if high bit is set
          jnz buton_not_pressed

          ;; button is pressed
          mov R0, #0xFE         ; drive P1.0 low, LED is on
          jmp loop

  button_not_pressed:
          mov R0, #0xFF         ; drive P1.0 high, LED is off
#+end_src

**** Example 4: timer + light pattern P1.7 through P1.0

#+begin_src asm
  .equ pattern_array, 32 ; 33, 34
  .equ cycle_count  , 45 ; nr of cycles before interrupt

  .org 0x0
  reset:
          jmp entry
  .org 0x7
  timer_int:
          jmp timer_event
  .org 0x10
  entry:
          ;; initialize pattern_array
          mov  R0, #pattern_array
          mov @R0, #0x6D
          mov  R0, #pattern_array+1
          mov @R0, #0xB6
          mov  R0, #pattern_array+2
          mov @R0, #0xDB

          mov  R4, #cycle_count ; countdown value
          mov  R2, #0           ; is either: 0,1,2
          strt t                ; start timer
          en tcti               ; enable timer interrupt

   loop: ; copies R0 to P1
          mov  A, R0
          outl P1, A
          jmp  loop

   timer_event:
          djnz R4, timer_event_done ; check if countdown=0

          mov  R4, #cycle_count     ; reset countdown
          inc  R2                   ; increment pattern count
          mov   A, R2               ; move pattern count to A
          inc   A                   ; increment
          anl   A, #0x4             ; check if pattern=4
          jz    gen_pattern         ;  no, continue
          mov   R2, #0              ; yes, reset pattern count

   gen_pattern:
          mov A  , #pattern_array ; base address of pattern array
          add A  , R2             ; add offset to select element
          mov R1 , A              ; load element address to R1
          mov A  , @R1            ; retrieve element value
          mov R0 , A              ; copy element value to R0

   timer_event_done:
          retr
#+end_src
