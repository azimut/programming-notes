- Hardware https://www.raspberrypi.com/documentation/computers/raspberry-pi.html
- https://github.com/thibmaek/awesome-raspberry-pi
- Learning OS development using Linux kernel and Raspberry Pi
  https://github.com/s-matyukevich/raspberry-pi-os
- Raspberry Pi ARM based bare metal examples
  https://github.com/dwelch67/raspberrypi

* IO

- I2C
- SPI
- Serial
- GPIO: 3.3v, 18mA max
  - you will likely need a transistor
  - with a resistor in base calculated with Ohm's Law

* Models

- Zero W
  - 1GHz
  - 512Mb
- 3
  - 26 GPIO (3.3v)
  - No analog inputs
  - QUad-core Cortex A53 (1.2GHz)

* Libraries
** GPIO Zero

- OO Wrapper of RPi.GPIO

*** Input

#+begin_src python
  from gpiozero import *
  from time import sleep
  switch = Button(23) # automatic debouncing
  while True:
      print(switch.is_pressed)
      sleep(0.1)
#+end_src

*** Input callback

#+begin_src python
  from gpiozero import *
  from signal import pause

  def issue_warning():
      print("Please don't press this button again")

  switch = Button(23)
  switch.when_pressed = issue_warning # callback set
  pause()
#+end_src

*** Output

#+begin_src python
  from gpiozero import *
  led = LED(18)
  led.on()
  led.off()
  led.blink(0.1,0.1)
#+end_src

*** Output PWM

#+begin_src python
  from gpiozero import *
  led = PWMLED(18)
  led.value = 0.1
#+end_src


* Book: Operating Systems Foundations with Linux (2019)
Home: http://www.dcs.gla.ac.uk/operating-system-foundations/
Source: https://github.com/wimvanderbauwhede/OSH/
Solutions: http://www.dcs.gla.ac.uk/operating-system-foundations/solutions.html
** Foreword
- In 1983 author was modeling RISC processors on a simulator written in BBC Basic.
- Operative Systems must trade-off abstraction for efficiency.
- "The mind is not a vessel to be filled but a fire to be kindled." -- Plutarco
  "Learning isn't just reading source code; it's bootstrapping machines"
** Preface
- Topics to be covered:
  * Files
  * Scheduling
  * POSIX Threads
  * Networking
  * Arm/Kernel Memory managment.
