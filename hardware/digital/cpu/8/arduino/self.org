- https://www.microchip.com/wwwproducts/en/ATmega328P#datasheet-toggle
- https://www.arduino.cc/en/uploads/Main/arduino-uno-schematic.pdf
- Stop auto-reset of arduino on connection
  - 10uF capacitor between reset and gnd (or 100nF ceramic capacitor)
  - 120ohm resistor between 5v and reset pin (or 110-124)
  https://playground.arduino.cc/Main/DisablingAutoResetOnSerialConnection/

* How GPIO works?

#+begin_src
---------(V+)----------
             |
PE-----------< (Q1)
             |
             z
      |\     z
OE----| \____|
O ----| /    |
      |/     |---- GPIO
I -----------|
#+end_src

- I  = Input
- O  = Output
- OE = Output enable (=OUTPUT= on pinMode())
- PE = Pull-up resistor enable (=INPUT_PULLUP= on pinMode())
- Q1 = MOSFET?, keeps input stable

- 5v, 40mA max
- analogRead()
- analogWrite() - PWM Output
  - produces a series of pulses
  - changing the duration of the pulse
  [[https://docs.arduino.cc/54ef6da144b4531dd9ada686a7e67c56/pwm.gif]]

* Models

- Arduino
  - Leonardo
    - chip has built in usb interface, can emulate keyboard or mouse
  - Mega
  - Nano
  - Pro-mini (needs a programmer)

- Compatible
  - Teensy
  - NodeMCU
  - MonkMakesDuino

** Uno
#+ATTR_ORG: :width 400
[[https://res.cloudinary.com/practicaldev/image/fetch/s--cCmipZlc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/778713k4efamdbandco8.png]]

- ATmega328p
- USB to TTL
- 2 voltage regulators: 5v and 3.3v
- LM358: dual opamp
  1) [[https://forum.arduino.cc/t/uno-rev-3-what-is-the-lm358-for/125822][as a voltage comparator]], between USB and Vin, to know the power source
  2) buffers D13, removing the load created by the L LED and its current limiting resistor.

* language
https://www.arduino.cc/reference/en/
** types

- [[https://www.arduino.cc/reference/en/language/variables/data-types/array][array]]
- [[https://www.arduino.cc/reference/en/language/variables/data-types/string][string]]
- [[https://www.arduino.cc/reference/en/language/variables/data-types/stringobject/][String()]]
- [[https://www.arduino.cc/reference/en/language/variables/data-types/void][void]]

|-----+-----------------+----------------+---------------+---------------------------|
| <c> |                 |            <r> |           <r> |                           |
| bit | type / cast     |            min |           max |                           |
|-----+-----------------+----------------+---------------+---------------------------|
|  -  | [[https://www.arduino.cc/reference/en/language/variables/data-types/boolean][boolean]]         |              - |             - | alias of "bool"           |
|  8  | [[https://www.arduino.cc/reference/en/language/variables/data-types/bool][bool]]            |           true |         false |                           |
|  8  | [[https://www.arduino.cc/reference/en/language/variables/data-types/char][char()]]          |           -127 |           127 | eg: 'A', 20               |
|  8  | [[https://www.arduino.cc/reference/en/language/variables/data-types/unsignedchar][unsigned char]]   |              0 |           255 |                           |
|  8  | [[https://www.arduino.cc/reference/en/language/variables/data-types/byte][byte()]]          |              0 |           255 |                           |
| 16  | [[https://www.arduino.cc/reference/en/language/variables/data-types/word][word()]]          |              0 |        65,535 |                           |
| 16* | [[https://www.arduino.cc/reference/en/language/variables/data-types/unsignedint][(unsigned int)]]  |              0 |        65,535 |                           |
| 16  | [[https://www.arduino.cc/reference/en/language/variables/data-types/short][short]]           |        -32,768 |        32,767 |                           |
| 16* | [[https://www.arduino.cc/reference/en/language/variables/data-types/int][int()]]           |        -32,768 |        32,767 |                           |
| 32  | [[https://www.arduino.cc/reference/en/language/variables/data-types/long][long()]]          | -2,147,483,648 | 2,147,483,648 |                           |
| 32  | [[https://www.arduino.cc/reference/en/language/variables/data-types/unsignedlong][(unsigned long)]] |              0 | 4,294,967,295 |                           |
| 32  | [[https://www.arduino.cc/reference/en/language/variables/data-types/float][float()]]         | -3.4028235E+38 | 3.4028235E+38 | 6~7 decimals of precision |
| 64  | [[https://www.arduino.cc/reference/en/language/variables/data-types/double][double]]          |                |               |                           |
|  ?  | [[https://www.arduino.cc/reference/en/language/variables/data-types/size_t][size_t]]          |              0 |             ? | represent size in bytes   |
|-----+-----------------+----------------+---------------+---------------------------|

** shiftOut()

- docs https://www.arduino.cc/reference/en/language/functions/advanced-io/shiftout/
- other custom versions https://forum.arduino.cc/t/anyone-know-the-code-for-the-shiftout-function/45638/13

#+FILENAME: wiring_shift.c
#+begin_src c
  void
  shiftOut(uint8_t dataPin,
           uint8_t clockPin,
           uint8_t bitOrder,
           uint8_t val)
  {
    uint8_t i;
    for (i = 0; i < 8; i++)  {
      if (bitOrder == LSBFIRST)
        digitalWrite(dataPin, !!(val & (1 << i)));
      else
        digitalWrite(dataPin, !!(val & (1 << (7 - i))));
      digitalWrite(clockPin, HIGH);
      digitalWrite(clockPin, LOW);
    }
  }
#+end_src

* qemu-avr

- https://raw.githubusercontent.com/qemu/qemu/e75941331e4cdc05878119e08635ace437aae721/scripts/qemu-binfmt-conf.sh
- https://qemu.readthedocs.io/en/latest/system/target-avr.html
  https://yeah.nah.nz/embedded/qemu-avr/
  https://patchwork.kernel.org/project/qemu-devel/patch/20200123000307.11541-15-richard.henderson@linaro.org/
  https://www.youtube.com/watch?v=3yP3QOT-h98

* Course: Arduino Lessons - Paul McWorther
https://www.youtube.com/playlist?list=PLGs0VKk2DiYx6CMdOQR_hmJ2NbB4mZQn-
* 3rd Projects
- https://github.com/Lembed/Awesome-arduino
- https://github.com/FortySevenEffects/arduino_midi_library
- https://github.com/thomasfredericks/Bounce2
- https://github.com/jandelgado/jled
- https://www.youtube.com/c/Seytonic/playlists
- https://github.com/mlochen/mouse-scanner/
- https://github.com/Avamander/arduino-tvout/
* Tutorial
** Digital Pins
  - All(almost) pins can be used as Digital pins.
  - All default to inputs.
  - IO
    |        | impedance | IO         | comment                                   |
    |--------+-----------+------------+-------------------------------------------|
    | Input  | high      | 100 megohm | can get weird lectures when not connected |
    | Output | low       | 40 mA      | Adviced to use a 470ohm or 1k resistor    |
  - Pull up/down inputs, to get reliable value
    |           | connected to | resistor |
    | pull-up   | 5V+          | 10K      |
    | pull-down | ground       | 10K      |
*** INPUT_PULLUP
  - buildin 20K resitors can be used on INPUT_PULLUP mode
  - read gets inverted
  |              | HIGH | LOW |
  | INPUT        | on   | off |
  | INPUT_PULLUP | off  | on  |
  - most value of 20k立 and 50k立. On the Arduino Due, it is between 50k立 and 150k立.
  - The other end should be connected to ground. In the case of a simple switch,
    this causes the pin to read HIGH when the switch is open, and LOW when the switch is
    pressed.
  - pin13 has the led attached, so it gives 1.7V instead of 5V, so if you use the internal
    pullup resistor it will always be LOW so use an external resistor for it
** Analog pins
- Has 6 (8mini/nano and 16 on the mega) A/D (analog digital) converter
- Values 0-1023 (10 bit depth)
- GPIO: general purpose IO (aka digital pins)
** Memory
- ATMega328
  | Flash  | 32k | .5k bootloader |
  | SRAM   | 2k  |                |
  | EEPROM | 1K  |                |
- Is easy to run out of SRAM, by using strings or []int instead of []byte
- Use Flash memory with PROGMEM
* arduino-cli
https://github.com/arduino/arduino-cli
** Getting started
- https://arduino.github.io/arduino-cli/latest/getting-started/
  > arduino-cli config init
  > arduino-cli core update-index
* Emacs packages
** arduino-cli-mode   20200615.919  available  melpa      Arduino-CLI command wrapper
https://github.com/motform/arduino-cli-mode
https://github.com/arduino/arduino-cli
Compile         	C-c C-a c
Upload           	C-c C-a u
Compile and Upload 	C-c C-a b
List Connected Boards 	C-c C-a l
Create new sketch 	C-c C-a n
Install a Library 	C-c C-a i
Uninstall a Library 	C-c C-a u
** arduino-mode       20180509.36   available  melpa      Major mode for editing Arduino code.
https://github.com/stardiviner/arduino-mode
Uses arduino ide command *arduino* to *--upload* and *--verify*
  - syntax highlighting
  - command-line arduino interface
  - org-mode babel support
  - flycheck
Upload
    In Arduino source code file, press [C-c C-c] to upload to Arduino board.
Build
    In Arduino source code file, press [C-c C-v] to build.
** company-arduino    20160306.1739 available  melpa      company-mode for Arduino
https://github.com/yuutayamada/company-arduino/
This package is a set of configuration to let you auto-completion by using:
 - irony-mode
 - company-irony
 - company-c-headers on arduino-mode.
* UIless compile

- https://create.arduino.cc/projecthub/milanistef/introduction-to-bare-metal-programming-in-arduino-uno-f3e2b4
*avr-gcc* compiler and *avrdude* to upload
avr-gcc > OBJECT > avr-gcc > ELF > avr-objcopy > BIN > avrdude

* Serial

https://playground.arduino.cc/Main/DisablingAutoResetOnSerialConnection/
https://wiki.archlinux.org/index.php/Arduino
#+begin_src shell
  stty -F /dev/ttyACM0 cs8 9600 ignbrk -brkint -imaxbel -opost -onlcr -isig -icanon -iexten -echo -echoe -echok -echoctl -echoke noflsh -ixon -crtscts
#+end_src

* avrdude https://github.com/sigmike/avrdude (dnf)
  "AVRDUDE is software for programming Atmel AVR Microcontrollers."
  #+name: avr -?
  -b 115200
#+begin_src
[~/texts/electro] > avrdude -?
Usage: avrdude [options]
Options:
  -p <partno>                Required. Specify AVR device.
  -b <baudrate>              Override RS-232 baud rate.
  -B <bitclock>              Specify JTAG/STK500v2 bit clock period (us).
  -C <config-file>           Specify location of configuration file.
  -c <programmer>            Specify programmer type.
  -D                         Disable auto erase for flash memory
  -i <delay>                 ISP Clock Delay [in microseconds]
  -P <port>                  Specify connection port.
  -F                         Override invalid signature check.
  -e                         Perform a chip erase.
  -O                         Perform RC oscillator calibration (see AVR053).
  -U <memtype>:r|w|v:<filename>[:format]
                             Memory operation specification.
                             Multiple -U options are allowed, each request
                             is performed in the order specified.
  -n                         Do not write anything to the device.
  -V                         Do not verify.
  -u                         Disable safemode, default when running from a script.
  -s                         Silent safemode operation, will not ask you if
                             fuses should be changed back.
  -t                         Enter terminal mode.
  -E <exitspec>[,<exitspec>] List programmer exit specifications.
  -x <extended_param>        Pass <extended_param> to programmer.
  -y                         Count # erase cycles in EEPROM.
  -Y <number>                Initialize erase cycle # in EEPROM.
  -v                         Verbose output. -v -v for more.
  -q                         Quell progress output. -q -q for less.
  -l logfile                 Use logfile rather than stderr for diagnostics.
  -?                         Display this usage.

avrdude version 6.3, URL: <http://savannah.nongnu.org/projects/avrdude/>
#+end_src

** avrdudess https://github.com/zkemble/AVRDUDESS
UI for avrdude, C#, can run with MONO...
[[./avrdudess.png]]

