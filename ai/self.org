#+STARTUP: latexpreview
#+OPTIONS: tex:t

- Words
  - Ground Truth = real life observations
  - Model = our prediction f(x)
  - Loss = prediction's error rate with our Ground Truth
  - Bias = a shift
  - Training =
    - first phase of a ML system
  - Classification =
    - result is a categorical label
    - a type of prediction
      - final phase of a ML system
  - Sigmoid
    - fn in the [0:1] range
  - Hyperparameters = parameters to our train()
  - Hyperspaces = aka >3D dimensional spaces
  - Mean Squared Error = a way to calculate Loss
  - Log Loss = a way to calculate loss, works better with Sigmoid
  - Gradient Descent = a way to search for the minimum to our loss() aka train()
    - Gradient = curve of the loss
    - Partial Derivatives = a way to calculate Gradient Descend with multiple variables

- Types:
  - ~Reinforment Learning~: we want to optimize something
    - we only know in *relative* terms how good/bad a solution is
    - eg: an AI that "learns" to play a game by playing
  - ~Supervised Learning~: we provide *labeled* data.
    - By =function approximation= f(x)
    - A label can be a value.
    - Divided in phases:
      1. Training: finding f(x)
      2. Prediction: using f(x)
    - Linear Regression: w=weight b=bias
      $${y} = {x}*{w} + {b}$$
    - Multiple Linear Regression: for multiple inputs +1
      $${y} = {x_1}{w_1} + {x_2}{w_2} + {...} + {b}$$

- ~Unsupervised Learning~: from *unlabeled* data
  - it learns about the relationships between the inputs provided.
  - Used for _clustering_ into groups.
  - Used to improve the quality of data.
  - Used for compress data.

- article: https://karpathy.github.io/2019/04/25/recipe/
- course: pragmatic data science https://www.youtube.com/playlist?list=PLjxbCynJ0Gd8k75-zdMcqcEbH90jfk9eg
- article: llm agent https://tadeodonegana.com/posts/building-agents-my-notes/
- DataSets
  - https://en.wikipedia.org/wiki/List_of_datasets_for_machine-learning_research
  - https://en.wikipedia.org/wiki/Iris_flower_data_set
  - https://en.wikipedia.org/wiki/MNIST_database
  - https://en.wikipedia.org/wiki/ImageNet
  - https://github.com/several27/FakeNewsCorpus

- deep learning https://www.youtube.com/playlist?list=PLoROMvodv4rPOWA-omMM6STXaWW4FvJT8
- https://github.com/AudioLLMs/AudioLLM
- Course: Introduction to ML https://www.youtube.com/playlist?list=PLuh62Q4Sv7BUhFs1KpeVctFmOYpTTxj33
- Course: intro for probability for cs https://www.youtube.com/playlist?list=PLoROMvodv4rOpr_A7B9SriE_iZmkanvUg
- Course: zero to neural networks https://www.youtube.com/@datacorelinux/videos
- https://microsoft.github.io/generative-ai-for-beginners/#/
- books https://github.com/aridiosilva/AI_Books/
- https://uvadlc-notebooks.readthedocs.io/en/latest/index.html
- Course: Neural Networks https://karpathy.ai/zero-to-hero.html
  - Neural Networks: Zero to Hero  https://www.youtube.com/playlist?list=PLAqhIrjkxbuWI23v9cThsA9GvCAUhRvKZ
- Video:  How to Create a Neural Network (and Train it to Identify Doodles)
  https://www.youtube.com/watch?v=hfMk-kjRv4c
- MIT 6.S191 Introduction to Deep Learning https://www.youtube.com/playlist?list=PLtBw6njQRU-rwp5__7C0oIVt26ZgjG9NI
- MIT Self Driving Lectures https://www.youtube.com/playlist?list=PLrAXtmErZgOeY0lkVCIVafdGFOTi45amq
- https://stackoverflow.blog/2022/04/21/the-robots-are-coming-for-the-boring-parts-of-your-job/?cb=1
- Standford Machine Learning Andrew NG https://www.youtube.com/watch?v=jGwO_UgTS7I&list=PLoROMvodv4rMiGQp3WXShtMGgzqpfVfbU&index=1
- Course: 2020 Cornell CS 5787: Applied Machine Learning.
  https://www.youtube.com/playlist?list=PL2UML_KCiC0UlY7iCQDSiGDMovaupqc83
- NN https://www.youtube.com/playlist?list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi
- MIT RES.LL-005 Mathematics of Big Data and Machine Learning, IAP 2020
  https://www.youtube.com/watch?v=t4K6lney7Zw
- Video: Information Thoery, Pattern Recognition, and Neural Networks
  https://www.youtube.com/playlist?list=PLruBu5BI5n4aFpG32iMbdWoRVAA-Vcso6
- https://www.youtube.com/user/mathematicalmonk/videos
- Video Channel
  https://www.youtube.com/c/ShashankKalanithiData/videos
- Video: Conal Elliott: Can Tensor Programming Be Liberated from the Fortran Data Paradigm?
  https://www.youtube.com/watch?v=oaIMMclGuog
  https://github.com/conal/talk-2021-can-tensor-programming-be-liberated
- Deep Learning Book Lectures https://www.youtube.com/c/AlenaKruchkova/videos
- MIT http://introtodeeplearning.com/
  https://www.youtube.com/playlist?list=PLtBw6njQRU-rwp5__7C0oIVt26ZgjG9NI
- (Welch Labs) Neural Networks Demystified https://www.youtube.com/playlist?list=PLiaHhY2iBX9hdHaRr6b7XevZtgZRa1PoU
- http://karpathy.github.io/neuralnets/
- Andrew Ng https://www.coursera.org/learn/machine-learning
- CS231n: Convolutional Neural Networks for Visual Recognition http://vision.stanford.edu/teaching/cs231n/
- https://twitter.com/cfiesler/status/1336317217034612737
  Algorithms of Oppresion
  The Age of Surveillance Capitalism
  Race After Technology
  Weapons of Math Destruction
  Automating Inequality
  Technically Wrong
  Ghost Work
  Design Justice
- https://ml4code.github.io/papers.html
- https://medium.com/@satnalikamayank12/on-automated-generation-of-commit-messages-from-code-differences-7ab205ae580
- Deeplearning - Udacity - https://www.youtube.com/playlist?list=PLAwxTw4SYaPn_OWPFT9ulXLuQrImzHfOV
- https://www.edx.org/course/artificial-intelligence-for-everyone?source=aw&awc=6798_1596893433_4b4c0888ce9c6d92a5a2ae929d88d9c7&utm_source=aw&utm_medium=affiliate_partner&utm_content=text-link&utm_term=301045_https%3A%2F%2Fwww.class-central.com%2F
- [Coursera] Neural Networks for Machine Learning — Geoffrey Hinton
  https://www.youtube.com/playlist?list=PLoRl3Ht4JOcdU872GhiYWf6jwrk_SNhz9
- Vincent Warmerdam: Winning with Simple, even Linear, Models | PyData London 2018
  https://www.youtube.com/watch?v=68ABAU_V8qI
- https://github.com/mrdbourke/machine-learning-roadmap
- https://github.com/visenger/awesome-mlops
- CS50's Introduction to Artificial Intelligence with Python 2020
  https://www.youtube.com/playlist?list=PLhQjrBD2T382Nz7z1AEXmioc27axa19Kv
- NARDOZ MARZO - Fairness en Machine Learning + Testing en desarrollo de software
  https://www.youtube.com/watch?v=rrwrornKhjM
- https://github.com/mitmath/18337
- Toward ethical, transparent and fair AI/ML:
  a critical reading list for engineers, designers, and policy makers
  https://github.com/rockita/criticalML
- https://www.youtube.com/playlist?list=pll8olhzgyoq7bkvburthesalr7bonzbxs
- channel https://www.youtube.com/@vlavrenko/playlists
  - neural networls and backpropagation https://www.youtube.com/watch?v=jzyz0eupybi&list=plbv09bd7ez_4bs9j3o8l_ztjqzon_3oqs

* channels
- will kwan https://www.youtube.com/c/willkwan/videos
- instituto de calculo secretaria https://www.youtube.com/channel/uczcbeanqeihofbrbdyx1nea
- https://www.youtube.com/c/sirajraval/videos
- https://www.youtube.com/c/yannickilcher/videos
- https://www.youtube.com/user/ministeriodeciencia/videos
- https://www.youtube.com/channel/ucfxnrdbm1yrv9j2mb8aiy4q
* video: practical deep learning for coders (2020)
https://www.youtube.com/playlist?list=plfyubjixbdtrl3fmb3gowhri8ieu6fhfm
** lesson 1 https://www.youtube.com/watch?v=_quexshfsa0
- neural networks have limited range of things it can do with 1 layer (by minsky research)
- but with more layers the problem is solved (also by minsky)
- people used just 2 layers which limited performance
- usinge more layers makes it "deep" learning

* video: 2011 - machine learning for the web - hilary mason
** 1 introduction
- classification problems:
  - clustering of categorical data
  - named entity disambiguation: separate different entities (similar)
- recommendation systems
- special data (uses domain knowledge)
  - geographic
  - timeseries
- approaches from:
  - having data
  - having a problem
  - have infrastructure
- methodology:
  1) obtain
  2) scrub
  3) explore
  4) model
  5) interpret
** 2 classifying web documents - the theory
- problems harder to classify (write logic)
- supervised learning
  - examples:
    - spam classification
    - language identification
    - face detection
- book: "data source handbook"
- nyt has <meta> tags with information about the article.

* book: 2019 | grokking deep learning                    | andrew w. trask
https://github.com/iamtrask/grokking-deep-learning
* book: 2021 | loving common lisp                        | mark watson
** backpropagation neural networks
- trained by  applying training inputs to the networks
- compare differences/errors between
  1) propagated values
  2) training data values
- we magnitude of these errors are used to adjust the weights in the network
- some problems while trying to find "good enough" weights
  1) (randomness) sometimes he accumulated error at a *local minimum* is too large, is best to restart the training
  2) (memory) if we have enough *memory* and with not enough data, we might just memorize the training data.
     memory=weights. start using a small network.
- the ~activation values~ of individual neurons are limited to the range [0,1].
  - sum of the activation values of neurons in the previous layer *times* the values of the connecting weights and then
    using *sigmoid* function to map the sums to desired range.
* book: 2021 | deep learning: a visual approach          | andrew glassner
  https://nostarch.com/deep-learning-visual-approach
  https://github.com/blueberrymusic/deep-learning-a-visual-approach (scikit-learn)
** introduction
- know, stats (to know how to describe the "patterns" in the data)
- know, ~bayes~ (to know the likelihood an algorithm is correct)
- know, it (information theory) to measure kinds of information
- do, machine learning classification to explore the data we have before dl
- know, ensambles of different ml systems instead of a big one, sometimes is better
- ~backpropagation~ (a way of training) and ~optizers~ (modifies the network numbers)
- ~convnet~ (convolution neural networks) made to handle spatial data, like images. like recognizing objects.
- ~autoencoders~ simplify datasets, or clean images (?
- ~recurrent neural networks~ for sequences (text or audio)
- ~attention and transformers~ to interpret and generate text
- ~reinforment learning~ ?
- ~generative adversarial networks~ to generate data
** part 1
** 1 an overview of machine learning
- our goal (with ml) is to discover *meaningful* information,
  where is up to us decide what's *meaninful*.
- ~expert systems~: we create rules from what the experts tells us. feature engineering.
- ~supervised learning~: we provide *labeled* data.
  when the system gets enough right answers for our needs we can say it is *trained*
- ~unsupervised learning~: it learns about the relationships between the inputs provided.
  used for clustering into groups.
  used to improve the quality of data.
  used for compress data.
- ~reinforment learning~ when we search to optimize (? something, but we don't know how.
  while we judge how good or bad the algorthim is in relative terms. ("probably good", "better than the last one")
  it can be always searching with new data, while using the "best" solution found.
- ~deep learning~ uses a series of steps or *layers* for computation
- neurons turn input value into a number.
  neurons stay the same, what can change is the input and weights
  initial weights are random.
  loop -> weights are adjusted carefully by a small ammount. and output is judged.
  neurons converge into looking for *features* although we never told him to.
** 2 essential statistics
* book: 2020 | programming ml from coding to dl          | paolo perrotta

- home https://pragprog.com/titles/pplearn/programming-machine-learning/
- forum https://devtalk.com/books/programming-machine-learning/
- source https://github.com/nusco/progml-code
- bonus
  - chap 4 https://nusco.medium.com/of-gradients-and-matrices-1b19de65e5cd
  - chap 5 [[https://levelup.gitconnected.com/the-problem-with-accuracy-3670891b908e][The Problem with Accuracy]]

** Hands On:
1) ?
2) change lr
   - try very small and large values, what happens?
   - what we gain and lose?
3) increase lr from 0.001,
   - notice how at some point loss starts increasing
4) use data/life-expectancy
5) print weights, besides bias, what does they tell us?
   which column has the biggest impact?
** 1 how machine learning works

#+begin_src sh
  $ pip3 install numpy==1.15.2
  $ pip3 install matplotlib==3.1.2
  $ pip3 install seaborn==0.9.0
#+end_src

[[https://news.stanford.edu/2017/11/15/algorithm-outperforms-radiologists-diagnosing-pneumonia/][example of a machine learning solution]]

** 2 your first learning program

We want to predict:
- How many pizzas we need to prepare?
- Given certain amount of reservations (INPUT)

We try to find the line that more closely approximates the relationship.
#+caption: w=weight b=bias
#+begin_src src
  ŷ = x * w + b
#+end_src

*** code: pizzas per reservations

#+begin_src python
  x, y = np.loadtxt("pizza.txt", skiprows=1, unpack=true)

  # x = input var, restaurant reservations
  # w = weight
  def predict(x, w): # our model
      return x * w

  # y = ground truth, pizzas bought
  def loss(x, y, w): # = Mean Squared Error
      return np.average((predict(x,w) - y) ** 2)

  # Returns a new w(eight)
  # lr = learning rate, step
  def train(x, y, iterations, lr):
      w = 0 # arbitrary init value
      for i in range(iterations):
          current_loss = loss(x, y, w)
          print("iteration %4d => loss: %.6f" % (i, current_loss))
          if loss(x, y, w + lr) < current_loss:
              w += lr
          elif loss(x, y, w - lr) < current_loss:
              w -= lr
          else:
              return w
      raise exception("couldn't converge within %d iterations" % iterations)
#+end_src

*** code: adding a bias

#+begin_src python
  def predict(x, w, b): # our model
      return x * w + b

  def loss(x, y, w, b): # Mean Squared Error
      return np.average((predict(x,w,b) - y) ** 2)

  def train(x, y, iterations, lr):
      w = b = 0
      for i in range(iterations):
          current_loss = loss(x, y, w, b)
          if   loss(x,y,w+lr,b) < current_loss:
              w += lr
          elif loss(x,y,w-lr,b) < current_loss:
              w -= lr
          elif loss(x,y,w,b+lr) < current_loss:
              b += lr
          elif loss(x,y,w,b-lr) < current_loss:
              b -= lr
          else:
              return w, b
      raise exception("couldn't converge within %d iterations" % iterations)
#+end_src

*** extra: plot code

#+begin_src python
  import numpy as np
  import matplotlib.pyplot as plt
  import seaborn as sns

  sns.set()
  plt.axis([0,50,0,50])
  plt.xticks(fontsize=15)
  plt.yticks(fontsize=15)
  plt.xlabel("reservations", fontsize=30)
  plt.ylabel("pizza", fontsize=30)
  x, y = np.loadtxt("pizza.txt", skiprows=1, unpack=true)
  plt.plot(x,y,"bo")
  plt.show()
#+end_src

** 3 walking the gradient

*** Our Algorithm doesn't cut it

- Problems with our current =train()=
  1) doesn't scale well (cpu/time) when adding new _hyperparameters_ (INPUTS)
  2) is NOT precise, since _hyperparameters_ are defined in *lr* terms

- observation:
  - a plot of loss(), when b=0, looks like a U curve

- Solution: 𝛿l/𝛿w - =Gradient Descent=
  - to measure the gradient
  -"the derivative of the loss with respect to the weight"
  - derivative on point is <0, if loss decr when w does it
  - derivative on point is >0, if loss incr when w does it
  - derivative on point is  0, if is a minimum

*** A Sprinkle Of Math

#+CAPTION: Loss = Mean Squared Error of our model
$$L = \frac{1}{m} \sum_{i=1}^{m} (({wx_i}+{b}) - {y_i})^2$$

Where $${m}$$ is the number of examples.

#+CAPTION: partial derivative of L, with respect to w, pretending b is constant
$$\frac{\partial{L}}{\partial{w}} = \frac{2}{m} \sum_{i=1}^{m} {x_i} (({wx_i}+{b}) - {y_i})$$

*** Downhill Riding

#+begin_src python
  def gradient(X,Y,w):
      return 2 * np.average(X * (predict(X,w,0) - Y))

  def train(X,Y,iterations,lr):
      w = 0
      for i in range(iterations):   # no ifs
          print("Iteration: %4d => Loss: %.10f" %
                (i, loss(X,Y,w,0)))
          w -= gradient(X,Y,w) * lr # opposite direction of gradient()
      return w                      # no early return
#+end_src

- found good hyperparameters (by trial&error)
  - iterations=100
  - lr=0.001
  - w=1.8436928702

*** Escape from Flatland

- if we consider $${b}\neq0$$
- loss() becomes a 3D surface
- =Partial Derivatives=
  - a way to calculate *Gradient Descend* for multiple INPUT variables
  - by first calculating the gradient of a lower dimension "slice"
  - then combining the slices to get the gradient of the surface

#+CAPTION: derivative, now pretending w is constant
$$\frac{\partial{L}}{\partial{b}} = \\
  \frac{2}{m} \sum_{i=1}^{m} (({wx_i}+{b}) - {y_i})$$

*** Putting =Gradient Descent= To The Test

#+begin_src python
  def gradient(X,Y,w,b):
      w_gradient = 2 * np.average(X * (predict(X,w,b) - Y))
      b_gradient = 2 * np.average(    (predict(X,w,b) - Y))
      return (w_gradient, b_gradient)

  def train(X,Y,iterations, lr):
      for i in range(iterations):
          print("Iteration: %4d => Loss: %.10f" %
                (i, loss(X,Y,w,b)))
          w_gradient, b_gradient = gradient(X,Y,w,b)
          w -= w_gradient * lr
          b -= b_gradient * lr
      return w, b

  w, b = train(X,Y,iterations=20_000,lr=0.001) # less iterations
  print("|nw=%.10f, b=%.10f" % (w,b))          # more precise
  print("Prediction: x=%d => y=%.2f" %
        (20, predict(20,w,b)))
#+end_src

*** When =Gradient Descent= Fails

- Problems:
  - There is no guarantee that is the shortest path
  - It might miss the target completely
  - Can get confused with sudden loss() surface cliffs
  - Can get stuck on a local minimum

- loss() surface should be:
  - convex: no bumps
  - continuous: no cliffs or gaps
  - differentiable: smooth, without cusps

- ergo:
  - mean absolute < mean squared

** 4 Hyperspace!

- =Multiple Linear Regression=
  $${y} = {x_1}{w_1} + {x_2}{w_2} + {...} + {b}$$
  - for more than 1 input
  - aka weighted sum of the inputs

*** Matrix Math

- Matrix sizes: big, uneven
- Matrix operations:
  - multiplication
    - order matters
    - if m1.cols = m2.rows
    - if inner dimensions are equal
    - (4,3) * (3,2) = (4,2)
  - transpose
    - flip it around diagonal \
    - rows become columns
    - columns become rows
    - T(4,3) = (3,4)

*** Code

- we make the input a single big matrix
- TIP: avoid mixing numpy matrixes and 1D arrays

#+begin_src python
  import numpy as np

  x1,x2,x3,y = np.loadtxt("pizza_3_vars.txt", skiprows=1, unpack=True)
  bias = np.ones(x1.size)
  X = np.column_stack((bias,x1,x2,x3))
  Y = y.reshape(-1,1)
  w = train(X,Y,iterations=100_000,lr=0.001)

  print("\nWeights: %s" % w.T) # bias w0 w1 w2
  print("\nA few predictions:")
  for i in range(5):
      print("X[%d] -> %.4f (label: %d)" %
            (i, predict(X[i],w), Y[i]))

  # predict() now becomes a matrix multiplication
  # X - a matrix (m,n)
  #   , m = # of examples
  #   , n = # of input vars
  def predict(X,w):
      return np.matmul(X,w)

  def loss(X,Y,w):     # Y - Ground Truth, (m,1)
      return np.average((predict(X,w)-Y)**2)

  def gradient(X,Y,w): # no change
      return 2 * np.matmul(X.T, (predict(X,w)-Y)) / X.shape[0]

  def train():
      w = np.zeros((X.shape[1], 1))
      for i in range(iterations):
          print("Iteration %4d => Loss: %.20f" %
                (i, loss(X,Y,w)))
          w -= gradient(X,Y,w) * lr
      return w
#+end_src

** 5 A Discerning Machine

- =Classifier=
  - a program that assigns data
  - to one of a limited number of classes
  - instead of _numerical labels_
  - works with _categorical labels_
  - =Binary Classifier=
    - only recognizes 2 classes

*** Where Linear Regression fails

Scenario: we want to predict if we get a police noise complain (a boolean).

With Linear Regression
- We assume that the data points are roughly alined to begin with.
- If they arranged in a curve or scattered randomly, we cannot approximate them with a line.
- Prediction is unstable in the case of outliers

*** Invasion of the =Sigmoids=

- =Logistic Regression=
  - To adapt our Linear Regresion for Binary Classification

- =Logistic Function=
  $$\sigma({z}) = \frac{1}{1+e^{-z}}$$
  - Belongs to the =Sigmoid= family of fn's
  - fn that restrict predictions in [0,1] range
  - works well with =Gradient Descent=
    1) smooth
    2) without flat areas (=0)
    3) without gaps (without undefined values)

#+begin_src gnuplot :exports results :file sigmoid.png
  reset
  set key textcolor "white"
  set terminal png background rgb "black"
  set border 3 linecolor "white"; set grid
  set xrange [-10:+10]; set yrange [-0.5:1.5]
  e = exp(1)
  f(x) = 1/(1+e**(-x))
  plot f(x) title "1/(1+e**(-x))" with lines lc rgb "white"
#+end_src

#+CAPTION: logistic function, aka sigmoid function
#+ATTR_ORG: :width 500
#+RESULTS:
[[file:sigmoid.png]]

*** Confidence and doubt

#+begin_src python
  def sigmoid(z):
      return 1 / (1 + np.exp(-z))

  def forward(X,w):  # predict() ran on training
      weighted_sum = np.matmul(X,w)
      return sigmoid(weighted_sum)

  def classify(X,w): # predict() ran on classification
      return np.round(forward(X,w))
#+end_src

*** Smoothing it out

#+CAPTION: calling our new model with Mean Squared Error
#+begin_src python
  def mse_loss(X,Y,w):
      return np.average((forward(X,w) - Y) ** 2)
#+end_src

*Sigmoid* made *Gradient Descent* less reliable.
Resulting surface is irregular with local minima everywhere.

We replace =Mean Squared Error= with =Log Loss=

\[
L =
-\frac{1}{m}
\sum_{i=1}^{m}
(({y_i} \cdot \log(y'_i)) +
 ((1-y_i) \cdot \log(1-y'_i)))
\]

#+begin_src python
  def loss(X,Y,w):
      y_hat = forward(X,w)
      first_term =       Y  * np.log(y_hat)
      second_term = (1 - Y) * np.log(1 - y_hat)
      return -np.average(first_term + second_term)
#+end_src

*** Updating the Gradient

#+CAPTION: Log Loss partial derivative
\[
\frac{\partial{L}}{\partial{w}} =
\frac{1}{m} \sum_{i=1}^{m} {x_i} ({y'_i}-{y_i})
\]


#+begin_src python
  def gradient(X,Y,w):
      return np.matmul(X.T, (forward(X,w) - Y)) / X.shape[0]
#+end_src

*** What happened to the model function?

#+begin_src gnuplot :exports results :file classify.png
  reset
  set key textcolor "white"
  set terminal png background rgb "black"
  set border 3 linecolor "white"; set grid
  set xrange [-10:+10]; set yrange [-0.5:1.5]
  e = exp(1)
  f(x) = 1/(1+e**(-x))
  plot f(x) title "1/(1+e**(-x))" with lines lc rgb "white", f(x) > 0.5 ? 1 : 0
#+end_src

#+CAPTION: forward() vs classify()
#+ATTR_ORG: :width 500
#+RESULTS:
[[file:classify.png]]

*** Classification in Action

#+CAPTION: load and train()
#+begin_src python
  def train(X,Y,iterations,lr):
      w = np.zeros((X.shape[1], 1))
      for i in range(iterations):
          print("Iteration %4d => Loss: %.20f" %
                (i, loss(X,Y,w)))
          w -= gradient(X,Y,w) * lr
      return w

  x1,x2,x3,y = np.loadtxt("police.txt", skiprows=1, unpack=True)
  X = np.column_stack((np.ones(x1.size), x1,x2,x3))
  Y = y.reshape(-1,1)
  w = train(X,Y,iterations=10_000, lr=0.001)
#+end_src

#+CAPTION: test overall correctness
#+begin_src python
  def test(X,Y,w):
      total_examples = X.shape[0]
      correct_results = np.sum(classify(X,w) == Y)
      success_percent = correct_results * 100 / total_examples
      print("\nSuccess: %d/%d (%.2f%%)" %
            (correct_results, total_examples, success_percent))

  test(X,Y,w)
#+end_src
